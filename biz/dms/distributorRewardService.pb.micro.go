// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: distributorRewardService.proto

package services

import (
	fmt "fmt"
	common "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for DistRewardCfgService service

func NewDistRewardCfgServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for DistRewardCfgService service

type DistRewardCfgService interface {
	Get(ctx context.Context, in *common.Empty, opts ...client.CallOption) (*DistRewardCfgResponse, error)
	Update(ctx context.Context, in *DistRewardCfg, opts ...client.CallOption) (*DistRewardCfgResponse, error)
}

type distRewardCfgService struct {
	c    client.Client
	name string
}

func NewDistRewardCfgService(name string, c client.Client) DistRewardCfgService {
	return &distRewardCfgService{
		c:    c,
		name: name,
	}
}

func (c *distRewardCfgService) Get(ctx context.Context, in *common.Empty, opts ...client.CallOption) (*DistRewardCfgResponse, error) {
	req := c.c.NewRequest(c.name, "DistRewardCfgService.Get", in)
	out := new(DistRewardCfgResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distRewardCfgService) Update(ctx context.Context, in *DistRewardCfg, opts ...client.CallOption) (*DistRewardCfgResponse, error) {
	req := c.c.NewRequest(c.name, "DistRewardCfgService.Update", in)
	out := new(DistRewardCfgResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DistRewardCfgService service

type DistRewardCfgServiceHandler interface {
	Get(context.Context, *common.Empty, *DistRewardCfgResponse) error
	Update(context.Context, *DistRewardCfg, *DistRewardCfgResponse) error
}

func RegisterDistRewardCfgServiceHandler(s server.Server, hdlr DistRewardCfgServiceHandler, opts ...server.HandlerOption) error {
	type distRewardCfgService interface {
		Get(ctx context.Context, in *common.Empty, out *DistRewardCfgResponse) error
		Update(ctx context.Context, in *DistRewardCfg, out *DistRewardCfgResponse) error
	}
	type DistRewardCfgService struct {
		distRewardCfgService
	}
	h := &distRewardCfgServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&DistRewardCfgService{h}, opts...))
}

type distRewardCfgServiceHandler struct {
	DistRewardCfgServiceHandler
}

func (h *distRewardCfgServiceHandler) Get(ctx context.Context, in *common.Empty, out *DistRewardCfgResponse) error {
	return h.DistRewardCfgServiceHandler.Get(ctx, in, out)
}

func (h *distRewardCfgServiceHandler) Update(ctx context.Context, in *DistRewardCfg, out *DistRewardCfgResponse) error {
	return h.DistRewardCfgServiceHandler.Update(ctx, in, out)
}

// Api Endpoints for DistRewardOptionService service

func NewDistRewardOptionServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for DistRewardOptionService service

type DistRewardOptionService interface {
	Create(ctx context.Context, in *DistRewardOption, opts ...client.CallOption) (*DistRewardOptionResponse, error)
	Update(ctx context.Context, in *DistRewardOption, opts ...client.CallOption) (*DistRewardOptionResponse, error)
	Get(ctx context.Context, in *DistRewardWhere, opts ...client.CallOption) (*DistRewardOptionResponse, error)
	Delete(ctx context.Context, in *DistRewardWhere, opts ...client.CallOption) (*DistRewardOptionResponse, error)
	Search(ctx context.Context, in *DistRewardWhere, opts ...client.CallOption) (*DistRewardOptionResponse, error)
	List(ctx context.Context, in *DistRewardWhere, opts ...client.CallOption) (*DistRewardOptionResponse, error)
}

type distRewardOptionService struct {
	c    client.Client
	name string
}

func NewDistRewardOptionService(name string, c client.Client) DistRewardOptionService {
	return &distRewardOptionService{
		c:    c,
		name: name,
	}
}

func (c *distRewardOptionService) Create(ctx context.Context, in *DistRewardOption, opts ...client.CallOption) (*DistRewardOptionResponse, error) {
	req := c.c.NewRequest(c.name, "DistRewardOptionService.Create", in)
	out := new(DistRewardOptionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distRewardOptionService) Update(ctx context.Context, in *DistRewardOption, opts ...client.CallOption) (*DistRewardOptionResponse, error) {
	req := c.c.NewRequest(c.name, "DistRewardOptionService.Update", in)
	out := new(DistRewardOptionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distRewardOptionService) Get(ctx context.Context, in *DistRewardWhere, opts ...client.CallOption) (*DistRewardOptionResponse, error) {
	req := c.c.NewRequest(c.name, "DistRewardOptionService.Get", in)
	out := new(DistRewardOptionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distRewardOptionService) Delete(ctx context.Context, in *DistRewardWhere, opts ...client.CallOption) (*DistRewardOptionResponse, error) {
	req := c.c.NewRequest(c.name, "DistRewardOptionService.Delete", in)
	out := new(DistRewardOptionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distRewardOptionService) Search(ctx context.Context, in *DistRewardWhere, opts ...client.CallOption) (*DistRewardOptionResponse, error) {
	req := c.c.NewRequest(c.name, "DistRewardOptionService.Search", in)
	out := new(DistRewardOptionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distRewardOptionService) List(ctx context.Context, in *DistRewardWhere, opts ...client.CallOption) (*DistRewardOptionResponse, error) {
	req := c.c.NewRequest(c.name, "DistRewardOptionService.List", in)
	out := new(DistRewardOptionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DistRewardOptionService service

type DistRewardOptionServiceHandler interface {
	Create(context.Context, *DistRewardOption, *DistRewardOptionResponse) error
	Update(context.Context, *DistRewardOption, *DistRewardOptionResponse) error
	Get(context.Context, *DistRewardWhere, *DistRewardOptionResponse) error
	Delete(context.Context, *DistRewardWhere, *DistRewardOptionResponse) error
	Search(context.Context, *DistRewardWhere, *DistRewardOptionResponse) error
	List(context.Context, *DistRewardWhere, *DistRewardOptionResponse) error
}

func RegisterDistRewardOptionServiceHandler(s server.Server, hdlr DistRewardOptionServiceHandler, opts ...server.HandlerOption) error {
	type distRewardOptionService interface {
		Create(ctx context.Context, in *DistRewardOption, out *DistRewardOptionResponse) error
		Update(ctx context.Context, in *DistRewardOption, out *DistRewardOptionResponse) error
		Get(ctx context.Context, in *DistRewardWhere, out *DistRewardOptionResponse) error
		Delete(ctx context.Context, in *DistRewardWhere, out *DistRewardOptionResponse) error
		Search(ctx context.Context, in *DistRewardWhere, out *DistRewardOptionResponse) error
		List(ctx context.Context, in *DistRewardWhere, out *DistRewardOptionResponse) error
	}
	type DistRewardOptionService struct {
		distRewardOptionService
	}
	h := &distRewardOptionServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&DistRewardOptionService{h}, opts...))
}

type distRewardOptionServiceHandler struct {
	DistRewardOptionServiceHandler
}

func (h *distRewardOptionServiceHandler) Create(ctx context.Context, in *DistRewardOption, out *DistRewardOptionResponse) error {
	return h.DistRewardOptionServiceHandler.Create(ctx, in, out)
}

func (h *distRewardOptionServiceHandler) Update(ctx context.Context, in *DistRewardOption, out *DistRewardOptionResponse) error {
	return h.DistRewardOptionServiceHandler.Update(ctx, in, out)
}

func (h *distRewardOptionServiceHandler) Get(ctx context.Context, in *DistRewardWhere, out *DistRewardOptionResponse) error {
	return h.DistRewardOptionServiceHandler.Get(ctx, in, out)
}

func (h *distRewardOptionServiceHandler) Delete(ctx context.Context, in *DistRewardWhere, out *DistRewardOptionResponse) error {
	return h.DistRewardOptionServiceHandler.Delete(ctx, in, out)
}

func (h *distRewardOptionServiceHandler) Search(ctx context.Context, in *DistRewardWhere, out *DistRewardOptionResponse) error {
	return h.DistRewardOptionServiceHandler.Search(ctx, in, out)
}

func (h *distRewardOptionServiceHandler) List(ctx context.Context, in *DistRewardWhere, out *DistRewardOptionResponse) error {
	return h.DistRewardOptionServiceHandler.List(ctx, in, out)
}

// Api Endpoints for DistRewardService service

func NewDistRewardServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for DistRewardService service

type DistRewardService interface {
	Get(ctx context.Context, in *DistRewardWhere, opts ...client.CallOption) (*DistRewardResponse, error)
	Search(ctx context.Context, in *DistRewardWhere, opts ...client.CallOption) (*DistRewardResponse, error)
}

type distRewardService struct {
	c    client.Client
	name string
}

func NewDistRewardService(name string, c client.Client) DistRewardService {
	return &distRewardService{
		c:    c,
		name: name,
	}
}

func (c *distRewardService) Get(ctx context.Context, in *DistRewardWhere, opts ...client.CallOption) (*DistRewardResponse, error) {
	req := c.c.NewRequest(c.name, "DistRewardService.Get", in)
	out := new(DistRewardResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distRewardService) Search(ctx context.Context, in *DistRewardWhere, opts ...client.CallOption) (*DistRewardResponse, error) {
	req := c.c.NewRequest(c.name, "DistRewardService.Search", in)
	out := new(DistRewardResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DistRewardService service

type DistRewardServiceHandler interface {
	Get(context.Context, *DistRewardWhere, *DistRewardResponse) error
	Search(context.Context, *DistRewardWhere, *DistRewardResponse) error
}

func RegisterDistRewardServiceHandler(s server.Server, hdlr DistRewardServiceHandler, opts ...server.HandlerOption) error {
	type distRewardService interface {
		Get(ctx context.Context, in *DistRewardWhere, out *DistRewardResponse) error
		Search(ctx context.Context, in *DistRewardWhere, out *DistRewardResponse) error
	}
	type DistRewardService struct {
		distRewardService
	}
	h := &distRewardServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&DistRewardService{h}, opts...))
}

type distRewardServiceHandler struct {
	DistRewardServiceHandler
}

func (h *distRewardServiceHandler) Get(ctx context.Context, in *DistRewardWhere, out *DistRewardResponse) error {
	return h.DistRewardServiceHandler.Get(ctx, in, out)
}

func (h *distRewardServiceHandler) Search(ctx context.Context, in *DistRewardWhere, out *DistRewardResponse) error {
	return h.DistRewardServiceHandler.Search(ctx, in, out)
}

// Api Endpoints for MyDistRewardService service

func NewMyDistRewardServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for MyDistRewardService service

type MyDistRewardService interface {
	Get(ctx context.Context, in *DistRewardWhere, opts ...client.CallOption) (*DistRewardResponse, error)
}

type myDistRewardService struct {
	c    client.Client
	name string
}

func NewMyDistRewardService(name string, c client.Client) MyDistRewardService {
	return &myDistRewardService{
		c:    c,
		name: name,
	}
}

func (c *myDistRewardService) Get(ctx context.Context, in *DistRewardWhere, opts ...client.CallOption) (*DistRewardResponse, error) {
	req := c.c.NewRequest(c.name, "MyDistRewardService.Get", in)
	out := new(DistRewardResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MyDistRewardService service

type MyDistRewardServiceHandler interface {
	Get(context.Context, *DistRewardWhere, *DistRewardResponse) error
}

func RegisterMyDistRewardServiceHandler(s server.Server, hdlr MyDistRewardServiceHandler, opts ...server.HandlerOption) error {
	type myDistRewardService interface {
		Get(ctx context.Context, in *DistRewardWhere, out *DistRewardResponse) error
	}
	type MyDistRewardService struct {
		myDistRewardService
	}
	h := &myDistRewardServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&MyDistRewardService{h}, opts...))
}

type myDistRewardServiceHandler struct {
	MyDistRewardServiceHandler
}

func (h *myDistRewardServiceHandler) Get(ctx context.Context, in *DistRewardWhere, out *DistRewardResponse) error {
	return h.MyDistRewardServiceHandler.Get(ctx, in, out)
}

// Api Endpoints for DistRewardRecordService service

func NewDistRewardRecordServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for DistRewardRecordService service

type DistRewardRecordService interface {
	Get(ctx context.Context, in *DistRewardRecord, opts ...client.CallOption) (*DistRewardRecordResponse, error)
	Search(ctx context.Context, in *DistRewardWhere, opts ...client.CallOption) (*DistRewardRecordResponse, error)
	Settlement(ctx context.Context, in *DistRewardWhere, opts ...client.CallOption) (*DistRewardRecordResponse, error)
}

type distRewardRecordService struct {
	c    client.Client
	name string
}

func NewDistRewardRecordService(name string, c client.Client) DistRewardRecordService {
	return &distRewardRecordService{
		c:    c,
		name: name,
	}
}

func (c *distRewardRecordService) Get(ctx context.Context, in *DistRewardRecord, opts ...client.CallOption) (*DistRewardRecordResponse, error) {
	req := c.c.NewRequest(c.name, "DistRewardRecordService.Get", in)
	out := new(DistRewardRecordResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distRewardRecordService) Search(ctx context.Context, in *DistRewardWhere, opts ...client.CallOption) (*DistRewardRecordResponse, error) {
	req := c.c.NewRequest(c.name, "DistRewardRecordService.Search", in)
	out := new(DistRewardRecordResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distRewardRecordService) Settlement(ctx context.Context, in *DistRewardWhere, opts ...client.CallOption) (*DistRewardRecordResponse, error) {
	req := c.c.NewRequest(c.name, "DistRewardRecordService.Settlement", in)
	out := new(DistRewardRecordResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DistRewardRecordService service

type DistRewardRecordServiceHandler interface {
	Get(context.Context, *DistRewardRecord, *DistRewardRecordResponse) error
	Search(context.Context, *DistRewardWhere, *DistRewardRecordResponse) error
	Settlement(context.Context, *DistRewardWhere, *DistRewardRecordResponse) error
}

func RegisterDistRewardRecordServiceHandler(s server.Server, hdlr DistRewardRecordServiceHandler, opts ...server.HandlerOption) error {
	type distRewardRecordService interface {
		Get(ctx context.Context, in *DistRewardRecord, out *DistRewardRecordResponse) error
		Search(ctx context.Context, in *DistRewardWhere, out *DistRewardRecordResponse) error
		Settlement(ctx context.Context, in *DistRewardWhere, out *DistRewardRecordResponse) error
	}
	type DistRewardRecordService struct {
		distRewardRecordService
	}
	h := &distRewardRecordServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&DistRewardRecordService{h}, opts...))
}

type distRewardRecordServiceHandler struct {
	DistRewardRecordServiceHandler
}

func (h *distRewardRecordServiceHandler) Get(ctx context.Context, in *DistRewardRecord, out *DistRewardRecordResponse) error {
	return h.DistRewardRecordServiceHandler.Get(ctx, in, out)
}

func (h *distRewardRecordServiceHandler) Search(ctx context.Context, in *DistRewardWhere, out *DistRewardRecordResponse) error {
	return h.DistRewardRecordServiceHandler.Search(ctx, in, out)
}

func (h *distRewardRecordServiceHandler) Settlement(ctx context.Context, in *DistRewardWhere, out *DistRewardRecordResponse) error {
	return h.DistRewardRecordServiceHandler.Settlement(ctx, in, out)
}

// Api Endpoints for DistRewardRecordDetailService service

func NewDistRewardRecordDetailServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for DistRewardRecordDetailService service

type DistRewardRecordDetailService interface {
}

type distRewardRecordDetailService struct {
	c    client.Client
	name string
}

func NewDistRewardRecordDetailService(name string, c client.Client) DistRewardRecordDetailService {
	return &distRewardRecordDetailService{
		c:    c,
		name: name,
	}
}

// Server API for DistRewardRecordDetailService service

type DistRewardRecordDetailServiceHandler interface {
}

func RegisterDistRewardRecordDetailServiceHandler(s server.Server, hdlr DistRewardRecordDetailServiceHandler, opts ...server.HandlerOption) error {
	type distRewardRecordDetailService interface {
	}
	type DistRewardRecordDetailService struct {
		distRewardRecordDetailService
	}
	h := &distRewardRecordDetailServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&DistRewardRecordDetailService{h}, opts...))
}

type distRewardRecordDetailServiceHandler struct {
	DistRewardRecordDetailServiceHandler
}

// Api Endpoints for DistRewardOrderService service

func NewDistRewardOrderServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for DistRewardOrderService service

type DistRewardOrderService interface {
	// 获取奖励订单详情
	Get(ctx context.Context, in *OrderInfoWhere, opts ...client.CallOption) (*OrderInfoResponse, error)
	// 查询奖励订单列表
	Search(ctx context.Context, in *OrderInfoWhere, opts ...client.CallOption) (*OrderInfoResponse, error)
}

type distRewardOrderService struct {
	c    client.Client
	name string
}

func NewDistRewardOrderService(name string, c client.Client) DistRewardOrderService {
	return &distRewardOrderService{
		c:    c,
		name: name,
	}
}

func (c *distRewardOrderService) Get(ctx context.Context, in *OrderInfoWhere, opts ...client.CallOption) (*OrderInfoResponse, error) {
	req := c.c.NewRequest(c.name, "DistRewardOrderService.Get", in)
	out := new(OrderInfoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distRewardOrderService) Search(ctx context.Context, in *OrderInfoWhere, opts ...client.CallOption) (*OrderInfoResponse, error) {
	req := c.c.NewRequest(c.name, "DistRewardOrderService.Search", in)
	out := new(OrderInfoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DistRewardOrderService service

type DistRewardOrderServiceHandler interface {
	// 获取奖励订单详情
	Get(context.Context, *OrderInfoWhere, *OrderInfoResponse) error
	// 查询奖励订单列表
	Search(context.Context, *OrderInfoWhere, *OrderInfoResponse) error
}

func RegisterDistRewardOrderServiceHandler(s server.Server, hdlr DistRewardOrderServiceHandler, opts ...server.HandlerOption) error {
	type distRewardOrderService interface {
		Get(ctx context.Context, in *OrderInfoWhere, out *OrderInfoResponse) error
		Search(ctx context.Context, in *OrderInfoWhere, out *OrderInfoResponse) error
	}
	type DistRewardOrderService struct {
		distRewardOrderService
	}
	h := &distRewardOrderServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&DistRewardOrderService{h}, opts...))
}

type distRewardOrderServiceHandler struct {
	DistRewardOrderServiceHandler
}

func (h *distRewardOrderServiceHandler) Get(ctx context.Context, in *OrderInfoWhere, out *OrderInfoResponse) error {
	return h.DistRewardOrderServiceHandler.Get(ctx, in, out)
}

func (h *distRewardOrderServiceHandler) Search(ctx context.Context, in *OrderInfoWhere, out *OrderInfoResponse) error {
	return h.DistRewardOrderServiceHandler.Search(ctx, in, out)
}

// Api Endpoints for MyDistRewardOrderService service

func NewMyDistRewardOrderServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for MyDistRewardOrderService service

type MyDistRewardOrderService interface {
	// 获取奖励订单详情
	Get(ctx context.Context, in *OrderInfoWhere, opts ...client.CallOption) (*OrderInfoResponse, error)
	// 查询奖励订单列表
	Search(ctx context.Context, in *OrderInfoWhere, opts ...client.CallOption) (*OrderInfoResponse, error)
}

type myDistRewardOrderService struct {
	c    client.Client
	name string
}

func NewMyDistRewardOrderService(name string, c client.Client) MyDistRewardOrderService {
	return &myDistRewardOrderService{
		c:    c,
		name: name,
	}
}

func (c *myDistRewardOrderService) Get(ctx context.Context, in *OrderInfoWhere, opts ...client.CallOption) (*OrderInfoResponse, error) {
	req := c.c.NewRequest(c.name, "MyDistRewardOrderService.Get", in)
	out := new(OrderInfoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myDistRewardOrderService) Search(ctx context.Context, in *OrderInfoWhere, opts ...client.CallOption) (*OrderInfoResponse, error) {
	req := c.c.NewRequest(c.name, "MyDistRewardOrderService.Search", in)
	out := new(OrderInfoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MyDistRewardOrderService service

type MyDistRewardOrderServiceHandler interface {
	// 获取奖励订单详情
	Get(context.Context, *OrderInfoWhere, *OrderInfoResponse) error
	// 查询奖励订单列表
	Search(context.Context, *OrderInfoWhere, *OrderInfoResponse) error
}

func RegisterMyDistRewardOrderServiceHandler(s server.Server, hdlr MyDistRewardOrderServiceHandler, opts ...server.HandlerOption) error {
	type myDistRewardOrderService interface {
		Get(ctx context.Context, in *OrderInfoWhere, out *OrderInfoResponse) error
		Search(ctx context.Context, in *OrderInfoWhere, out *OrderInfoResponse) error
	}
	type MyDistRewardOrderService struct {
		myDistRewardOrderService
	}
	h := &myDistRewardOrderServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&MyDistRewardOrderService{h}, opts...))
}

type myDistRewardOrderServiceHandler struct {
	MyDistRewardOrderServiceHandler
}

func (h *myDistRewardOrderServiceHandler) Get(ctx context.Context, in *OrderInfoWhere, out *OrderInfoResponse) error {
	return h.MyDistRewardOrderServiceHandler.Get(ctx, in, out)
}

func (h *myDistRewardOrderServiceHandler) Search(ctx context.Context, in *OrderInfoWhere, out *OrderInfoResponse) error {
	return h.MyDistRewardOrderServiceHandler.Search(ctx, in, out)
}

// Api Endpoints for MyDistRewardWithdrawService service

func NewMyDistRewardWithdrawServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for MyDistRewardWithdrawService service

type MyDistRewardWithdrawService interface {
	//申请奖金提现
	Apply(ctx context.Context, in *WithdrawApply, opts ...client.CallOption) (*WithdrawApplyResponse, error)
	//提交奖金提现申请
	Submit(ctx context.Context, in *Withdraw, opts ...client.CallOption) (*WithdrawResponse, error)
	//获取奖金提现信息
	Get(ctx context.Context, in *Withdraw, opts ...client.CallOption) (*WithdrawResponse, error)
	//查询我的提现记录
	Search(ctx context.Context, in *WithdrawWhere, opts ...client.CallOption) (*WithdrawResponse, error)
}

type myDistRewardWithdrawService struct {
	c    client.Client
	name string
}

func NewMyDistRewardWithdrawService(name string, c client.Client) MyDistRewardWithdrawService {
	return &myDistRewardWithdrawService{
		c:    c,
		name: name,
	}
}

func (c *myDistRewardWithdrawService) Apply(ctx context.Context, in *WithdrawApply, opts ...client.CallOption) (*WithdrawApplyResponse, error) {
	req := c.c.NewRequest(c.name, "MyDistRewardWithdrawService.Apply", in)
	out := new(WithdrawApplyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myDistRewardWithdrawService) Submit(ctx context.Context, in *Withdraw, opts ...client.CallOption) (*WithdrawResponse, error) {
	req := c.c.NewRequest(c.name, "MyDistRewardWithdrawService.Submit", in)
	out := new(WithdrawResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myDistRewardWithdrawService) Get(ctx context.Context, in *Withdraw, opts ...client.CallOption) (*WithdrawResponse, error) {
	req := c.c.NewRequest(c.name, "MyDistRewardWithdrawService.Get", in)
	out := new(WithdrawResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myDistRewardWithdrawService) Search(ctx context.Context, in *WithdrawWhere, opts ...client.CallOption) (*WithdrawResponse, error) {
	req := c.c.NewRequest(c.name, "MyDistRewardWithdrawService.Search", in)
	out := new(WithdrawResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MyDistRewardWithdrawService service

type MyDistRewardWithdrawServiceHandler interface {
	//申请奖金提现
	Apply(context.Context, *WithdrawApply, *WithdrawApplyResponse) error
	//提交奖金提现申请
	Submit(context.Context, *Withdraw, *WithdrawResponse) error
	//获取奖金提现信息
	Get(context.Context, *Withdraw, *WithdrawResponse) error
	//查询我的提现记录
	Search(context.Context, *WithdrawWhere, *WithdrawResponse) error
}

func RegisterMyDistRewardWithdrawServiceHandler(s server.Server, hdlr MyDistRewardWithdrawServiceHandler, opts ...server.HandlerOption) error {
	type myDistRewardWithdrawService interface {
		Apply(ctx context.Context, in *WithdrawApply, out *WithdrawApplyResponse) error
		Submit(ctx context.Context, in *Withdraw, out *WithdrawResponse) error
		Get(ctx context.Context, in *Withdraw, out *WithdrawResponse) error
		Search(ctx context.Context, in *WithdrawWhere, out *WithdrawResponse) error
	}
	type MyDistRewardWithdrawService struct {
		myDistRewardWithdrawService
	}
	h := &myDistRewardWithdrawServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&MyDistRewardWithdrawService{h}, opts...))
}

type myDistRewardWithdrawServiceHandler struct {
	MyDistRewardWithdrawServiceHandler
}

func (h *myDistRewardWithdrawServiceHandler) Apply(ctx context.Context, in *WithdrawApply, out *WithdrawApplyResponse) error {
	return h.MyDistRewardWithdrawServiceHandler.Apply(ctx, in, out)
}

func (h *myDistRewardWithdrawServiceHandler) Submit(ctx context.Context, in *Withdraw, out *WithdrawResponse) error {
	return h.MyDistRewardWithdrawServiceHandler.Submit(ctx, in, out)
}

func (h *myDistRewardWithdrawServiceHandler) Get(ctx context.Context, in *Withdraw, out *WithdrawResponse) error {
	return h.MyDistRewardWithdrawServiceHandler.Get(ctx, in, out)
}

func (h *myDistRewardWithdrawServiceHandler) Search(ctx context.Context, in *WithdrawWhere, out *WithdrawResponse) error {
	return h.MyDistRewardWithdrawServiceHandler.Search(ctx, in, out)
}

// Api Endpoints for DistRewardWithdrawService service

func NewDistRewardWithdrawServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for DistRewardWithdrawService service

type DistRewardWithdrawService interface {
	//审核佣金提现
	Check(ctx context.Context, in *WithdrawWhere, opts ...client.CallOption) (*WithdrawResponse, error)
	//确认打款（自动打款）
	ConfirmAuto(ctx context.Context, in *WithdrawWhere, opts ...client.CallOption) (*WithdrawResponse, error)
	//确认打款（手动打款）
	ConfirmManual(ctx context.Context, in *WithdrawWhere, opts ...client.CallOption) (*WithdrawResponse, error)
	//获取佣金提现信息
	Get(ctx context.Context, in *Withdraw, opts ...client.CallOption) (*WithdrawResponse, error)
	//分页查询佣金提现记录
	Search(ctx context.Context, in *WithdrawWhere, opts ...client.CallOption) (*WithdrawResponse, error)
}

type distRewardWithdrawService struct {
	c    client.Client
	name string
}

func NewDistRewardWithdrawService(name string, c client.Client) DistRewardWithdrawService {
	return &distRewardWithdrawService{
		c:    c,
		name: name,
	}
}

func (c *distRewardWithdrawService) Check(ctx context.Context, in *WithdrawWhere, opts ...client.CallOption) (*WithdrawResponse, error) {
	req := c.c.NewRequest(c.name, "DistRewardWithdrawService.Check", in)
	out := new(WithdrawResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distRewardWithdrawService) ConfirmAuto(ctx context.Context, in *WithdrawWhere, opts ...client.CallOption) (*WithdrawResponse, error) {
	req := c.c.NewRequest(c.name, "DistRewardWithdrawService.ConfirmAuto", in)
	out := new(WithdrawResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distRewardWithdrawService) ConfirmManual(ctx context.Context, in *WithdrawWhere, opts ...client.CallOption) (*WithdrawResponse, error) {
	req := c.c.NewRequest(c.name, "DistRewardWithdrawService.ConfirmManual", in)
	out := new(WithdrawResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distRewardWithdrawService) Get(ctx context.Context, in *Withdraw, opts ...client.CallOption) (*WithdrawResponse, error) {
	req := c.c.NewRequest(c.name, "DistRewardWithdrawService.Get", in)
	out := new(WithdrawResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distRewardWithdrawService) Search(ctx context.Context, in *WithdrawWhere, opts ...client.CallOption) (*WithdrawResponse, error) {
	req := c.c.NewRequest(c.name, "DistRewardWithdrawService.Search", in)
	out := new(WithdrawResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DistRewardWithdrawService service

type DistRewardWithdrawServiceHandler interface {
	//审核佣金提现
	Check(context.Context, *WithdrawWhere, *WithdrawResponse) error
	//确认打款（自动打款）
	ConfirmAuto(context.Context, *WithdrawWhere, *WithdrawResponse) error
	//确认打款（手动打款）
	ConfirmManual(context.Context, *WithdrawWhere, *WithdrawResponse) error
	//获取佣金提现信息
	Get(context.Context, *Withdraw, *WithdrawResponse) error
	//分页查询佣金提现记录
	Search(context.Context, *WithdrawWhere, *WithdrawResponse) error
}

func RegisterDistRewardWithdrawServiceHandler(s server.Server, hdlr DistRewardWithdrawServiceHandler, opts ...server.HandlerOption) error {
	type distRewardWithdrawService interface {
		Check(ctx context.Context, in *WithdrawWhere, out *WithdrawResponse) error
		ConfirmAuto(ctx context.Context, in *WithdrawWhere, out *WithdrawResponse) error
		ConfirmManual(ctx context.Context, in *WithdrawWhere, out *WithdrawResponse) error
		Get(ctx context.Context, in *Withdraw, out *WithdrawResponse) error
		Search(ctx context.Context, in *WithdrawWhere, out *WithdrawResponse) error
	}
	type DistRewardWithdrawService struct {
		distRewardWithdrawService
	}
	h := &distRewardWithdrawServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&DistRewardWithdrawService{h}, opts...))
}

type distRewardWithdrawServiceHandler struct {
	DistRewardWithdrawServiceHandler
}

func (h *distRewardWithdrawServiceHandler) Check(ctx context.Context, in *WithdrawWhere, out *WithdrawResponse) error {
	return h.DistRewardWithdrawServiceHandler.Check(ctx, in, out)
}

func (h *distRewardWithdrawServiceHandler) ConfirmAuto(ctx context.Context, in *WithdrawWhere, out *WithdrawResponse) error {
	return h.DistRewardWithdrawServiceHandler.ConfirmAuto(ctx, in, out)
}

func (h *distRewardWithdrawServiceHandler) ConfirmManual(ctx context.Context, in *WithdrawWhere, out *WithdrawResponse) error {
	return h.DistRewardWithdrawServiceHandler.ConfirmManual(ctx, in, out)
}

func (h *distRewardWithdrawServiceHandler) Get(ctx context.Context, in *Withdraw, out *WithdrawResponse) error {
	return h.DistRewardWithdrawServiceHandler.Get(ctx, in, out)
}

func (h *distRewardWithdrawServiceHandler) Search(ctx context.Context, in *WithdrawWhere, out *WithdrawResponse) error {
	return h.DistRewardWithdrawServiceHandler.Search(ctx, in, out)
}

// Api Endpoints for MyDistRewardStatementService service

func NewMyDistRewardStatementServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for MyDistRewardStatementService service

type MyDistRewardStatementService interface {
	//获取分销员奖励金收支明细
	Get(ctx context.Context, in *Statement, opts ...client.CallOption) (*StatementResponse, error)
	//查询分销员奖励金收支明细
	Search(ctx context.Context, in *StatementWhere, opts ...client.CallOption) (*StatementResponse, error)
}

type myDistRewardStatementService struct {
	c    client.Client
	name string
}

func NewMyDistRewardStatementService(name string, c client.Client) MyDistRewardStatementService {
	return &myDistRewardStatementService{
		c:    c,
		name: name,
	}
}

func (c *myDistRewardStatementService) Get(ctx context.Context, in *Statement, opts ...client.CallOption) (*StatementResponse, error) {
	req := c.c.NewRequest(c.name, "MyDistRewardStatementService.Get", in)
	out := new(StatementResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myDistRewardStatementService) Search(ctx context.Context, in *StatementWhere, opts ...client.CallOption) (*StatementResponse, error) {
	req := c.c.NewRequest(c.name, "MyDistRewardStatementService.Search", in)
	out := new(StatementResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MyDistRewardStatementService service

type MyDistRewardStatementServiceHandler interface {
	//获取分销员奖励金收支明细
	Get(context.Context, *Statement, *StatementResponse) error
	//查询分销员奖励金收支明细
	Search(context.Context, *StatementWhere, *StatementResponse) error
}

func RegisterMyDistRewardStatementServiceHandler(s server.Server, hdlr MyDistRewardStatementServiceHandler, opts ...server.HandlerOption) error {
	type myDistRewardStatementService interface {
		Get(ctx context.Context, in *Statement, out *StatementResponse) error
		Search(ctx context.Context, in *StatementWhere, out *StatementResponse) error
	}
	type MyDistRewardStatementService struct {
		myDistRewardStatementService
	}
	h := &myDistRewardStatementServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&MyDistRewardStatementService{h}, opts...))
}

type myDistRewardStatementServiceHandler struct {
	MyDistRewardStatementServiceHandler
}

func (h *myDistRewardStatementServiceHandler) Get(ctx context.Context, in *Statement, out *StatementResponse) error {
	return h.MyDistRewardStatementServiceHandler.Get(ctx, in, out)
}

func (h *myDistRewardStatementServiceHandler) Search(ctx context.Context, in *StatementWhere, out *StatementResponse) error {
	return h.MyDistRewardStatementServiceHandler.Search(ctx, in, out)
}

// Api Endpoints for DistRewardStatementService service

func NewDistRewardStatementServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for DistRewardStatementService service

type DistRewardStatementService interface {
	//获取分销员奖励金收支明细
	Get(ctx context.Context, in *Statement, opts ...client.CallOption) (*StatementResponse, error)
	//查询分销员奖励金收支明细
	Search(ctx context.Context, in *StatementWhere, opts ...client.CallOption) (*StatementResponse, error)
}

type distRewardStatementService struct {
	c    client.Client
	name string
}

func NewDistRewardStatementService(name string, c client.Client) DistRewardStatementService {
	return &distRewardStatementService{
		c:    c,
		name: name,
	}
}

func (c *distRewardStatementService) Get(ctx context.Context, in *Statement, opts ...client.CallOption) (*StatementResponse, error) {
	req := c.c.NewRequest(c.name, "DistRewardStatementService.Get", in)
	out := new(StatementResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distRewardStatementService) Search(ctx context.Context, in *StatementWhere, opts ...client.CallOption) (*StatementResponse, error) {
	req := c.c.NewRequest(c.name, "DistRewardStatementService.Search", in)
	out := new(StatementResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DistRewardStatementService service

type DistRewardStatementServiceHandler interface {
	//获取分销员奖励金收支明细
	Get(context.Context, *Statement, *StatementResponse) error
	//查询分销员奖励金收支明细
	Search(context.Context, *StatementWhere, *StatementResponse) error
}

func RegisterDistRewardStatementServiceHandler(s server.Server, hdlr DistRewardStatementServiceHandler, opts ...server.HandlerOption) error {
	type distRewardStatementService interface {
		Get(ctx context.Context, in *Statement, out *StatementResponse) error
		Search(ctx context.Context, in *StatementWhere, out *StatementResponse) error
	}
	type DistRewardStatementService struct {
		distRewardStatementService
	}
	h := &distRewardStatementServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&DistRewardStatementService{h}, opts...))
}

type distRewardStatementServiceHandler struct {
	DistRewardStatementServiceHandler
}

func (h *distRewardStatementServiceHandler) Get(ctx context.Context, in *Statement, out *StatementResponse) error {
	return h.DistRewardStatementServiceHandler.Get(ctx, in, out)
}

func (h *distRewardStatementServiceHandler) Search(ctx context.Context, in *StatementWhere, out *StatementResponse) error {
	return h.DistRewardStatementServiceHandler.Search(ctx, in, out)
}
