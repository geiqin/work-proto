// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: exportService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ExportService service

func NewExportServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ExportService service

type ExportService interface {
	// 导出分销员佣金提现
	CommissionWithdrawExport(ctx context.Context, in *WithdrawWhere, opts ...client.CallOption) (*ExportResponse, error)
	// 导出团长分红提现
	BonusWithdrawExport(ctx context.Context, in *WithdrawWhere, opts ...client.CallOption) (*ExportResponse, error)
	// 导出分销员业绩提现
	RewardWithdrawExport(ctx context.Context, in *WithdrawWhere, opts ...client.CallOption) (*ExportResponse, error)
}

type exportService struct {
	c    client.Client
	name string
}

func NewExportService(name string, c client.Client) ExportService {
	return &exportService{
		c:    c,
		name: name,
	}
}

func (c *exportService) CommissionWithdrawExport(ctx context.Context, in *WithdrawWhere, opts ...client.CallOption) (*ExportResponse, error) {
	req := c.c.NewRequest(c.name, "ExportService.CommissionWithdrawExport", in)
	out := new(ExportResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exportService) BonusWithdrawExport(ctx context.Context, in *WithdrawWhere, opts ...client.CallOption) (*ExportResponse, error) {
	req := c.c.NewRequest(c.name, "ExportService.BonusWithdrawExport", in)
	out := new(ExportResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exportService) RewardWithdrawExport(ctx context.Context, in *WithdrawWhere, opts ...client.CallOption) (*ExportResponse, error) {
	req := c.c.NewRequest(c.name, "ExportService.RewardWithdrawExport", in)
	out := new(ExportResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ExportService service

type ExportServiceHandler interface {
	// 导出分销员佣金提现
	CommissionWithdrawExport(context.Context, *WithdrawWhere, *ExportResponse) error
	// 导出团长分红提现
	BonusWithdrawExport(context.Context, *WithdrawWhere, *ExportResponse) error
	// 导出分销员业绩提现
	RewardWithdrawExport(context.Context, *WithdrawWhere, *ExportResponse) error
}

func RegisterExportServiceHandler(s server.Server, hdlr ExportServiceHandler, opts ...server.HandlerOption) error {
	type exportService interface {
		CommissionWithdrawExport(ctx context.Context, in *WithdrawWhere, out *ExportResponse) error
		BonusWithdrawExport(ctx context.Context, in *WithdrawWhere, out *ExportResponse) error
		RewardWithdrawExport(ctx context.Context, in *WithdrawWhere, out *ExportResponse) error
	}
	type ExportService struct {
		exportService
	}
	h := &exportServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ExportService{h}, opts...))
}

type exportServiceHandler struct {
	ExportServiceHandler
}

func (h *exportServiceHandler) CommissionWithdrawExport(ctx context.Context, in *WithdrawWhere, out *ExportResponse) error {
	return h.ExportServiceHandler.CommissionWithdrawExport(ctx, in, out)
}

func (h *exportServiceHandler) BonusWithdrawExport(ctx context.Context, in *WithdrawWhere, out *ExportResponse) error {
	return h.ExportServiceHandler.BonusWithdrawExport(ctx, in, out)
}

func (h *exportServiceHandler) RewardWithdrawExport(ctx context.Context, in *WithdrawWhere, out *ExportResponse) error {
	return h.ExportServiceHandler.RewardWithdrawExport(ctx, in, out)
}
