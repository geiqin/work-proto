// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: leaderApplierService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for MyLeaderApplierService service

func NewMyLeaderApplierServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for MyLeaderApplierService service

type MyLeaderApplierService interface {
	// 发起申请团长
	Apply(ctx context.Context, in *Applier, opts ...client.CallOption) (*ChooseApplyResponse, error)
	// 提交团长申请
	Submit(ctx context.Context, in *Applier, opts ...client.CallOption) (*ApplierResponse, error)
	//获取申请者信息
	Get(ctx context.Context, in *Applier, opts ...client.CallOption) (*ApplierResponse, error)
	//检查用户是否已经提交申请信息
	Exists(ctx context.Context, in *Applier, opts ...client.CallOption) (*ApplierResponse, error)
}

type myLeaderApplierService struct {
	c    client.Client
	name string
}

func NewMyLeaderApplierService(name string, c client.Client) MyLeaderApplierService {
	return &myLeaderApplierService{
		c:    c,
		name: name,
	}
}

func (c *myLeaderApplierService) Apply(ctx context.Context, in *Applier, opts ...client.CallOption) (*ChooseApplyResponse, error) {
	req := c.c.NewRequest(c.name, "MyLeaderApplierService.Apply", in)
	out := new(ChooseApplyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myLeaderApplierService) Submit(ctx context.Context, in *Applier, opts ...client.CallOption) (*ApplierResponse, error) {
	req := c.c.NewRequest(c.name, "MyLeaderApplierService.Submit", in)
	out := new(ApplierResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myLeaderApplierService) Get(ctx context.Context, in *Applier, opts ...client.CallOption) (*ApplierResponse, error) {
	req := c.c.NewRequest(c.name, "MyLeaderApplierService.Get", in)
	out := new(ApplierResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myLeaderApplierService) Exists(ctx context.Context, in *Applier, opts ...client.CallOption) (*ApplierResponse, error) {
	req := c.c.NewRequest(c.name, "MyLeaderApplierService.Exists", in)
	out := new(ApplierResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MyLeaderApplierService service

type MyLeaderApplierServiceHandler interface {
	// 发起申请团长
	Apply(context.Context, *Applier, *ChooseApplyResponse) error
	// 提交团长申请
	Submit(context.Context, *Applier, *ApplierResponse) error
	//获取申请者信息
	Get(context.Context, *Applier, *ApplierResponse) error
	//检查用户是否已经提交申请信息
	Exists(context.Context, *Applier, *ApplierResponse) error
}

func RegisterMyLeaderApplierServiceHandler(s server.Server, hdlr MyLeaderApplierServiceHandler, opts ...server.HandlerOption) error {
	type myLeaderApplierService interface {
		Apply(ctx context.Context, in *Applier, out *ChooseApplyResponse) error
		Submit(ctx context.Context, in *Applier, out *ApplierResponse) error
		Get(ctx context.Context, in *Applier, out *ApplierResponse) error
		Exists(ctx context.Context, in *Applier, out *ApplierResponse) error
	}
	type MyLeaderApplierService struct {
		myLeaderApplierService
	}
	h := &myLeaderApplierServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&MyLeaderApplierService{h}, opts...))
}

type myLeaderApplierServiceHandler struct {
	MyLeaderApplierServiceHandler
}

func (h *myLeaderApplierServiceHandler) Apply(ctx context.Context, in *Applier, out *ChooseApplyResponse) error {
	return h.MyLeaderApplierServiceHandler.Apply(ctx, in, out)
}

func (h *myLeaderApplierServiceHandler) Submit(ctx context.Context, in *Applier, out *ApplierResponse) error {
	return h.MyLeaderApplierServiceHandler.Submit(ctx, in, out)
}

func (h *myLeaderApplierServiceHandler) Get(ctx context.Context, in *Applier, out *ApplierResponse) error {
	return h.MyLeaderApplierServiceHandler.Get(ctx, in, out)
}

func (h *myLeaderApplierServiceHandler) Exists(ctx context.Context, in *Applier, out *ApplierResponse) error {
	return h.MyLeaderApplierServiceHandler.Exists(ctx, in, out)
}

// Api Endpoints for LeaderApplierService service

func NewLeaderApplierServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for LeaderApplierService service

type LeaderApplierService interface {
	//审核申请者
	Check(ctx context.Context, in *Applier, opts ...client.CallOption) (*ApplierResponse, error)
	//获取申请者信息
	Get(ctx context.Context, in *Applier, opts ...client.CallOption) (*ApplierResponse, error)
	//分页查询申请者
	Search(ctx context.Context, in *ApplierRequest, opts ...client.CallOption) (*ApplierResponse, error)
}

type leaderApplierService struct {
	c    client.Client
	name string
}

func NewLeaderApplierService(name string, c client.Client) LeaderApplierService {
	return &leaderApplierService{
		c:    c,
		name: name,
	}
}

func (c *leaderApplierService) Check(ctx context.Context, in *Applier, opts ...client.CallOption) (*ApplierResponse, error) {
	req := c.c.NewRequest(c.name, "LeaderApplierService.Check", in)
	out := new(ApplierResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaderApplierService) Get(ctx context.Context, in *Applier, opts ...client.CallOption) (*ApplierResponse, error) {
	req := c.c.NewRequest(c.name, "LeaderApplierService.Get", in)
	out := new(ApplierResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaderApplierService) Search(ctx context.Context, in *ApplierRequest, opts ...client.CallOption) (*ApplierResponse, error) {
	req := c.c.NewRequest(c.name, "LeaderApplierService.Search", in)
	out := new(ApplierResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LeaderApplierService service

type LeaderApplierServiceHandler interface {
	//审核申请者
	Check(context.Context, *Applier, *ApplierResponse) error
	//获取申请者信息
	Get(context.Context, *Applier, *ApplierResponse) error
	//分页查询申请者
	Search(context.Context, *ApplierRequest, *ApplierResponse) error
}

func RegisterLeaderApplierServiceHandler(s server.Server, hdlr LeaderApplierServiceHandler, opts ...server.HandlerOption) error {
	type leaderApplierService interface {
		Check(ctx context.Context, in *Applier, out *ApplierResponse) error
		Get(ctx context.Context, in *Applier, out *ApplierResponse) error
		Search(ctx context.Context, in *ApplierRequest, out *ApplierResponse) error
	}
	type LeaderApplierService struct {
		leaderApplierService
	}
	h := &leaderApplierServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&LeaderApplierService{h}, opts...))
}

type leaderApplierServiceHandler struct {
	LeaderApplierServiceHandler
}

func (h *leaderApplierServiceHandler) Check(ctx context.Context, in *Applier, out *ApplierResponse) error {
	return h.LeaderApplierServiceHandler.Check(ctx, in, out)
}

func (h *leaderApplierServiceHandler) Get(ctx context.Context, in *Applier, out *ApplierResponse) error {
	return h.LeaderApplierServiceHandler.Get(ctx, in, out)
}

func (h *leaderApplierServiceHandler) Search(ctx context.Context, in *ApplierRequest, out *ApplierResponse) error {
	return h.LeaderApplierServiceHandler.Search(ctx, in, out)
}
