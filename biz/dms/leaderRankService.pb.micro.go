// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: leaderRankService.proto

package services

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for LeaderRankService service

func NewLeaderRankServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for LeaderRankService service

type LeaderRankService interface {
	//创建团长等级
	Create(ctx context.Context, in *Rank, opts ...client.CallOption) (*RankResponse, error)
	//修改团长等级
	Update(ctx context.Context, in *Rank, opts ...client.CallOption) (*RankResponse, error)
	//删除团长等级
	Delete(ctx context.Context, in *Rank, opts ...client.CallOption) (*RankResponse, error)
	//获取团长等级
	Get(ctx context.Context, in *Rank, opts ...client.CallOption) (*RankResponse, error)
	//获取团长等级列表
	List(ctx context.Context, in *Rank, opts ...client.CallOption) (*RankResponse, error)
	//查询团长等级
	Search(ctx context.Context, in *RankWhere, opts ...client.CallOption) (*RankResponse, error)
}

type leaderRankService struct {
	c    client.Client
	name string
}

func NewLeaderRankService(name string, c client.Client) LeaderRankService {
	return &leaderRankService{
		c:    c,
		name: name,
	}
}

func (c *leaderRankService) Create(ctx context.Context, in *Rank, opts ...client.CallOption) (*RankResponse, error) {
	req := c.c.NewRequest(c.name, "LeaderRankService.Create", in)
	out := new(RankResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaderRankService) Update(ctx context.Context, in *Rank, opts ...client.CallOption) (*RankResponse, error) {
	req := c.c.NewRequest(c.name, "LeaderRankService.Update", in)
	out := new(RankResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaderRankService) Delete(ctx context.Context, in *Rank, opts ...client.CallOption) (*RankResponse, error) {
	req := c.c.NewRequest(c.name, "LeaderRankService.Delete", in)
	out := new(RankResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaderRankService) Get(ctx context.Context, in *Rank, opts ...client.CallOption) (*RankResponse, error) {
	req := c.c.NewRequest(c.name, "LeaderRankService.Get", in)
	out := new(RankResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaderRankService) List(ctx context.Context, in *Rank, opts ...client.CallOption) (*RankResponse, error) {
	req := c.c.NewRequest(c.name, "LeaderRankService.List", in)
	out := new(RankResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaderRankService) Search(ctx context.Context, in *RankWhere, opts ...client.CallOption) (*RankResponse, error) {
	req := c.c.NewRequest(c.name, "LeaderRankService.Search", in)
	out := new(RankResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LeaderRankService service

type LeaderRankServiceHandler interface {
	//创建团长等级
	Create(context.Context, *Rank, *RankResponse) error
	//修改团长等级
	Update(context.Context, *Rank, *RankResponse) error
	//删除团长等级
	Delete(context.Context, *Rank, *RankResponse) error
	//获取团长等级
	Get(context.Context, *Rank, *RankResponse) error
	//获取团长等级列表
	List(context.Context, *Rank, *RankResponse) error
	//查询团长等级
	Search(context.Context, *RankWhere, *RankResponse) error
}

func RegisterLeaderRankServiceHandler(s server.Server, hdlr LeaderRankServiceHandler, opts ...server.HandlerOption) error {
	type leaderRankService interface {
		Create(ctx context.Context, in *Rank, out *RankResponse) error
		Update(ctx context.Context, in *Rank, out *RankResponse) error
		Delete(ctx context.Context, in *Rank, out *RankResponse) error
		Get(ctx context.Context, in *Rank, out *RankResponse) error
		List(ctx context.Context, in *Rank, out *RankResponse) error
		Search(ctx context.Context, in *RankWhere, out *RankResponse) error
	}
	type LeaderRankService struct {
		leaderRankService
	}
	h := &leaderRankServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&LeaderRankService{h}, opts...))
}

type leaderRankServiceHandler struct {
	LeaderRankServiceHandler
}

func (h *leaderRankServiceHandler) Create(ctx context.Context, in *Rank, out *RankResponse) error {
	return h.LeaderRankServiceHandler.Create(ctx, in, out)
}

func (h *leaderRankServiceHandler) Update(ctx context.Context, in *Rank, out *RankResponse) error {
	return h.LeaderRankServiceHandler.Update(ctx, in, out)
}

func (h *leaderRankServiceHandler) Delete(ctx context.Context, in *Rank, out *RankResponse) error {
	return h.LeaderRankServiceHandler.Delete(ctx, in, out)
}

func (h *leaderRankServiceHandler) Get(ctx context.Context, in *Rank, out *RankResponse) error {
	return h.LeaderRankServiceHandler.Get(ctx, in, out)
}

func (h *leaderRankServiceHandler) List(ctx context.Context, in *Rank, out *RankResponse) error {
	return h.LeaderRankServiceHandler.List(ctx, in, out)
}

func (h *leaderRankServiceHandler) Search(ctx context.Context, in *RankWhere, out *RankResponse) error {
	return h.LeaderRankServiceHandler.Search(ctx, in, out)
}
