// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: leaderStatementService.proto

package services

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for MyLeaderStatementService service

func NewMyLeaderStatementServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for MyLeaderStatementService service

type MyLeaderStatementService interface {
	//获取分红收支明细
	Get(ctx context.Context, in *Statement, opts ...client.CallOption) (*StatementResponse, error)
	//查询分红收支明细
	Search(ctx context.Context, in *StatementWhere, opts ...client.CallOption) (*StatementResponse, error)
}

type myLeaderStatementService struct {
	c    client.Client
	name string
}

func NewMyLeaderStatementService(name string, c client.Client) MyLeaderStatementService {
	return &myLeaderStatementService{
		c:    c,
		name: name,
	}
}

func (c *myLeaderStatementService) Get(ctx context.Context, in *Statement, opts ...client.CallOption) (*StatementResponse, error) {
	req := c.c.NewRequest(c.name, "MyLeaderStatementService.Get", in)
	out := new(StatementResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myLeaderStatementService) Search(ctx context.Context, in *StatementWhere, opts ...client.CallOption) (*StatementResponse, error) {
	req := c.c.NewRequest(c.name, "MyLeaderStatementService.Search", in)
	out := new(StatementResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MyLeaderStatementService service

type MyLeaderStatementServiceHandler interface {
	//获取分红收支明细
	Get(context.Context, *Statement, *StatementResponse) error
	//查询分红收支明细
	Search(context.Context, *StatementWhere, *StatementResponse) error
}

func RegisterMyLeaderStatementServiceHandler(s server.Server, hdlr MyLeaderStatementServiceHandler, opts ...server.HandlerOption) error {
	type myLeaderStatementService interface {
		Get(ctx context.Context, in *Statement, out *StatementResponse) error
		Search(ctx context.Context, in *StatementWhere, out *StatementResponse) error
	}
	type MyLeaderStatementService struct {
		myLeaderStatementService
	}
	h := &myLeaderStatementServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&MyLeaderStatementService{h}, opts...))
}

type myLeaderStatementServiceHandler struct {
	MyLeaderStatementServiceHandler
}

func (h *myLeaderStatementServiceHandler) Get(ctx context.Context, in *Statement, out *StatementResponse) error {
	return h.MyLeaderStatementServiceHandler.Get(ctx, in, out)
}

func (h *myLeaderStatementServiceHandler) Search(ctx context.Context, in *StatementWhere, out *StatementResponse) error {
	return h.MyLeaderStatementServiceHandler.Search(ctx, in, out)
}

// Api Endpoints for LeaderStatementService service

func NewLeaderStatementServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for LeaderStatementService service

type LeaderStatementService interface {
	//获取分红收支明细
	Get(ctx context.Context, in *Statement, opts ...client.CallOption) (*StatementResponse, error)
	//查询分红收支明细
	Search(ctx context.Context, in *StatementWhere, opts ...client.CallOption) (*StatementResponse, error)
}

type leaderStatementService struct {
	c    client.Client
	name string
}

func NewLeaderStatementService(name string, c client.Client) LeaderStatementService {
	return &leaderStatementService{
		c:    c,
		name: name,
	}
}

func (c *leaderStatementService) Get(ctx context.Context, in *Statement, opts ...client.CallOption) (*StatementResponse, error) {
	req := c.c.NewRequest(c.name, "LeaderStatementService.Get", in)
	out := new(StatementResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaderStatementService) Search(ctx context.Context, in *StatementWhere, opts ...client.CallOption) (*StatementResponse, error) {
	req := c.c.NewRequest(c.name, "LeaderStatementService.Search", in)
	out := new(StatementResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LeaderStatementService service

type LeaderStatementServiceHandler interface {
	//获取分红收支明细
	Get(context.Context, *Statement, *StatementResponse) error
	//查询分红收支明细
	Search(context.Context, *StatementWhere, *StatementResponse) error
}

func RegisterLeaderStatementServiceHandler(s server.Server, hdlr LeaderStatementServiceHandler, opts ...server.HandlerOption) error {
	type leaderStatementService interface {
		Get(ctx context.Context, in *Statement, out *StatementResponse) error
		Search(ctx context.Context, in *StatementWhere, out *StatementResponse) error
	}
	type LeaderStatementService struct {
		leaderStatementService
	}
	h := &leaderStatementServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&LeaderStatementService{h}, opts...))
}

type leaderStatementServiceHandler struct {
	LeaderStatementServiceHandler
}

func (h *leaderStatementServiceHandler) Get(ctx context.Context, in *Statement, out *StatementResponse) error {
	return h.LeaderStatementServiceHandler.Get(ctx, in, out)
}

func (h *leaderStatementServiceHandler) Search(ctx context.Context, in *StatementWhere, out *StatementResponse) error {
	return h.LeaderStatementServiceHandler.Search(ctx, in, out)
}
