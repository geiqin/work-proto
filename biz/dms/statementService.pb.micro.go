// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: statementService.proto

package services

import (
	fmt "fmt"
	common "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for MyStatementService service

func NewMyStatementServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for MyStatementService service

type MyStatementService interface {
	//获取佣金收支明细
	Get(ctx context.Context, in *Statement, opts ...client.CallOption) (*StatementResponse, error)
	//查询佣金收支明细
	Search(ctx context.Context, in *StatementWhere, opts ...client.CallOption) (*StatementResponse, error)
}

type myStatementService struct {
	c    client.Client
	name string
}

func NewMyStatementService(name string, c client.Client) MyStatementService {
	return &myStatementService{
		c:    c,
		name: name,
	}
}

func (c *myStatementService) Get(ctx context.Context, in *Statement, opts ...client.CallOption) (*StatementResponse, error) {
	req := c.c.NewRequest(c.name, "MyStatementService.Get", in)
	out := new(StatementResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myStatementService) Search(ctx context.Context, in *StatementWhere, opts ...client.CallOption) (*StatementResponse, error) {
	req := c.c.NewRequest(c.name, "MyStatementService.Search", in)
	out := new(StatementResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MyStatementService service

type MyStatementServiceHandler interface {
	//获取佣金收支明细
	Get(context.Context, *Statement, *StatementResponse) error
	//查询佣金收支明细
	Search(context.Context, *StatementWhere, *StatementResponse) error
}

func RegisterMyStatementServiceHandler(s server.Server, hdlr MyStatementServiceHandler, opts ...server.HandlerOption) error {
	type myStatementService interface {
		Get(ctx context.Context, in *Statement, out *StatementResponse) error
		Search(ctx context.Context, in *StatementWhere, out *StatementResponse) error
	}
	type MyStatementService struct {
		myStatementService
	}
	h := &myStatementServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&MyStatementService{h}, opts...))
}

type myStatementServiceHandler struct {
	MyStatementServiceHandler
}

func (h *myStatementServiceHandler) Get(ctx context.Context, in *Statement, out *StatementResponse) error {
	return h.MyStatementServiceHandler.Get(ctx, in, out)
}

func (h *myStatementServiceHandler) Search(ctx context.Context, in *StatementWhere, out *StatementResponse) error {
	return h.MyStatementServiceHandler.Search(ctx, in, out)
}

// Api Endpoints for StatementService service

func NewStatementServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for StatementService service

type StatementService interface {
	//获取佣金收支明细
	Get(ctx context.Context, in *Statement, opts ...client.CallOption) (*StatementResponse, error)
	//查询佣金收支明细
	Search(ctx context.Context, in *StatementWhere, opts ...client.CallOption) (*StatementResponse, error)
	//整合数据（表结构发生改变：队长分红收支明细和佣金收支明细整合成一张表）版本升级时执行
	Upgrade(ctx context.Context, in *common.Empty, opts ...client.CallOption) (*StatementResponse, error)
}

type statementService struct {
	c    client.Client
	name string
}

func NewStatementService(name string, c client.Client) StatementService {
	return &statementService{
		c:    c,
		name: name,
	}
}

func (c *statementService) Get(ctx context.Context, in *Statement, opts ...client.CallOption) (*StatementResponse, error) {
	req := c.c.NewRequest(c.name, "StatementService.Get", in)
	out := new(StatementResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statementService) Search(ctx context.Context, in *StatementWhere, opts ...client.CallOption) (*StatementResponse, error) {
	req := c.c.NewRequest(c.name, "StatementService.Search", in)
	out := new(StatementResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statementService) Upgrade(ctx context.Context, in *common.Empty, opts ...client.CallOption) (*StatementResponse, error) {
	req := c.c.NewRequest(c.name, "StatementService.Upgrade", in)
	out := new(StatementResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for StatementService service

type StatementServiceHandler interface {
	//获取佣金收支明细
	Get(context.Context, *Statement, *StatementResponse) error
	//查询佣金收支明细
	Search(context.Context, *StatementWhere, *StatementResponse) error
	//整合数据（表结构发生改变：队长分红收支明细和佣金收支明细整合成一张表）版本升级时执行
	Upgrade(context.Context, *common.Empty, *StatementResponse) error
}

func RegisterStatementServiceHandler(s server.Server, hdlr StatementServiceHandler, opts ...server.HandlerOption) error {
	type statementService interface {
		Get(ctx context.Context, in *Statement, out *StatementResponse) error
		Search(ctx context.Context, in *StatementWhere, out *StatementResponse) error
		Upgrade(ctx context.Context, in *common.Empty, out *StatementResponse) error
	}
	type StatementService struct {
		statementService
	}
	h := &statementServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&StatementService{h}, opts...))
}

type statementServiceHandler struct {
	StatementServiceHandler
}

func (h *statementServiceHandler) Get(ctx context.Context, in *Statement, out *StatementResponse) error {
	return h.StatementServiceHandler.Get(ctx, in, out)
}

func (h *statementServiceHandler) Search(ctx context.Context, in *StatementWhere, out *StatementResponse) error {
	return h.StatementServiceHandler.Search(ctx, in, out)
}

func (h *statementServiceHandler) Upgrade(ctx context.Context, in *common.Empty, out *StatementResponse) error {
	return h.StatementServiceHandler.Upgrade(ctx, in, out)
}
