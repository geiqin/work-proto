// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: withdrawCfgService.proto

package services

import (
	fmt "fmt"
	common "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for WithdrawCfgService service

func NewWithdrawCfgServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for WithdrawCfgService service

type WithdrawCfgService interface {
	//获取提现配置信息
	Get(ctx context.Context, in *common.Empty, opts ...client.CallOption) (*WithdrawCfgResponse, error)
	//设置提现配置信息
	Set(ctx context.Context, in *WithdrawCfg, opts ...client.CallOption) (*WithdrawCfgResponse, error)
}

type withdrawCfgService struct {
	c    client.Client
	name string
}

func NewWithdrawCfgService(name string, c client.Client) WithdrawCfgService {
	return &withdrawCfgService{
		c:    c,
		name: name,
	}
}

func (c *withdrawCfgService) Get(ctx context.Context, in *common.Empty, opts ...client.CallOption) (*WithdrawCfgResponse, error) {
	req := c.c.NewRequest(c.name, "WithdrawCfgService.Get", in)
	out := new(WithdrawCfgResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *withdrawCfgService) Set(ctx context.Context, in *WithdrawCfg, opts ...client.CallOption) (*WithdrawCfgResponse, error) {
	req := c.c.NewRequest(c.name, "WithdrawCfgService.Set", in)
	out := new(WithdrawCfgResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for WithdrawCfgService service

type WithdrawCfgServiceHandler interface {
	//获取提现配置信息
	Get(context.Context, *common.Empty, *WithdrawCfgResponse) error
	//设置提现配置信息
	Set(context.Context, *WithdrawCfg, *WithdrawCfgResponse) error
}

func RegisterWithdrawCfgServiceHandler(s server.Server, hdlr WithdrawCfgServiceHandler, opts ...server.HandlerOption) error {
	type withdrawCfgService interface {
		Get(ctx context.Context, in *common.Empty, out *WithdrawCfgResponse) error
		Set(ctx context.Context, in *WithdrawCfg, out *WithdrawCfgResponse) error
	}
	type WithdrawCfgService struct {
		withdrawCfgService
	}
	h := &withdrawCfgServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&WithdrawCfgService{h}, opts...))
}

type withdrawCfgServiceHandler struct {
	WithdrawCfgServiceHandler
}

func (h *withdrawCfgServiceHandler) Get(ctx context.Context, in *common.Empty, out *WithdrawCfgResponse) error {
	return h.WithdrawCfgServiceHandler.Get(ctx, in, out)
}

func (h *withdrawCfgServiceHandler) Set(ctx context.Context, in *WithdrawCfg, out *WithdrawCfgResponse) error {
	return h.WithdrawCfgServiceHandler.Set(ctx, in, out)
}
