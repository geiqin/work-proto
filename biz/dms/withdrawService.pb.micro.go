// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: withdrawService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for MyWithdrawService service

func NewMyWithdrawServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for MyWithdrawService service

type MyWithdrawService interface {
	//申请佣金提现
	Apply(ctx context.Context, in *WithdrawApply, opts ...client.CallOption) (*WithdrawApplyResponse, error)
	//提交佣金提现申请
	Submit(ctx context.Context, in *Withdraw, opts ...client.CallOption) (*WithdrawResponse, error)
	//获取佣金提现信息
	Get(ctx context.Context, in *Withdraw, opts ...client.CallOption) (*WithdrawResponse, error)
	//查询我的提现记录
	Search(ctx context.Context, in *WithdrawWhere, opts ...client.CallOption) (*WithdrawResponse, error)
}

type myWithdrawService struct {
	c    client.Client
	name string
}

func NewMyWithdrawService(name string, c client.Client) MyWithdrawService {
	return &myWithdrawService{
		c:    c,
		name: name,
	}
}

func (c *myWithdrawService) Apply(ctx context.Context, in *WithdrawApply, opts ...client.CallOption) (*WithdrawApplyResponse, error) {
	req := c.c.NewRequest(c.name, "MyWithdrawService.Apply", in)
	out := new(WithdrawApplyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myWithdrawService) Submit(ctx context.Context, in *Withdraw, opts ...client.CallOption) (*WithdrawResponse, error) {
	req := c.c.NewRequest(c.name, "MyWithdrawService.Submit", in)
	out := new(WithdrawResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myWithdrawService) Get(ctx context.Context, in *Withdraw, opts ...client.CallOption) (*WithdrawResponse, error) {
	req := c.c.NewRequest(c.name, "MyWithdrawService.Get", in)
	out := new(WithdrawResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myWithdrawService) Search(ctx context.Context, in *WithdrawWhere, opts ...client.CallOption) (*WithdrawResponse, error) {
	req := c.c.NewRequest(c.name, "MyWithdrawService.Search", in)
	out := new(WithdrawResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MyWithdrawService service

type MyWithdrawServiceHandler interface {
	//申请佣金提现
	Apply(context.Context, *WithdrawApply, *WithdrawApplyResponse) error
	//提交佣金提现申请
	Submit(context.Context, *Withdraw, *WithdrawResponse) error
	//获取佣金提现信息
	Get(context.Context, *Withdraw, *WithdrawResponse) error
	//查询我的提现记录
	Search(context.Context, *WithdrawWhere, *WithdrawResponse) error
}

func RegisterMyWithdrawServiceHandler(s server.Server, hdlr MyWithdrawServiceHandler, opts ...server.HandlerOption) error {
	type myWithdrawService interface {
		Apply(ctx context.Context, in *WithdrawApply, out *WithdrawApplyResponse) error
		Submit(ctx context.Context, in *Withdraw, out *WithdrawResponse) error
		Get(ctx context.Context, in *Withdraw, out *WithdrawResponse) error
		Search(ctx context.Context, in *WithdrawWhere, out *WithdrawResponse) error
	}
	type MyWithdrawService struct {
		myWithdrawService
	}
	h := &myWithdrawServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&MyWithdrawService{h}, opts...))
}

type myWithdrawServiceHandler struct {
	MyWithdrawServiceHandler
}

func (h *myWithdrawServiceHandler) Apply(ctx context.Context, in *WithdrawApply, out *WithdrawApplyResponse) error {
	return h.MyWithdrawServiceHandler.Apply(ctx, in, out)
}

func (h *myWithdrawServiceHandler) Submit(ctx context.Context, in *Withdraw, out *WithdrawResponse) error {
	return h.MyWithdrawServiceHandler.Submit(ctx, in, out)
}

func (h *myWithdrawServiceHandler) Get(ctx context.Context, in *Withdraw, out *WithdrawResponse) error {
	return h.MyWithdrawServiceHandler.Get(ctx, in, out)
}

func (h *myWithdrawServiceHandler) Search(ctx context.Context, in *WithdrawWhere, out *WithdrawResponse) error {
	return h.MyWithdrawServiceHandler.Search(ctx, in, out)
}

// Api Endpoints for WithdrawService service

func NewWithdrawServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for WithdrawService service

type WithdrawService interface {
	//审核佣金提现
	Check(ctx context.Context, in *WithdrawWhere, opts ...client.CallOption) (*WithdrawResponse, error)
	//确认打款（自动打款）
	ConfirmAuto(ctx context.Context, in *WithdrawWhere, opts ...client.CallOption) (*WithdrawResponse, error)
	//确认打款（手动打款）
	ConfirmManual(ctx context.Context, in *WithdrawWhere, opts ...client.CallOption) (*WithdrawResponse, error)
	//获取佣金提现信息
	Get(ctx context.Context, in *Withdraw, opts ...client.CallOption) (*WithdrawResponse, error)
	//分页查询佣金提现记录
	Search(ctx context.Context, in *WithdrawWhere, opts ...client.CallOption) (*WithdrawResponse, error)
}

type withdrawService struct {
	c    client.Client
	name string
}

func NewWithdrawService(name string, c client.Client) WithdrawService {
	return &withdrawService{
		c:    c,
		name: name,
	}
}

func (c *withdrawService) Check(ctx context.Context, in *WithdrawWhere, opts ...client.CallOption) (*WithdrawResponse, error) {
	req := c.c.NewRequest(c.name, "WithdrawService.Check", in)
	out := new(WithdrawResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *withdrawService) ConfirmAuto(ctx context.Context, in *WithdrawWhere, opts ...client.CallOption) (*WithdrawResponse, error) {
	req := c.c.NewRequest(c.name, "WithdrawService.ConfirmAuto", in)
	out := new(WithdrawResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *withdrawService) ConfirmManual(ctx context.Context, in *WithdrawWhere, opts ...client.CallOption) (*WithdrawResponse, error) {
	req := c.c.NewRequest(c.name, "WithdrawService.ConfirmManual", in)
	out := new(WithdrawResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *withdrawService) Get(ctx context.Context, in *Withdraw, opts ...client.CallOption) (*WithdrawResponse, error) {
	req := c.c.NewRequest(c.name, "WithdrawService.Get", in)
	out := new(WithdrawResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *withdrawService) Search(ctx context.Context, in *WithdrawWhere, opts ...client.CallOption) (*WithdrawResponse, error) {
	req := c.c.NewRequest(c.name, "WithdrawService.Search", in)
	out := new(WithdrawResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for WithdrawService service

type WithdrawServiceHandler interface {
	//审核佣金提现
	Check(context.Context, *WithdrawWhere, *WithdrawResponse) error
	//确认打款（自动打款）
	ConfirmAuto(context.Context, *WithdrawWhere, *WithdrawResponse) error
	//确认打款（手动打款）
	ConfirmManual(context.Context, *WithdrawWhere, *WithdrawResponse) error
	//获取佣金提现信息
	Get(context.Context, *Withdraw, *WithdrawResponse) error
	//分页查询佣金提现记录
	Search(context.Context, *WithdrawWhere, *WithdrawResponse) error
}

func RegisterWithdrawServiceHandler(s server.Server, hdlr WithdrawServiceHandler, opts ...server.HandlerOption) error {
	type withdrawService interface {
		Check(ctx context.Context, in *WithdrawWhere, out *WithdrawResponse) error
		ConfirmAuto(ctx context.Context, in *WithdrawWhere, out *WithdrawResponse) error
		ConfirmManual(ctx context.Context, in *WithdrawWhere, out *WithdrawResponse) error
		Get(ctx context.Context, in *Withdraw, out *WithdrawResponse) error
		Search(ctx context.Context, in *WithdrawWhere, out *WithdrawResponse) error
	}
	type WithdrawService struct {
		withdrawService
	}
	h := &withdrawServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&WithdrawService{h}, opts...))
}

type withdrawServiceHandler struct {
	WithdrawServiceHandler
}

func (h *withdrawServiceHandler) Check(ctx context.Context, in *WithdrawWhere, out *WithdrawResponse) error {
	return h.WithdrawServiceHandler.Check(ctx, in, out)
}

func (h *withdrawServiceHandler) ConfirmAuto(ctx context.Context, in *WithdrawWhere, out *WithdrawResponse) error {
	return h.WithdrawServiceHandler.ConfirmAuto(ctx, in, out)
}

func (h *withdrawServiceHandler) ConfirmManual(ctx context.Context, in *WithdrawWhere, out *WithdrawResponse) error {
	return h.WithdrawServiceHandler.ConfirmManual(ctx, in, out)
}

func (h *withdrawServiceHandler) Get(ctx context.Context, in *Withdraw, out *WithdrawResponse) error {
	return h.WithdrawServiceHandler.Get(ctx, in, out)
}

func (h *withdrawServiceHandler) Search(ctx context.Context, in *WithdrawWhere, out *WithdrawResponse) error {
	return h.WithdrawServiceHandler.Search(ctx, in, out)
}
