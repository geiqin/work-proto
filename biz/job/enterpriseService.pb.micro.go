// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: enterpriseService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for EnterpriseService service

func NewEnterpriseServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for EnterpriseService service

type EnterpriseService interface {
	Create(ctx context.Context, in *Enterprise, opts ...client.CallOption) (*EnterpriseResponse, error)
	Update(ctx context.Context, in *Enterprise, opts ...client.CallOption) (*EnterpriseResponse, error)
	Delete(ctx context.Context, in *Enterprise, opts ...client.CallOption) (*EnterpriseResponse, error)
	Get(ctx context.Context, in *Enterprise, opts ...client.CallOption) (*EnterpriseResponse, error)
	Search(ctx context.Context, in *EnterpriseRequest, opts ...client.CallOption) (*EnterpriseResponse, error)
}

type enterpriseService struct {
	c    client.Client
	name string
}

func NewEnterpriseService(name string, c client.Client) EnterpriseService {
	return &enterpriseService{
		c:    c,
		name: name,
	}
}

func (c *enterpriseService) Create(ctx context.Context, in *Enterprise, opts ...client.CallOption) (*EnterpriseResponse, error) {
	req := c.c.NewRequest(c.name, "EnterpriseService.Create", in)
	out := new(EnterpriseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enterpriseService) Update(ctx context.Context, in *Enterprise, opts ...client.CallOption) (*EnterpriseResponse, error) {
	req := c.c.NewRequest(c.name, "EnterpriseService.Update", in)
	out := new(EnterpriseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enterpriseService) Delete(ctx context.Context, in *Enterprise, opts ...client.CallOption) (*EnterpriseResponse, error) {
	req := c.c.NewRequest(c.name, "EnterpriseService.Delete", in)
	out := new(EnterpriseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enterpriseService) Get(ctx context.Context, in *Enterprise, opts ...client.CallOption) (*EnterpriseResponse, error) {
	req := c.c.NewRequest(c.name, "EnterpriseService.Get", in)
	out := new(EnterpriseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enterpriseService) Search(ctx context.Context, in *EnterpriseRequest, opts ...client.CallOption) (*EnterpriseResponse, error) {
	req := c.c.NewRequest(c.name, "EnterpriseService.Search", in)
	out := new(EnterpriseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EnterpriseService service

type EnterpriseServiceHandler interface {
	Create(context.Context, *Enterprise, *EnterpriseResponse) error
	Update(context.Context, *Enterprise, *EnterpriseResponse) error
	Delete(context.Context, *Enterprise, *EnterpriseResponse) error
	Get(context.Context, *Enterprise, *EnterpriseResponse) error
	Search(context.Context, *EnterpriseRequest, *EnterpriseResponse) error
}

func RegisterEnterpriseServiceHandler(s server.Server, hdlr EnterpriseServiceHandler, opts ...server.HandlerOption) error {
	type enterpriseService interface {
		Create(ctx context.Context, in *Enterprise, out *EnterpriseResponse) error
		Update(ctx context.Context, in *Enterprise, out *EnterpriseResponse) error
		Delete(ctx context.Context, in *Enterprise, out *EnterpriseResponse) error
		Get(ctx context.Context, in *Enterprise, out *EnterpriseResponse) error
		Search(ctx context.Context, in *EnterpriseRequest, out *EnterpriseResponse) error
	}
	type EnterpriseService struct {
		enterpriseService
	}
	h := &enterpriseServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&EnterpriseService{h}, opts...))
}

type enterpriseServiceHandler struct {
	EnterpriseServiceHandler
}

func (h *enterpriseServiceHandler) Create(ctx context.Context, in *Enterprise, out *EnterpriseResponse) error {
	return h.EnterpriseServiceHandler.Create(ctx, in, out)
}

func (h *enterpriseServiceHandler) Update(ctx context.Context, in *Enterprise, out *EnterpriseResponse) error {
	return h.EnterpriseServiceHandler.Update(ctx, in, out)
}

func (h *enterpriseServiceHandler) Delete(ctx context.Context, in *Enterprise, out *EnterpriseResponse) error {
	return h.EnterpriseServiceHandler.Delete(ctx, in, out)
}

func (h *enterpriseServiceHandler) Get(ctx context.Context, in *Enterprise, out *EnterpriseResponse) error {
	return h.EnterpriseServiceHandler.Get(ctx, in, out)
}

func (h *enterpriseServiceHandler) Search(ctx context.Context, in *EnterpriseRequest, out *EnterpriseResponse) error {
	return h.EnterpriseServiceHandler.Search(ctx, in, out)
}
