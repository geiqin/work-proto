// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: inductionService.proto

package services

import (
	common "github.com/geiqin/micro-kit/protobuf/common"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for InductionService service

func NewInductionServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for InductionService service

type InductionService interface {
	Create(ctx context.Context, in *Induction, opts ...client.CallOption) (*InductionResponse, error)
	Update(ctx context.Context, in *Induction, opts ...client.CallOption) (*InductionResponse, error)
	//报名入职登记
	Entry(ctx context.Context, in *InductionRequest, opts ...client.CallOption) (*InductionResponse, error)
	//离职登记
	Quit(ctx context.Context, in *InductionRequest, opts ...client.CallOption) (*InductionResponse, error)
	//删除入职信息
	Delete(ctx context.Context, in *Induction, opts ...client.CallOption) (*InductionResponse, error)
	Get(ctx context.Context, in *Induction, opts ...client.CallOption) (*InductionResponse, error)
	Search(ctx context.Context, in *InductionRequest, opts ...client.CallOption) (*InductionResponse, error)
	GetByCustomerId(ctx context.Context, in *common.Empty, opts ...client.CallOption) (*InductionResponse, error)
}

type inductionService struct {
	c    client.Client
	name string
}

func NewInductionService(name string, c client.Client) InductionService {
	return &inductionService{
		c:    c,
		name: name,
	}
}

func (c *inductionService) Create(ctx context.Context, in *Induction, opts ...client.CallOption) (*InductionResponse, error) {
	req := c.c.NewRequest(c.name, "InductionService.Create", in)
	out := new(InductionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inductionService) Update(ctx context.Context, in *Induction, opts ...client.CallOption) (*InductionResponse, error) {
	req := c.c.NewRequest(c.name, "InductionService.Update", in)
	out := new(InductionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inductionService) Entry(ctx context.Context, in *InductionRequest, opts ...client.CallOption) (*InductionResponse, error) {
	req := c.c.NewRequest(c.name, "InductionService.Entry", in)
	out := new(InductionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inductionService) Quit(ctx context.Context, in *InductionRequest, opts ...client.CallOption) (*InductionResponse, error) {
	req := c.c.NewRequest(c.name, "InductionService.Quit", in)
	out := new(InductionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inductionService) Delete(ctx context.Context, in *Induction, opts ...client.CallOption) (*InductionResponse, error) {
	req := c.c.NewRequest(c.name, "InductionService.Delete", in)
	out := new(InductionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inductionService) Get(ctx context.Context, in *Induction, opts ...client.CallOption) (*InductionResponse, error) {
	req := c.c.NewRequest(c.name, "InductionService.Get", in)
	out := new(InductionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inductionService) Search(ctx context.Context, in *InductionRequest, opts ...client.CallOption) (*InductionResponse, error) {
	req := c.c.NewRequest(c.name, "InductionService.Search", in)
	out := new(InductionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inductionService) GetByCustomerId(ctx context.Context, in *common.Empty, opts ...client.CallOption) (*InductionResponse, error) {
	req := c.c.NewRequest(c.name, "InductionService.GetByCustomerId", in)
	out := new(InductionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for InductionService service

type InductionServiceHandler interface {
	Create(context.Context, *Induction, *InductionResponse) error
	Update(context.Context, *Induction, *InductionResponse) error
	//报名入职登记
	Entry(context.Context, *InductionRequest, *InductionResponse) error
	//离职登记
	Quit(context.Context, *InductionRequest, *InductionResponse) error
	//删除入职信息
	Delete(context.Context, *Induction, *InductionResponse) error
	Get(context.Context, *Induction, *InductionResponse) error
	Search(context.Context, *InductionRequest, *InductionResponse) error
	GetByCustomerId(context.Context, *common.Empty, *InductionResponse) error
}

func RegisterInductionServiceHandler(s server.Server, hdlr InductionServiceHandler, opts ...server.HandlerOption) error {
	type inductionService interface {
		Create(ctx context.Context, in *Induction, out *InductionResponse) error
		Update(ctx context.Context, in *Induction, out *InductionResponse) error
		Entry(ctx context.Context, in *InductionRequest, out *InductionResponse) error
		Quit(ctx context.Context, in *InductionRequest, out *InductionResponse) error
		Delete(ctx context.Context, in *Induction, out *InductionResponse) error
		Get(ctx context.Context, in *Induction, out *InductionResponse) error
		Search(ctx context.Context, in *InductionRequest, out *InductionResponse) error
		GetByCustomerId(ctx context.Context, in *common.Empty, out *InductionResponse) error
	}
	type InductionService struct {
		inductionService
	}
	h := &inductionServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&InductionService{h}, opts...))
}

type inductionServiceHandler struct {
	InductionServiceHandler
}

func (h *inductionServiceHandler) Create(ctx context.Context, in *Induction, out *InductionResponse) error {
	return h.InductionServiceHandler.Create(ctx, in, out)
}

func (h *inductionServiceHandler) Update(ctx context.Context, in *Induction, out *InductionResponse) error {
	return h.InductionServiceHandler.Update(ctx, in, out)
}

func (h *inductionServiceHandler) Entry(ctx context.Context, in *InductionRequest, out *InductionResponse) error {
	return h.InductionServiceHandler.Entry(ctx, in, out)
}

func (h *inductionServiceHandler) Quit(ctx context.Context, in *InductionRequest, out *InductionResponse) error {
	return h.InductionServiceHandler.Quit(ctx, in, out)
}

func (h *inductionServiceHandler) Delete(ctx context.Context, in *Induction, out *InductionResponse) error {
	return h.InductionServiceHandler.Delete(ctx, in, out)
}

func (h *inductionServiceHandler) Get(ctx context.Context, in *Induction, out *InductionResponse) error {
	return h.InductionServiceHandler.Get(ctx, in, out)
}

func (h *inductionServiceHandler) Search(ctx context.Context, in *InductionRequest, out *InductionResponse) error {
	return h.InductionServiceHandler.Search(ctx, in, out)
}

func (h *inductionServiceHandler) GetByCustomerId(ctx context.Context, in *common.Empty, out *InductionResponse) error {
	return h.InductionServiceHandler.GetByCustomerId(ctx, in, out)
}
