// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: positionService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for PositionService service

func NewPositionServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for PositionService service

type PositionService interface {
	Create(ctx context.Context, in *Position, opts ...client.CallOption) (*PositionResponse, error)
	Update(ctx context.Context, in *Position, opts ...client.CallOption) (*PositionResponse, error)
	Delete(ctx context.Context, in *Position, opts ...client.CallOption) (*PositionResponse, error)
	Get(ctx context.Context, in *Position, opts ...client.CallOption) (*PositionResponse, error)
	Search(ctx context.Context, in *PositionRequest, opts ...client.CallOption) (*PositionResponse, error)
}

type positionService struct {
	c    client.Client
	name string
}

func NewPositionService(name string, c client.Client) PositionService {
	return &positionService{
		c:    c,
		name: name,
	}
}

func (c *positionService) Create(ctx context.Context, in *Position, opts ...client.CallOption) (*PositionResponse, error) {
	req := c.c.NewRequest(c.name, "PositionService.Create", in)
	out := new(PositionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *positionService) Update(ctx context.Context, in *Position, opts ...client.CallOption) (*PositionResponse, error) {
	req := c.c.NewRequest(c.name, "PositionService.Update", in)
	out := new(PositionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *positionService) Delete(ctx context.Context, in *Position, opts ...client.CallOption) (*PositionResponse, error) {
	req := c.c.NewRequest(c.name, "PositionService.Delete", in)
	out := new(PositionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *positionService) Get(ctx context.Context, in *Position, opts ...client.CallOption) (*PositionResponse, error) {
	req := c.c.NewRequest(c.name, "PositionService.Get", in)
	out := new(PositionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *positionService) Search(ctx context.Context, in *PositionRequest, opts ...client.CallOption) (*PositionResponse, error) {
	req := c.c.NewRequest(c.name, "PositionService.Search", in)
	out := new(PositionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PositionService service

type PositionServiceHandler interface {
	Create(context.Context, *Position, *PositionResponse) error
	Update(context.Context, *Position, *PositionResponse) error
	Delete(context.Context, *Position, *PositionResponse) error
	Get(context.Context, *Position, *PositionResponse) error
	Search(context.Context, *PositionRequest, *PositionResponse) error
}

func RegisterPositionServiceHandler(s server.Server, hdlr PositionServiceHandler, opts ...server.HandlerOption) error {
	type positionService interface {
		Create(ctx context.Context, in *Position, out *PositionResponse) error
		Update(ctx context.Context, in *Position, out *PositionResponse) error
		Delete(ctx context.Context, in *Position, out *PositionResponse) error
		Get(ctx context.Context, in *Position, out *PositionResponse) error
		Search(ctx context.Context, in *PositionRequest, out *PositionResponse) error
	}
	type PositionService struct {
		positionService
	}
	h := &positionServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&PositionService{h}, opts...))
}

type positionServiceHandler struct {
	PositionServiceHandler
}

func (h *positionServiceHandler) Create(ctx context.Context, in *Position, out *PositionResponse) error {
	return h.PositionServiceHandler.Create(ctx, in, out)
}

func (h *positionServiceHandler) Update(ctx context.Context, in *Position, out *PositionResponse) error {
	return h.PositionServiceHandler.Update(ctx, in, out)
}

func (h *positionServiceHandler) Delete(ctx context.Context, in *Position, out *PositionResponse) error {
	return h.PositionServiceHandler.Delete(ctx, in, out)
}

func (h *positionServiceHandler) Get(ctx context.Context, in *Position, out *PositionResponse) error {
	return h.PositionServiceHandler.Get(ctx, in, out)
}

func (h *positionServiceHandler) Search(ctx context.Context, in *PositionRequest, out *PositionResponse) error {
	return h.PositionServiceHandler.Search(ctx, in, out)
}
