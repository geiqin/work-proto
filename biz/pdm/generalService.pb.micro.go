// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: generalService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for GeneralService service

func NewGeneralServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for GeneralService service

type GeneralService interface {
	//增加商品
	Create(ctx context.Context, in *Item, opts ...client.CallOption) (*ItemResponse, error)
	//修改商品
	Update(ctx context.Context, in *Item, opts ...client.CallOption) (*ItemResponse, error)
	//删除商品
	Delete(ctx context.Context, in *GeneralRequest, opts ...client.CallOption) (*ItemResponse, error)
	//获得商品信息
	Get(ctx context.Context, in *GeneralRequest, opts ...client.CallOption) (*ItemResponse, error)
	//商品详细信息（后台专用）
	Detail(ctx context.Context, in *GeneralRequest, opts ...client.CallOption) (*ItemResponse, error)
	//商品规格详情
	SkuDetail(ctx context.Context, in *GeneralRequest, opts ...client.CallOption) (*ItemResponse, error)
	//搜索商品（后台专用）
	Search(ctx context.Context, in *GeneralRequest, opts ...client.CallOption) (*ItemResponse, error)
	//商品显示详情（前端专用）
	Display(ctx context.Context, in *GeneralRequest, opts ...client.CallOption) (*ItemResponse, error)
	//搜索商品（前端专用）
	FrontSearch(ctx context.Context, in *GeneralRequest, opts ...client.CallOption) (*ItemResponse, error)
}

type generalService struct {
	c    client.Client
	name string
}

func NewGeneralService(name string, c client.Client) GeneralService {
	return &generalService{
		c:    c,
		name: name,
	}
}

func (c *generalService) Create(ctx context.Context, in *Item, opts ...client.CallOption) (*ItemResponse, error) {
	req := c.c.NewRequest(c.name, "GeneralService.Create", in)
	out := new(ItemResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generalService) Update(ctx context.Context, in *Item, opts ...client.CallOption) (*ItemResponse, error) {
	req := c.c.NewRequest(c.name, "GeneralService.Update", in)
	out := new(ItemResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generalService) Delete(ctx context.Context, in *GeneralRequest, opts ...client.CallOption) (*ItemResponse, error) {
	req := c.c.NewRequest(c.name, "GeneralService.Delete", in)
	out := new(ItemResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generalService) Get(ctx context.Context, in *GeneralRequest, opts ...client.CallOption) (*ItemResponse, error) {
	req := c.c.NewRequest(c.name, "GeneralService.Get", in)
	out := new(ItemResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generalService) Detail(ctx context.Context, in *GeneralRequest, opts ...client.CallOption) (*ItemResponse, error) {
	req := c.c.NewRequest(c.name, "GeneralService.Detail", in)
	out := new(ItemResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generalService) SkuDetail(ctx context.Context, in *GeneralRequest, opts ...client.CallOption) (*ItemResponse, error) {
	req := c.c.NewRequest(c.name, "GeneralService.SkuDetail", in)
	out := new(ItemResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generalService) Search(ctx context.Context, in *GeneralRequest, opts ...client.CallOption) (*ItemResponse, error) {
	req := c.c.NewRequest(c.name, "GeneralService.Search", in)
	out := new(ItemResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generalService) Display(ctx context.Context, in *GeneralRequest, opts ...client.CallOption) (*ItemResponse, error) {
	req := c.c.NewRequest(c.name, "GeneralService.Display", in)
	out := new(ItemResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generalService) FrontSearch(ctx context.Context, in *GeneralRequest, opts ...client.CallOption) (*ItemResponse, error) {
	req := c.c.NewRequest(c.name, "GeneralService.FrontSearch", in)
	out := new(ItemResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GeneralService service

type GeneralServiceHandler interface {
	//增加商品
	Create(context.Context, *Item, *ItemResponse) error
	//修改商品
	Update(context.Context, *Item, *ItemResponse) error
	//删除商品
	Delete(context.Context, *GeneralRequest, *ItemResponse) error
	//获得商品信息
	Get(context.Context, *GeneralRequest, *ItemResponse) error
	//商品详细信息（后台专用）
	Detail(context.Context, *GeneralRequest, *ItemResponse) error
	//商品规格详情
	SkuDetail(context.Context, *GeneralRequest, *ItemResponse) error
	//搜索商品（后台专用）
	Search(context.Context, *GeneralRequest, *ItemResponse) error
	//商品显示详情（前端专用）
	Display(context.Context, *GeneralRequest, *ItemResponse) error
	//搜索商品（前端专用）
	FrontSearch(context.Context, *GeneralRequest, *ItemResponse) error
}

func RegisterGeneralServiceHandler(s server.Server, hdlr GeneralServiceHandler, opts ...server.HandlerOption) error {
	type generalService interface {
		Create(ctx context.Context, in *Item, out *ItemResponse) error
		Update(ctx context.Context, in *Item, out *ItemResponse) error
		Delete(ctx context.Context, in *GeneralRequest, out *ItemResponse) error
		Get(ctx context.Context, in *GeneralRequest, out *ItemResponse) error
		Detail(ctx context.Context, in *GeneralRequest, out *ItemResponse) error
		SkuDetail(ctx context.Context, in *GeneralRequest, out *ItemResponse) error
		Search(ctx context.Context, in *GeneralRequest, out *ItemResponse) error
		Display(ctx context.Context, in *GeneralRequest, out *ItemResponse) error
		FrontSearch(ctx context.Context, in *GeneralRequest, out *ItemResponse) error
	}
	type GeneralService struct {
		generalService
	}
	h := &generalServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&GeneralService{h}, opts...))
}

type generalServiceHandler struct {
	GeneralServiceHandler
}

func (h *generalServiceHandler) Create(ctx context.Context, in *Item, out *ItemResponse) error {
	return h.GeneralServiceHandler.Create(ctx, in, out)
}

func (h *generalServiceHandler) Update(ctx context.Context, in *Item, out *ItemResponse) error {
	return h.GeneralServiceHandler.Update(ctx, in, out)
}

func (h *generalServiceHandler) Delete(ctx context.Context, in *GeneralRequest, out *ItemResponse) error {
	return h.GeneralServiceHandler.Delete(ctx, in, out)
}

func (h *generalServiceHandler) Get(ctx context.Context, in *GeneralRequest, out *ItemResponse) error {
	return h.GeneralServiceHandler.Get(ctx, in, out)
}

func (h *generalServiceHandler) Detail(ctx context.Context, in *GeneralRequest, out *ItemResponse) error {
	return h.GeneralServiceHandler.Detail(ctx, in, out)
}

func (h *generalServiceHandler) SkuDetail(ctx context.Context, in *GeneralRequest, out *ItemResponse) error {
	return h.GeneralServiceHandler.SkuDetail(ctx, in, out)
}

func (h *generalServiceHandler) Search(ctx context.Context, in *GeneralRequest, out *ItemResponse) error {
	return h.GeneralServiceHandler.Search(ctx, in, out)
}

func (h *generalServiceHandler) Display(ctx context.Context, in *GeneralRequest, out *ItemResponse) error {
	return h.GeneralServiceHandler.Display(ctx, in, out)
}

func (h *generalServiceHandler) FrontSearch(ctx context.Context, in *GeneralRequest, out *ItemResponse) error {
	return h.GeneralServiceHandler.FrontSearch(ctx, in, out)
}
