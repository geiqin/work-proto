// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: itemRelationService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ItemRelationService service

func NewItemRelationServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ItemRelationService service

type ItemRelationService interface {
	Add(ctx context.Context, in *ItemRelationRequest, opts ...client.CallOption) (*ItemRelationResponse, error)
	Remove(ctx context.Context, in *ItemRelationRequest, opts ...client.CallOption) (*ItemRelationResponse, error)
}

type itemRelationService struct {
	c    client.Client
	name string
}

func NewItemRelationService(name string, c client.Client) ItemRelationService {
	return &itemRelationService{
		c:    c,
		name: name,
	}
}

func (c *itemRelationService) Add(ctx context.Context, in *ItemRelationRequest, opts ...client.CallOption) (*ItemRelationResponse, error) {
	req := c.c.NewRequest(c.name, "ItemRelationService.Add", in)
	out := new(ItemRelationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemRelationService) Remove(ctx context.Context, in *ItemRelationRequest, opts ...client.CallOption) (*ItemRelationResponse, error) {
	req := c.c.NewRequest(c.name, "ItemRelationService.Remove", in)
	out := new(ItemRelationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ItemRelationService service

type ItemRelationServiceHandler interface {
	Add(context.Context, *ItemRelationRequest, *ItemRelationResponse) error
	Remove(context.Context, *ItemRelationRequest, *ItemRelationResponse) error
}

func RegisterItemRelationServiceHandler(s server.Server, hdlr ItemRelationServiceHandler, opts ...server.HandlerOption) error {
	type itemRelationService interface {
		Add(ctx context.Context, in *ItemRelationRequest, out *ItemRelationResponse) error
		Remove(ctx context.Context, in *ItemRelationRequest, out *ItemRelationResponse) error
	}
	type ItemRelationService struct {
		itemRelationService
	}
	h := &itemRelationServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ItemRelationService{h}, opts...))
}

type itemRelationServiceHandler struct {
	ItemRelationServiceHandler
}

func (h *itemRelationServiceHandler) Add(ctx context.Context, in *ItemRelationRequest, out *ItemRelationResponse) error {
	return h.ItemRelationServiceHandler.Add(ctx, in, out)
}

func (h *itemRelationServiceHandler) Remove(ctx context.Context, in *ItemRelationRequest, out *ItemRelationResponse) error {
	return h.ItemRelationServiceHandler.Remove(ctx, in, out)
}
