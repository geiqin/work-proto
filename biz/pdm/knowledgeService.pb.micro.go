// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: knowledgeService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for CourseService service

func NewCourseServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for CourseService service

type CourseService interface {
	Create(ctx context.Context, in *Item, opts ...client.CallOption) (*ItemResponse, error)
	Update(ctx context.Context, in *Item, opts ...client.CallOption) (*ItemResponse, error)
	Delete(ctx context.Context, in *Item, opts ...client.CallOption) (*ItemResponse, error)
	Get(ctx context.Context, in *Item, opts ...client.CallOption) (*ItemResponse, error)
	Display(ctx context.Context, in *Item, opts ...client.CallOption) (*ItemResponse, error)
	Search(ctx context.Context, in *KnowledgeRequest, opts ...client.CallOption) (*ItemResponse, error)
	FrontSearch(ctx context.Context, in *KnowledgeRequest, opts ...client.CallOption) (*ItemResponse, error)
}

type courseService struct {
	c    client.Client
	name string
}

func NewCourseService(name string, c client.Client) CourseService {
	return &courseService{
		c:    c,
		name: name,
	}
}

func (c *courseService) Create(ctx context.Context, in *Item, opts ...client.CallOption) (*ItemResponse, error) {
	req := c.c.NewRequest(c.name, "CourseService.Create", in)
	out := new(ItemResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseService) Update(ctx context.Context, in *Item, opts ...client.CallOption) (*ItemResponse, error) {
	req := c.c.NewRequest(c.name, "CourseService.Update", in)
	out := new(ItemResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseService) Delete(ctx context.Context, in *Item, opts ...client.CallOption) (*ItemResponse, error) {
	req := c.c.NewRequest(c.name, "CourseService.Delete", in)
	out := new(ItemResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseService) Get(ctx context.Context, in *Item, opts ...client.CallOption) (*ItemResponse, error) {
	req := c.c.NewRequest(c.name, "CourseService.Get", in)
	out := new(ItemResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseService) Display(ctx context.Context, in *Item, opts ...client.CallOption) (*ItemResponse, error) {
	req := c.c.NewRequest(c.name, "CourseService.Display", in)
	out := new(ItemResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseService) Search(ctx context.Context, in *KnowledgeRequest, opts ...client.CallOption) (*ItemResponse, error) {
	req := c.c.NewRequest(c.name, "CourseService.Search", in)
	out := new(ItemResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseService) FrontSearch(ctx context.Context, in *KnowledgeRequest, opts ...client.CallOption) (*ItemResponse, error) {
	req := c.c.NewRequest(c.name, "CourseService.FrontSearch", in)
	out := new(ItemResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CourseService service

type CourseServiceHandler interface {
	Create(context.Context, *Item, *ItemResponse) error
	Update(context.Context, *Item, *ItemResponse) error
	Delete(context.Context, *Item, *ItemResponse) error
	Get(context.Context, *Item, *ItemResponse) error
	Display(context.Context, *Item, *ItemResponse) error
	Search(context.Context, *KnowledgeRequest, *ItemResponse) error
	FrontSearch(context.Context, *KnowledgeRequest, *ItemResponse) error
}

func RegisterCourseServiceHandler(s server.Server, hdlr CourseServiceHandler, opts ...server.HandlerOption) error {
	type courseService interface {
		Create(ctx context.Context, in *Item, out *ItemResponse) error
		Update(ctx context.Context, in *Item, out *ItemResponse) error
		Delete(ctx context.Context, in *Item, out *ItemResponse) error
		Get(ctx context.Context, in *Item, out *ItemResponse) error
		Display(ctx context.Context, in *Item, out *ItemResponse) error
		Search(ctx context.Context, in *KnowledgeRequest, out *ItemResponse) error
		FrontSearch(ctx context.Context, in *KnowledgeRequest, out *ItemResponse) error
	}
	type CourseService struct {
		courseService
	}
	h := &courseServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&CourseService{h}, opts...))
}

type courseServiceHandler struct {
	CourseServiceHandler
}

func (h *courseServiceHandler) Create(ctx context.Context, in *Item, out *ItemResponse) error {
	return h.CourseServiceHandler.Create(ctx, in, out)
}

func (h *courseServiceHandler) Update(ctx context.Context, in *Item, out *ItemResponse) error {
	return h.CourseServiceHandler.Update(ctx, in, out)
}

func (h *courseServiceHandler) Delete(ctx context.Context, in *Item, out *ItemResponse) error {
	return h.CourseServiceHandler.Delete(ctx, in, out)
}

func (h *courseServiceHandler) Get(ctx context.Context, in *Item, out *ItemResponse) error {
	return h.CourseServiceHandler.Get(ctx, in, out)
}

func (h *courseServiceHandler) Display(ctx context.Context, in *Item, out *ItemResponse) error {
	return h.CourseServiceHandler.Display(ctx, in, out)
}

func (h *courseServiceHandler) Search(ctx context.Context, in *KnowledgeRequest, out *ItemResponse) error {
	return h.CourseServiceHandler.Search(ctx, in, out)
}

func (h *courseServiceHandler) FrontSearch(ctx context.Context, in *KnowledgeRequest, out *ItemResponse) error {
	return h.CourseServiceHandler.FrontSearch(ctx, in, out)
}

// Api Endpoints for ColumnService service

func NewColumnServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ColumnService service

type ColumnService interface {
	Create(ctx context.Context, in *Item, opts ...client.CallOption) (*ItemResponse, error)
	Update(ctx context.Context, in *Item, opts ...client.CallOption) (*ItemResponse, error)
	Delete(ctx context.Context, in *Item, opts ...client.CallOption) (*ItemResponse, error)
	AddList(ctx context.Context, in *KnowledgeRequest, opts ...client.CallOption) (*ItemResponse, error)
	RemoveList(ctx context.Context, in *KnowledgeRequest, opts ...client.CallOption) (*ItemResponse, error)
	Get(ctx context.Context, in *Item, opts ...client.CallOption) (*ItemResponse, error)
	Display(ctx context.Context, in *Item, opts ...client.CallOption) (*ItemResponse, error)
	Search(ctx context.Context, in *KnowledgeRequest, opts ...client.CallOption) (*ItemResponse, error)
	FrontSearch(ctx context.Context, in *KnowledgeRequest, opts ...client.CallOption) (*ItemResponse, error)
}

type columnService struct {
	c    client.Client
	name string
}

func NewColumnService(name string, c client.Client) ColumnService {
	return &columnService{
		c:    c,
		name: name,
	}
}

func (c *columnService) Create(ctx context.Context, in *Item, opts ...client.CallOption) (*ItemResponse, error) {
	req := c.c.NewRequest(c.name, "ColumnService.Create", in)
	out := new(ItemResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *columnService) Update(ctx context.Context, in *Item, opts ...client.CallOption) (*ItemResponse, error) {
	req := c.c.NewRequest(c.name, "ColumnService.Update", in)
	out := new(ItemResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *columnService) Delete(ctx context.Context, in *Item, opts ...client.CallOption) (*ItemResponse, error) {
	req := c.c.NewRequest(c.name, "ColumnService.Delete", in)
	out := new(ItemResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *columnService) AddList(ctx context.Context, in *KnowledgeRequest, opts ...client.CallOption) (*ItemResponse, error) {
	req := c.c.NewRequest(c.name, "ColumnService.AddList", in)
	out := new(ItemResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *columnService) RemoveList(ctx context.Context, in *KnowledgeRequest, opts ...client.CallOption) (*ItemResponse, error) {
	req := c.c.NewRequest(c.name, "ColumnService.RemoveList", in)
	out := new(ItemResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *columnService) Get(ctx context.Context, in *Item, opts ...client.CallOption) (*ItemResponse, error) {
	req := c.c.NewRequest(c.name, "ColumnService.Get", in)
	out := new(ItemResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *columnService) Display(ctx context.Context, in *Item, opts ...client.CallOption) (*ItemResponse, error) {
	req := c.c.NewRequest(c.name, "ColumnService.Display", in)
	out := new(ItemResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *columnService) Search(ctx context.Context, in *KnowledgeRequest, opts ...client.CallOption) (*ItemResponse, error) {
	req := c.c.NewRequest(c.name, "ColumnService.Search", in)
	out := new(ItemResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *columnService) FrontSearch(ctx context.Context, in *KnowledgeRequest, opts ...client.CallOption) (*ItemResponse, error) {
	req := c.c.NewRequest(c.name, "ColumnService.FrontSearch", in)
	out := new(ItemResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ColumnService service

type ColumnServiceHandler interface {
	Create(context.Context, *Item, *ItemResponse) error
	Update(context.Context, *Item, *ItemResponse) error
	Delete(context.Context, *Item, *ItemResponse) error
	AddList(context.Context, *KnowledgeRequest, *ItemResponse) error
	RemoveList(context.Context, *KnowledgeRequest, *ItemResponse) error
	Get(context.Context, *Item, *ItemResponse) error
	Display(context.Context, *Item, *ItemResponse) error
	Search(context.Context, *KnowledgeRequest, *ItemResponse) error
	FrontSearch(context.Context, *KnowledgeRequest, *ItemResponse) error
}

func RegisterColumnServiceHandler(s server.Server, hdlr ColumnServiceHandler, opts ...server.HandlerOption) error {
	type columnService interface {
		Create(ctx context.Context, in *Item, out *ItemResponse) error
		Update(ctx context.Context, in *Item, out *ItemResponse) error
		Delete(ctx context.Context, in *Item, out *ItemResponse) error
		AddList(ctx context.Context, in *KnowledgeRequest, out *ItemResponse) error
		RemoveList(ctx context.Context, in *KnowledgeRequest, out *ItemResponse) error
		Get(ctx context.Context, in *Item, out *ItemResponse) error
		Display(ctx context.Context, in *Item, out *ItemResponse) error
		Search(ctx context.Context, in *KnowledgeRequest, out *ItemResponse) error
		FrontSearch(ctx context.Context, in *KnowledgeRequest, out *ItemResponse) error
	}
	type ColumnService struct {
		columnService
	}
	h := &columnServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ColumnService{h}, opts...))
}

type columnServiceHandler struct {
	ColumnServiceHandler
}

func (h *columnServiceHandler) Create(ctx context.Context, in *Item, out *ItemResponse) error {
	return h.ColumnServiceHandler.Create(ctx, in, out)
}

func (h *columnServiceHandler) Update(ctx context.Context, in *Item, out *ItemResponse) error {
	return h.ColumnServiceHandler.Update(ctx, in, out)
}

func (h *columnServiceHandler) Delete(ctx context.Context, in *Item, out *ItemResponse) error {
	return h.ColumnServiceHandler.Delete(ctx, in, out)
}

func (h *columnServiceHandler) AddList(ctx context.Context, in *KnowledgeRequest, out *ItemResponse) error {
	return h.ColumnServiceHandler.AddList(ctx, in, out)
}

func (h *columnServiceHandler) RemoveList(ctx context.Context, in *KnowledgeRequest, out *ItemResponse) error {
	return h.ColumnServiceHandler.RemoveList(ctx, in, out)
}

func (h *columnServiceHandler) Get(ctx context.Context, in *Item, out *ItemResponse) error {
	return h.ColumnServiceHandler.Get(ctx, in, out)
}

func (h *columnServiceHandler) Display(ctx context.Context, in *Item, out *ItemResponse) error {
	return h.ColumnServiceHandler.Display(ctx, in, out)
}

func (h *columnServiceHandler) Search(ctx context.Context, in *KnowledgeRequest, out *ItemResponse) error {
	return h.ColumnServiceHandler.Search(ctx, in, out)
}

func (h *columnServiceHandler) FrontSearch(ctx context.Context, in *KnowledgeRequest, out *ItemResponse) error {
	return h.ColumnServiceHandler.FrontSearch(ctx, in, out)
}
