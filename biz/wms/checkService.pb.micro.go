// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: checkService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for CheckService service

func NewCheckServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for CheckService service

type CheckService interface {
	Create(ctx context.Context, in *Check, opts ...client.CallOption) (*CheckResponse, error)
	Update(ctx context.Context, in *Check, opts ...client.CallOption) (*CheckResponse, error)
	Delete(ctx context.Context, in *CheckWhere, opts ...client.CallOption) (*CheckResponse, error)
	Confirm(ctx context.Context, in *CheckWhere, opts ...client.CallOption) (*CheckResponse, error)
	Approve(ctx context.Context, in *CheckWhere, opts ...client.CallOption) (*CheckResponse, error)
	Get(ctx context.Context, in *Check, opts ...client.CallOption) (*CheckResponse, error)
	Search(ctx context.Context, in *CheckWhere, opts ...client.CallOption) (*CheckResponse, error)
	Details(ctx context.Context, in *CheckWhere, opts ...client.CallOption) (*CheckDetailResponse, error)
}

type checkService struct {
	c    client.Client
	name string
}

func NewCheckService(name string, c client.Client) CheckService {
	return &checkService{
		c:    c,
		name: name,
	}
}

func (c *checkService) Create(ctx context.Context, in *Check, opts ...client.CallOption) (*CheckResponse, error) {
	req := c.c.NewRequest(c.name, "CheckService.Create", in)
	out := new(CheckResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkService) Update(ctx context.Context, in *Check, opts ...client.CallOption) (*CheckResponse, error) {
	req := c.c.NewRequest(c.name, "CheckService.Update", in)
	out := new(CheckResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkService) Delete(ctx context.Context, in *CheckWhere, opts ...client.CallOption) (*CheckResponse, error) {
	req := c.c.NewRequest(c.name, "CheckService.Delete", in)
	out := new(CheckResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkService) Confirm(ctx context.Context, in *CheckWhere, opts ...client.CallOption) (*CheckResponse, error) {
	req := c.c.NewRequest(c.name, "CheckService.Confirm", in)
	out := new(CheckResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkService) Approve(ctx context.Context, in *CheckWhere, opts ...client.CallOption) (*CheckResponse, error) {
	req := c.c.NewRequest(c.name, "CheckService.Approve", in)
	out := new(CheckResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkService) Get(ctx context.Context, in *Check, opts ...client.CallOption) (*CheckResponse, error) {
	req := c.c.NewRequest(c.name, "CheckService.Get", in)
	out := new(CheckResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkService) Search(ctx context.Context, in *CheckWhere, opts ...client.CallOption) (*CheckResponse, error) {
	req := c.c.NewRequest(c.name, "CheckService.Search", in)
	out := new(CheckResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkService) Details(ctx context.Context, in *CheckWhere, opts ...client.CallOption) (*CheckDetailResponse, error) {
	req := c.c.NewRequest(c.name, "CheckService.Details", in)
	out := new(CheckDetailResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CheckService service

type CheckServiceHandler interface {
	Create(context.Context, *Check, *CheckResponse) error
	Update(context.Context, *Check, *CheckResponse) error
	Delete(context.Context, *CheckWhere, *CheckResponse) error
	Confirm(context.Context, *CheckWhere, *CheckResponse) error
	Approve(context.Context, *CheckWhere, *CheckResponse) error
	Get(context.Context, *Check, *CheckResponse) error
	Search(context.Context, *CheckWhere, *CheckResponse) error
	Details(context.Context, *CheckWhere, *CheckDetailResponse) error
}

func RegisterCheckServiceHandler(s server.Server, hdlr CheckServiceHandler, opts ...server.HandlerOption) error {
	type checkService interface {
		Create(ctx context.Context, in *Check, out *CheckResponse) error
		Update(ctx context.Context, in *Check, out *CheckResponse) error
		Delete(ctx context.Context, in *CheckWhere, out *CheckResponse) error
		Confirm(ctx context.Context, in *CheckWhere, out *CheckResponse) error
		Approve(ctx context.Context, in *CheckWhere, out *CheckResponse) error
		Get(ctx context.Context, in *Check, out *CheckResponse) error
		Search(ctx context.Context, in *CheckWhere, out *CheckResponse) error
		Details(ctx context.Context, in *CheckWhere, out *CheckDetailResponse) error
	}
	type CheckService struct {
		checkService
	}
	h := &checkServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&CheckService{h}, opts...))
}

type checkServiceHandler struct {
	CheckServiceHandler
}

func (h *checkServiceHandler) Create(ctx context.Context, in *Check, out *CheckResponse) error {
	return h.CheckServiceHandler.Create(ctx, in, out)
}

func (h *checkServiceHandler) Update(ctx context.Context, in *Check, out *CheckResponse) error {
	return h.CheckServiceHandler.Update(ctx, in, out)
}

func (h *checkServiceHandler) Delete(ctx context.Context, in *CheckWhere, out *CheckResponse) error {
	return h.CheckServiceHandler.Delete(ctx, in, out)
}

func (h *checkServiceHandler) Confirm(ctx context.Context, in *CheckWhere, out *CheckResponse) error {
	return h.CheckServiceHandler.Confirm(ctx, in, out)
}

func (h *checkServiceHandler) Approve(ctx context.Context, in *CheckWhere, out *CheckResponse) error {
	return h.CheckServiceHandler.Approve(ctx, in, out)
}

func (h *checkServiceHandler) Get(ctx context.Context, in *Check, out *CheckResponse) error {
	return h.CheckServiceHandler.Get(ctx, in, out)
}

func (h *checkServiceHandler) Search(ctx context.Context, in *CheckWhere, out *CheckResponse) error {
	return h.CheckServiceHandler.Search(ctx, in, out)
}

func (h *checkServiceHandler) Details(ctx context.Context, in *CheckWhere, out *CheckDetailResponse) error {
	return h.CheckServiceHandler.Details(ctx, in, out)
}
