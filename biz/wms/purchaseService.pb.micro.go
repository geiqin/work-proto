// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: purchaseService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for PurchaseInService service

func NewPurchaseInServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for PurchaseInService service

type PurchaseInService interface {
	Create(ctx context.Context, in *Purchase, opts ...client.CallOption) (*PurchaseResponse, error)
	Update(ctx context.Context, in *Purchase, opts ...client.CallOption) (*PurchaseResponse, error)
	Delete(ctx context.Context, in *PurchaseWhere, opts ...client.CallOption) (*PurchaseResponse, error)
	Confirm(ctx context.Context, in *PurchaseWhere, opts ...client.CallOption) (*PurchaseResponse, error)
	Approve(ctx context.Context, in *PurchaseWhere, opts ...client.CallOption) (*PurchaseResponse, error)
	Get(ctx context.Context, in *Purchase, opts ...client.CallOption) (*PurchaseResponse, error)
	Search(ctx context.Context, in *PurchaseWhere, opts ...client.CallOption) (*PurchaseResponse, error)
	Details(ctx context.Context, in *PurchaseWhere, opts ...client.CallOption) (*PurchaseDetailResponse, error)
}

type purchaseInService struct {
	c    client.Client
	name string
}

func NewPurchaseInService(name string, c client.Client) PurchaseInService {
	return &purchaseInService{
		c:    c,
		name: name,
	}
}

func (c *purchaseInService) Create(ctx context.Context, in *Purchase, opts ...client.CallOption) (*PurchaseResponse, error) {
	req := c.c.NewRequest(c.name, "PurchaseInService.Create", in)
	out := new(PurchaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchaseInService) Update(ctx context.Context, in *Purchase, opts ...client.CallOption) (*PurchaseResponse, error) {
	req := c.c.NewRequest(c.name, "PurchaseInService.Update", in)
	out := new(PurchaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchaseInService) Delete(ctx context.Context, in *PurchaseWhere, opts ...client.CallOption) (*PurchaseResponse, error) {
	req := c.c.NewRequest(c.name, "PurchaseInService.Delete", in)
	out := new(PurchaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchaseInService) Confirm(ctx context.Context, in *PurchaseWhere, opts ...client.CallOption) (*PurchaseResponse, error) {
	req := c.c.NewRequest(c.name, "PurchaseInService.Confirm", in)
	out := new(PurchaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchaseInService) Approve(ctx context.Context, in *PurchaseWhere, opts ...client.CallOption) (*PurchaseResponse, error) {
	req := c.c.NewRequest(c.name, "PurchaseInService.Approve", in)
	out := new(PurchaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchaseInService) Get(ctx context.Context, in *Purchase, opts ...client.CallOption) (*PurchaseResponse, error) {
	req := c.c.NewRequest(c.name, "PurchaseInService.Get", in)
	out := new(PurchaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchaseInService) Search(ctx context.Context, in *PurchaseWhere, opts ...client.CallOption) (*PurchaseResponse, error) {
	req := c.c.NewRequest(c.name, "PurchaseInService.Search", in)
	out := new(PurchaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchaseInService) Details(ctx context.Context, in *PurchaseWhere, opts ...client.CallOption) (*PurchaseDetailResponse, error) {
	req := c.c.NewRequest(c.name, "PurchaseInService.Details", in)
	out := new(PurchaseDetailResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PurchaseInService service

type PurchaseInServiceHandler interface {
	Create(context.Context, *Purchase, *PurchaseResponse) error
	Update(context.Context, *Purchase, *PurchaseResponse) error
	Delete(context.Context, *PurchaseWhere, *PurchaseResponse) error
	Confirm(context.Context, *PurchaseWhere, *PurchaseResponse) error
	Approve(context.Context, *PurchaseWhere, *PurchaseResponse) error
	Get(context.Context, *Purchase, *PurchaseResponse) error
	Search(context.Context, *PurchaseWhere, *PurchaseResponse) error
	Details(context.Context, *PurchaseWhere, *PurchaseDetailResponse) error
}

func RegisterPurchaseInServiceHandler(s server.Server, hdlr PurchaseInServiceHandler, opts ...server.HandlerOption) error {
	type purchaseInService interface {
		Create(ctx context.Context, in *Purchase, out *PurchaseResponse) error
		Update(ctx context.Context, in *Purchase, out *PurchaseResponse) error
		Delete(ctx context.Context, in *PurchaseWhere, out *PurchaseResponse) error
		Confirm(ctx context.Context, in *PurchaseWhere, out *PurchaseResponse) error
		Approve(ctx context.Context, in *PurchaseWhere, out *PurchaseResponse) error
		Get(ctx context.Context, in *Purchase, out *PurchaseResponse) error
		Search(ctx context.Context, in *PurchaseWhere, out *PurchaseResponse) error
		Details(ctx context.Context, in *PurchaseWhere, out *PurchaseDetailResponse) error
	}
	type PurchaseInService struct {
		purchaseInService
	}
	h := &purchaseInServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&PurchaseInService{h}, opts...))
}

type purchaseInServiceHandler struct {
	PurchaseInServiceHandler
}

func (h *purchaseInServiceHandler) Create(ctx context.Context, in *Purchase, out *PurchaseResponse) error {
	return h.PurchaseInServiceHandler.Create(ctx, in, out)
}

func (h *purchaseInServiceHandler) Update(ctx context.Context, in *Purchase, out *PurchaseResponse) error {
	return h.PurchaseInServiceHandler.Update(ctx, in, out)
}

func (h *purchaseInServiceHandler) Delete(ctx context.Context, in *PurchaseWhere, out *PurchaseResponse) error {
	return h.PurchaseInServiceHandler.Delete(ctx, in, out)
}

func (h *purchaseInServiceHandler) Confirm(ctx context.Context, in *PurchaseWhere, out *PurchaseResponse) error {
	return h.PurchaseInServiceHandler.Confirm(ctx, in, out)
}

func (h *purchaseInServiceHandler) Approve(ctx context.Context, in *PurchaseWhere, out *PurchaseResponse) error {
	return h.PurchaseInServiceHandler.Approve(ctx, in, out)
}

func (h *purchaseInServiceHandler) Get(ctx context.Context, in *Purchase, out *PurchaseResponse) error {
	return h.PurchaseInServiceHandler.Get(ctx, in, out)
}

func (h *purchaseInServiceHandler) Search(ctx context.Context, in *PurchaseWhere, out *PurchaseResponse) error {
	return h.PurchaseInServiceHandler.Search(ctx, in, out)
}

func (h *purchaseInServiceHandler) Details(ctx context.Context, in *PurchaseWhere, out *PurchaseDetailResponse) error {
	return h.PurchaseInServiceHandler.Details(ctx, in, out)
}

// Api Endpoints for PurchaseOutService service

func NewPurchaseOutServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for PurchaseOutService service

type PurchaseOutService interface {
	Create(ctx context.Context, in *Purchase, opts ...client.CallOption) (*PurchaseResponse, error)
	Update(ctx context.Context, in *Purchase, opts ...client.CallOption) (*PurchaseResponse, error)
	Delete(ctx context.Context, in *PurchaseWhere, opts ...client.CallOption) (*PurchaseResponse, error)
	Confirm(ctx context.Context, in *PurchaseWhere, opts ...client.CallOption) (*PurchaseResponse, error)
	Approve(ctx context.Context, in *PurchaseWhere, opts ...client.CallOption) (*PurchaseResponse, error)
	Get(ctx context.Context, in *Purchase, opts ...client.CallOption) (*PurchaseResponse, error)
	Search(ctx context.Context, in *PurchaseWhere, opts ...client.CallOption) (*PurchaseResponse, error)
	Details(ctx context.Context, in *PurchaseWhere, opts ...client.CallOption) (*PurchaseDetailResponse, error)
}

type purchaseOutService struct {
	c    client.Client
	name string
}

func NewPurchaseOutService(name string, c client.Client) PurchaseOutService {
	return &purchaseOutService{
		c:    c,
		name: name,
	}
}

func (c *purchaseOutService) Create(ctx context.Context, in *Purchase, opts ...client.CallOption) (*PurchaseResponse, error) {
	req := c.c.NewRequest(c.name, "PurchaseOutService.Create", in)
	out := new(PurchaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchaseOutService) Update(ctx context.Context, in *Purchase, opts ...client.CallOption) (*PurchaseResponse, error) {
	req := c.c.NewRequest(c.name, "PurchaseOutService.Update", in)
	out := new(PurchaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchaseOutService) Delete(ctx context.Context, in *PurchaseWhere, opts ...client.CallOption) (*PurchaseResponse, error) {
	req := c.c.NewRequest(c.name, "PurchaseOutService.Delete", in)
	out := new(PurchaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchaseOutService) Confirm(ctx context.Context, in *PurchaseWhere, opts ...client.CallOption) (*PurchaseResponse, error) {
	req := c.c.NewRequest(c.name, "PurchaseOutService.Confirm", in)
	out := new(PurchaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchaseOutService) Approve(ctx context.Context, in *PurchaseWhere, opts ...client.CallOption) (*PurchaseResponse, error) {
	req := c.c.NewRequest(c.name, "PurchaseOutService.Approve", in)
	out := new(PurchaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchaseOutService) Get(ctx context.Context, in *Purchase, opts ...client.CallOption) (*PurchaseResponse, error) {
	req := c.c.NewRequest(c.name, "PurchaseOutService.Get", in)
	out := new(PurchaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchaseOutService) Search(ctx context.Context, in *PurchaseWhere, opts ...client.CallOption) (*PurchaseResponse, error) {
	req := c.c.NewRequest(c.name, "PurchaseOutService.Search", in)
	out := new(PurchaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchaseOutService) Details(ctx context.Context, in *PurchaseWhere, opts ...client.CallOption) (*PurchaseDetailResponse, error) {
	req := c.c.NewRequest(c.name, "PurchaseOutService.Details", in)
	out := new(PurchaseDetailResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PurchaseOutService service

type PurchaseOutServiceHandler interface {
	Create(context.Context, *Purchase, *PurchaseResponse) error
	Update(context.Context, *Purchase, *PurchaseResponse) error
	Delete(context.Context, *PurchaseWhere, *PurchaseResponse) error
	Confirm(context.Context, *PurchaseWhere, *PurchaseResponse) error
	Approve(context.Context, *PurchaseWhere, *PurchaseResponse) error
	Get(context.Context, *Purchase, *PurchaseResponse) error
	Search(context.Context, *PurchaseWhere, *PurchaseResponse) error
	Details(context.Context, *PurchaseWhere, *PurchaseDetailResponse) error
}

func RegisterPurchaseOutServiceHandler(s server.Server, hdlr PurchaseOutServiceHandler, opts ...server.HandlerOption) error {
	type purchaseOutService interface {
		Create(ctx context.Context, in *Purchase, out *PurchaseResponse) error
		Update(ctx context.Context, in *Purchase, out *PurchaseResponse) error
		Delete(ctx context.Context, in *PurchaseWhere, out *PurchaseResponse) error
		Confirm(ctx context.Context, in *PurchaseWhere, out *PurchaseResponse) error
		Approve(ctx context.Context, in *PurchaseWhere, out *PurchaseResponse) error
		Get(ctx context.Context, in *Purchase, out *PurchaseResponse) error
		Search(ctx context.Context, in *PurchaseWhere, out *PurchaseResponse) error
		Details(ctx context.Context, in *PurchaseWhere, out *PurchaseDetailResponse) error
	}
	type PurchaseOutService struct {
		purchaseOutService
	}
	h := &purchaseOutServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&PurchaseOutService{h}, opts...))
}

type purchaseOutServiceHandler struct {
	PurchaseOutServiceHandler
}

func (h *purchaseOutServiceHandler) Create(ctx context.Context, in *Purchase, out *PurchaseResponse) error {
	return h.PurchaseOutServiceHandler.Create(ctx, in, out)
}

func (h *purchaseOutServiceHandler) Update(ctx context.Context, in *Purchase, out *PurchaseResponse) error {
	return h.PurchaseOutServiceHandler.Update(ctx, in, out)
}

func (h *purchaseOutServiceHandler) Delete(ctx context.Context, in *PurchaseWhere, out *PurchaseResponse) error {
	return h.PurchaseOutServiceHandler.Delete(ctx, in, out)
}

func (h *purchaseOutServiceHandler) Confirm(ctx context.Context, in *PurchaseWhere, out *PurchaseResponse) error {
	return h.PurchaseOutServiceHandler.Confirm(ctx, in, out)
}

func (h *purchaseOutServiceHandler) Approve(ctx context.Context, in *PurchaseWhere, out *PurchaseResponse) error {
	return h.PurchaseOutServiceHandler.Approve(ctx, in, out)
}

func (h *purchaseOutServiceHandler) Get(ctx context.Context, in *Purchase, out *PurchaseResponse) error {
	return h.PurchaseOutServiceHandler.Get(ctx, in, out)
}

func (h *purchaseOutServiceHandler) Search(ctx context.Context, in *PurchaseWhere, out *PurchaseResponse) error {
	return h.PurchaseOutServiceHandler.Search(ctx, in, out)
}

func (h *purchaseOutServiceHandler) Details(ctx context.Context, in *PurchaseWhere, out *PurchaseDetailResponse) error {
	return h.PurchaseOutServiceHandler.Details(ctx, in, out)
}
