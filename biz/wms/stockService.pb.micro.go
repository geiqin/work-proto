// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: stockService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for StockInService service

func NewStockInServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for StockInService service

type StockInService interface {
	Create(ctx context.Context, in *Stock, opts ...client.CallOption) (*StockResponse, error)
	Update(ctx context.Context, in *Stock, opts ...client.CallOption) (*StockResponse, error)
	Delete(ctx context.Context, in *StockWhere, opts ...client.CallOption) (*StockResponse, error)
	Confirm(ctx context.Context, in *StockWhere, opts ...client.CallOption) (*StockResponse, error)
	Approve(ctx context.Context, in *StockWhere, opts ...client.CallOption) (*StockResponse, error)
	Get(ctx context.Context, in *Stock, opts ...client.CallOption) (*StockResponse, error)
	Search(ctx context.Context, in *StockWhere, opts ...client.CallOption) (*StockResponse, error)
	Details(ctx context.Context, in *StockWhere, opts ...client.CallOption) (*StockDetailResponse, error)
}

type stockInService struct {
	c    client.Client
	name string
}

func NewStockInService(name string, c client.Client) StockInService {
	return &stockInService{
		c:    c,
		name: name,
	}
}

func (c *stockInService) Create(ctx context.Context, in *Stock, opts ...client.CallOption) (*StockResponse, error) {
	req := c.c.NewRequest(c.name, "StockInService.Create", in)
	out := new(StockResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockInService) Update(ctx context.Context, in *Stock, opts ...client.CallOption) (*StockResponse, error) {
	req := c.c.NewRequest(c.name, "StockInService.Update", in)
	out := new(StockResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockInService) Delete(ctx context.Context, in *StockWhere, opts ...client.CallOption) (*StockResponse, error) {
	req := c.c.NewRequest(c.name, "StockInService.Delete", in)
	out := new(StockResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockInService) Confirm(ctx context.Context, in *StockWhere, opts ...client.CallOption) (*StockResponse, error) {
	req := c.c.NewRequest(c.name, "StockInService.Confirm", in)
	out := new(StockResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockInService) Approve(ctx context.Context, in *StockWhere, opts ...client.CallOption) (*StockResponse, error) {
	req := c.c.NewRequest(c.name, "StockInService.Approve", in)
	out := new(StockResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockInService) Get(ctx context.Context, in *Stock, opts ...client.CallOption) (*StockResponse, error) {
	req := c.c.NewRequest(c.name, "StockInService.Get", in)
	out := new(StockResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockInService) Search(ctx context.Context, in *StockWhere, opts ...client.CallOption) (*StockResponse, error) {
	req := c.c.NewRequest(c.name, "StockInService.Search", in)
	out := new(StockResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockInService) Details(ctx context.Context, in *StockWhere, opts ...client.CallOption) (*StockDetailResponse, error) {
	req := c.c.NewRequest(c.name, "StockInService.Details", in)
	out := new(StockDetailResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for StockInService service

type StockInServiceHandler interface {
	Create(context.Context, *Stock, *StockResponse) error
	Update(context.Context, *Stock, *StockResponse) error
	Delete(context.Context, *StockWhere, *StockResponse) error
	Confirm(context.Context, *StockWhere, *StockResponse) error
	Approve(context.Context, *StockWhere, *StockResponse) error
	Get(context.Context, *Stock, *StockResponse) error
	Search(context.Context, *StockWhere, *StockResponse) error
	Details(context.Context, *StockWhere, *StockDetailResponse) error
}

func RegisterStockInServiceHandler(s server.Server, hdlr StockInServiceHandler, opts ...server.HandlerOption) error {
	type stockInService interface {
		Create(ctx context.Context, in *Stock, out *StockResponse) error
		Update(ctx context.Context, in *Stock, out *StockResponse) error
		Delete(ctx context.Context, in *StockWhere, out *StockResponse) error
		Confirm(ctx context.Context, in *StockWhere, out *StockResponse) error
		Approve(ctx context.Context, in *StockWhere, out *StockResponse) error
		Get(ctx context.Context, in *Stock, out *StockResponse) error
		Search(ctx context.Context, in *StockWhere, out *StockResponse) error
		Details(ctx context.Context, in *StockWhere, out *StockDetailResponse) error
	}
	type StockInService struct {
		stockInService
	}
	h := &stockInServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&StockInService{h}, opts...))
}

type stockInServiceHandler struct {
	StockInServiceHandler
}

func (h *stockInServiceHandler) Create(ctx context.Context, in *Stock, out *StockResponse) error {
	return h.StockInServiceHandler.Create(ctx, in, out)
}

func (h *stockInServiceHandler) Update(ctx context.Context, in *Stock, out *StockResponse) error {
	return h.StockInServiceHandler.Update(ctx, in, out)
}

func (h *stockInServiceHandler) Delete(ctx context.Context, in *StockWhere, out *StockResponse) error {
	return h.StockInServiceHandler.Delete(ctx, in, out)
}

func (h *stockInServiceHandler) Confirm(ctx context.Context, in *StockWhere, out *StockResponse) error {
	return h.StockInServiceHandler.Confirm(ctx, in, out)
}

func (h *stockInServiceHandler) Approve(ctx context.Context, in *StockWhere, out *StockResponse) error {
	return h.StockInServiceHandler.Approve(ctx, in, out)
}

func (h *stockInServiceHandler) Get(ctx context.Context, in *Stock, out *StockResponse) error {
	return h.StockInServiceHandler.Get(ctx, in, out)
}

func (h *stockInServiceHandler) Search(ctx context.Context, in *StockWhere, out *StockResponse) error {
	return h.StockInServiceHandler.Search(ctx, in, out)
}

func (h *stockInServiceHandler) Details(ctx context.Context, in *StockWhere, out *StockDetailResponse) error {
	return h.StockInServiceHandler.Details(ctx, in, out)
}

// Api Endpoints for StockOutService service

func NewStockOutServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for StockOutService service

type StockOutService interface {
	Create(ctx context.Context, in *Stock, opts ...client.CallOption) (*StockResponse, error)
	Update(ctx context.Context, in *Stock, opts ...client.CallOption) (*StockResponse, error)
	Delete(ctx context.Context, in *StockWhere, opts ...client.CallOption) (*StockResponse, error)
	Confirm(ctx context.Context, in *StockWhere, opts ...client.CallOption) (*StockResponse, error)
	Approve(ctx context.Context, in *StockWhere, opts ...client.CallOption) (*StockResponse, error)
	Get(ctx context.Context, in *Stock, opts ...client.CallOption) (*StockResponse, error)
	Search(ctx context.Context, in *StockWhere, opts ...client.CallOption) (*StockResponse, error)
	Details(ctx context.Context, in *StockWhere, opts ...client.CallOption) (*StockDetailResponse, error)
}

type stockOutService struct {
	c    client.Client
	name string
}

func NewStockOutService(name string, c client.Client) StockOutService {
	return &stockOutService{
		c:    c,
		name: name,
	}
}

func (c *stockOutService) Create(ctx context.Context, in *Stock, opts ...client.CallOption) (*StockResponse, error) {
	req := c.c.NewRequest(c.name, "StockOutService.Create", in)
	out := new(StockResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockOutService) Update(ctx context.Context, in *Stock, opts ...client.CallOption) (*StockResponse, error) {
	req := c.c.NewRequest(c.name, "StockOutService.Update", in)
	out := new(StockResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockOutService) Delete(ctx context.Context, in *StockWhere, opts ...client.CallOption) (*StockResponse, error) {
	req := c.c.NewRequest(c.name, "StockOutService.Delete", in)
	out := new(StockResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockOutService) Confirm(ctx context.Context, in *StockWhere, opts ...client.CallOption) (*StockResponse, error) {
	req := c.c.NewRequest(c.name, "StockOutService.Confirm", in)
	out := new(StockResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockOutService) Approve(ctx context.Context, in *StockWhere, opts ...client.CallOption) (*StockResponse, error) {
	req := c.c.NewRequest(c.name, "StockOutService.Approve", in)
	out := new(StockResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockOutService) Get(ctx context.Context, in *Stock, opts ...client.CallOption) (*StockResponse, error) {
	req := c.c.NewRequest(c.name, "StockOutService.Get", in)
	out := new(StockResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockOutService) Search(ctx context.Context, in *StockWhere, opts ...client.CallOption) (*StockResponse, error) {
	req := c.c.NewRequest(c.name, "StockOutService.Search", in)
	out := new(StockResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockOutService) Details(ctx context.Context, in *StockWhere, opts ...client.CallOption) (*StockDetailResponse, error) {
	req := c.c.NewRequest(c.name, "StockOutService.Details", in)
	out := new(StockDetailResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for StockOutService service

type StockOutServiceHandler interface {
	Create(context.Context, *Stock, *StockResponse) error
	Update(context.Context, *Stock, *StockResponse) error
	Delete(context.Context, *StockWhere, *StockResponse) error
	Confirm(context.Context, *StockWhere, *StockResponse) error
	Approve(context.Context, *StockWhere, *StockResponse) error
	Get(context.Context, *Stock, *StockResponse) error
	Search(context.Context, *StockWhere, *StockResponse) error
	Details(context.Context, *StockWhere, *StockDetailResponse) error
}

func RegisterStockOutServiceHandler(s server.Server, hdlr StockOutServiceHandler, opts ...server.HandlerOption) error {
	type stockOutService interface {
		Create(ctx context.Context, in *Stock, out *StockResponse) error
		Update(ctx context.Context, in *Stock, out *StockResponse) error
		Delete(ctx context.Context, in *StockWhere, out *StockResponse) error
		Confirm(ctx context.Context, in *StockWhere, out *StockResponse) error
		Approve(ctx context.Context, in *StockWhere, out *StockResponse) error
		Get(ctx context.Context, in *Stock, out *StockResponse) error
		Search(ctx context.Context, in *StockWhere, out *StockResponse) error
		Details(ctx context.Context, in *StockWhere, out *StockDetailResponse) error
	}
	type StockOutService struct {
		stockOutService
	}
	h := &stockOutServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&StockOutService{h}, opts...))
}

type stockOutServiceHandler struct {
	StockOutServiceHandler
}

func (h *stockOutServiceHandler) Create(ctx context.Context, in *Stock, out *StockResponse) error {
	return h.StockOutServiceHandler.Create(ctx, in, out)
}

func (h *stockOutServiceHandler) Update(ctx context.Context, in *Stock, out *StockResponse) error {
	return h.StockOutServiceHandler.Update(ctx, in, out)
}

func (h *stockOutServiceHandler) Delete(ctx context.Context, in *StockWhere, out *StockResponse) error {
	return h.StockOutServiceHandler.Delete(ctx, in, out)
}

func (h *stockOutServiceHandler) Confirm(ctx context.Context, in *StockWhere, out *StockResponse) error {
	return h.StockOutServiceHandler.Confirm(ctx, in, out)
}

func (h *stockOutServiceHandler) Approve(ctx context.Context, in *StockWhere, out *StockResponse) error {
	return h.StockOutServiceHandler.Approve(ctx, in, out)
}

func (h *stockOutServiceHandler) Get(ctx context.Context, in *Stock, out *StockResponse) error {
	return h.StockOutServiceHandler.Get(ctx, in, out)
}

func (h *stockOutServiceHandler) Search(ctx context.Context, in *StockWhere, out *StockResponse) error {
	return h.StockOutServiceHandler.Search(ctx, in, out)
}

func (h *stockOutServiceHandler) Details(ctx context.Context, in *StockWhere, out *StockDetailResponse) error {
	return h.StockOutServiceHandler.Details(ctx, in, out)
}
