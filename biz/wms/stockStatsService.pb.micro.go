// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: stockStatsService.proto

package services

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for StockInStatsDayService service

func NewStockInStatsDayServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for StockInStatsDayService service

type StockInStatsDayService interface {
	Search(ctx context.Context, in *StatsWhere, opts ...client.CallOption) (*StatsDayResponse, error)
	List(ctx context.Context, in *StatsWhere, opts ...client.CallOption) (*StatsDayResponse, error)
}

type stockInStatsDayService struct {
	c    client.Client
	name string
}

func NewStockInStatsDayService(name string, c client.Client) StockInStatsDayService {
	return &stockInStatsDayService{
		c:    c,
		name: name,
	}
}

func (c *stockInStatsDayService) Search(ctx context.Context, in *StatsWhere, opts ...client.CallOption) (*StatsDayResponse, error) {
	req := c.c.NewRequest(c.name, "StockInStatsDayService.Search", in)
	out := new(StatsDayResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockInStatsDayService) List(ctx context.Context, in *StatsWhere, opts ...client.CallOption) (*StatsDayResponse, error) {
	req := c.c.NewRequest(c.name, "StockInStatsDayService.List", in)
	out := new(StatsDayResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for StockInStatsDayService service

type StockInStatsDayServiceHandler interface {
	Search(context.Context, *StatsWhere, *StatsDayResponse) error
	List(context.Context, *StatsWhere, *StatsDayResponse) error
}

func RegisterStockInStatsDayServiceHandler(s server.Server, hdlr StockInStatsDayServiceHandler, opts ...server.HandlerOption) error {
	type stockInStatsDayService interface {
		Search(ctx context.Context, in *StatsWhere, out *StatsDayResponse) error
		List(ctx context.Context, in *StatsWhere, out *StatsDayResponse) error
	}
	type StockInStatsDayService struct {
		stockInStatsDayService
	}
	h := &stockInStatsDayServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&StockInStatsDayService{h}, opts...))
}

type stockInStatsDayServiceHandler struct {
	StockInStatsDayServiceHandler
}

func (h *stockInStatsDayServiceHandler) Search(ctx context.Context, in *StatsWhere, out *StatsDayResponse) error {
	return h.StockInStatsDayServiceHandler.Search(ctx, in, out)
}

func (h *stockInStatsDayServiceHandler) List(ctx context.Context, in *StatsWhere, out *StatsDayResponse) error {
	return h.StockInStatsDayServiceHandler.List(ctx, in, out)
}

// Api Endpoints for StockInStatsMonthService service

func NewStockInStatsMonthServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for StockInStatsMonthService service

type StockInStatsMonthService interface {
	Search(ctx context.Context, in *StatsWhere, opts ...client.CallOption) (*StatsMonthResponse, error)
	List(ctx context.Context, in *StatsWhere, opts ...client.CallOption) (*StatsMonthResponse, error)
}

type stockInStatsMonthService struct {
	c    client.Client
	name string
}

func NewStockInStatsMonthService(name string, c client.Client) StockInStatsMonthService {
	return &stockInStatsMonthService{
		c:    c,
		name: name,
	}
}

func (c *stockInStatsMonthService) Search(ctx context.Context, in *StatsWhere, opts ...client.CallOption) (*StatsMonthResponse, error) {
	req := c.c.NewRequest(c.name, "StockInStatsMonthService.Search", in)
	out := new(StatsMonthResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockInStatsMonthService) List(ctx context.Context, in *StatsWhere, opts ...client.CallOption) (*StatsMonthResponse, error) {
	req := c.c.NewRequest(c.name, "StockInStatsMonthService.List", in)
	out := new(StatsMonthResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for StockInStatsMonthService service

type StockInStatsMonthServiceHandler interface {
	Search(context.Context, *StatsWhere, *StatsMonthResponse) error
	List(context.Context, *StatsWhere, *StatsMonthResponse) error
}

func RegisterStockInStatsMonthServiceHandler(s server.Server, hdlr StockInStatsMonthServiceHandler, opts ...server.HandlerOption) error {
	type stockInStatsMonthService interface {
		Search(ctx context.Context, in *StatsWhere, out *StatsMonthResponse) error
		List(ctx context.Context, in *StatsWhere, out *StatsMonthResponse) error
	}
	type StockInStatsMonthService struct {
		stockInStatsMonthService
	}
	h := &stockInStatsMonthServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&StockInStatsMonthService{h}, opts...))
}

type stockInStatsMonthServiceHandler struct {
	StockInStatsMonthServiceHandler
}

func (h *stockInStatsMonthServiceHandler) Search(ctx context.Context, in *StatsWhere, out *StatsMonthResponse) error {
	return h.StockInStatsMonthServiceHandler.Search(ctx, in, out)
}

func (h *stockInStatsMonthServiceHandler) List(ctx context.Context, in *StatsWhere, out *StatsMonthResponse) error {
	return h.StockInStatsMonthServiceHandler.List(ctx, in, out)
}

// Api Endpoints for StockOutStatsDayService service

func NewStockOutStatsDayServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for StockOutStatsDayService service

type StockOutStatsDayService interface {
	Search(ctx context.Context, in *StatsWhere, opts ...client.CallOption) (*StatsDayResponse, error)
	List(ctx context.Context, in *StatsWhere, opts ...client.CallOption) (*StatsDayResponse, error)
}

type stockOutStatsDayService struct {
	c    client.Client
	name string
}

func NewStockOutStatsDayService(name string, c client.Client) StockOutStatsDayService {
	return &stockOutStatsDayService{
		c:    c,
		name: name,
	}
}

func (c *stockOutStatsDayService) Search(ctx context.Context, in *StatsWhere, opts ...client.CallOption) (*StatsDayResponse, error) {
	req := c.c.NewRequest(c.name, "StockOutStatsDayService.Search", in)
	out := new(StatsDayResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockOutStatsDayService) List(ctx context.Context, in *StatsWhere, opts ...client.CallOption) (*StatsDayResponse, error) {
	req := c.c.NewRequest(c.name, "StockOutStatsDayService.List", in)
	out := new(StatsDayResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for StockOutStatsDayService service

type StockOutStatsDayServiceHandler interface {
	Search(context.Context, *StatsWhere, *StatsDayResponse) error
	List(context.Context, *StatsWhere, *StatsDayResponse) error
}

func RegisterStockOutStatsDayServiceHandler(s server.Server, hdlr StockOutStatsDayServiceHandler, opts ...server.HandlerOption) error {
	type stockOutStatsDayService interface {
		Search(ctx context.Context, in *StatsWhere, out *StatsDayResponse) error
		List(ctx context.Context, in *StatsWhere, out *StatsDayResponse) error
	}
	type StockOutStatsDayService struct {
		stockOutStatsDayService
	}
	h := &stockOutStatsDayServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&StockOutStatsDayService{h}, opts...))
}

type stockOutStatsDayServiceHandler struct {
	StockOutStatsDayServiceHandler
}

func (h *stockOutStatsDayServiceHandler) Search(ctx context.Context, in *StatsWhere, out *StatsDayResponse) error {
	return h.StockOutStatsDayServiceHandler.Search(ctx, in, out)
}

func (h *stockOutStatsDayServiceHandler) List(ctx context.Context, in *StatsWhere, out *StatsDayResponse) error {
	return h.StockOutStatsDayServiceHandler.List(ctx, in, out)
}

// Api Endpoints for StockOutStatsMonthService service

func NewStockOutStatsMonthServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for StockOutStatsMonthService service

type StockOutStatsMonthService interface {
	Search(ctx context.Context, in *StatsWhere, opts ...client.CallOption) (*StatsMonthResponse, error)
	List(ctx context.Context, in *StatsWhere, opts ...client.CallOption) (*StatsMonthResponse, error)
}

type stockOutStatsMonthService struct {
	c    client.Client
	name string
}

func NewStockOutStatsMonthService(name string, c client.Client) StockOutStatsMonthService {
	return &stockOutStatsMonthService{
		c:    c,
		name: name,
	}
}

func (c *stockOutStatsMonthService) Search(ctx context.Context, in *StatsWhere, opts ...client.CallOption) (*StatsMonthResponse, error) {
	req := c.c.NewRequest(c.name, "StockOutStatsMonthService.Search", in)
	out := new(StatsMonthResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockOutStatsMonthService) List(ctx context.Context, in *StatsWhere, opts ...client.CallOption) (*StatsMonthResponse, error) {
	req := c.c.NewRequest(c.name, "StockOutStatsMonthService.List", in)
	out := new(StatsMonthResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for StockOutStatsMonthService service

type StockOutStatsMonthServiceHandler interface {
	Search(context.Context, *StatsWhere, *StatsMonthResponse) error
	List(context.Context, *StatsWhere, *StatsMonthResponse) error
}

func RegisterStockOutStatsMonthServiceHandler(s server.Server, hdlr StockOutStatsMonthServiceHandler, opts ...server.HandlerOption) error {
	type stockOutStatsMonthService interface {
		Search(ctx context.Context, in *StatsWhere, out *StatsMonthResponse) error
		List(ctx context.Context, in *StatsWhere, out *StatsMonthResponse) error
	}
	type StockOutStatsMonthService struct {
		stockOutStatsMonthService
	}
	h := &stockOutStatsMonthServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&StockOutStatsMonthService{h}, opts...))
}

type stockOutStatsMonthServiceHandler struct {
	StockOutStatsMonthServiceHandler
}

func (h *stockOutStatsMonthServiceHandler) Search(ctx context.Context, in *StatsWhere, out *StatsMonthResponse) error {
	return h.StockOutStatsMonthServiceHandler.Search(ctx, in, out)
}

func (h *stockOutStatsMonthServiceHandler) List(ctx context.Context, in *StatsWhere, out *StatsMonthResponse) error {
	return h.StockOutStatsMonthServiceHandler.List(ctx, in, out)
}
