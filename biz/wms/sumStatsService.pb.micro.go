// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: sumStatsService.proto

package services

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for SumInStatsDayService service

func NewSumInStatsDayServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for SumInStatsDayService service

type SumInStatsDayService interface {
	Search(ctx context.Context, in *StatsWhere, opts ...client.CallOption) (*SumStatsDayResponse, error)
	List(ctx context.Context, in *StatsWhere, opts ...client.CallOption) (*SumStatsDayResponse, error)
}

type sumInStatsDayService struct {
	c    client.Client
	name string
}

func NewSumInStatsDayService(name string, c client.Client) SumInStatsDayService {
	return &sumInStatsDayService{
		c:    c,
		name: name,
	}
}

func (c *sumInStatsDayService) Search(ctx context.Context, in *StatsWhere, opts ...client.CallOption) (*SumStatsDayResponse, error) {
	req := c.c.NewRequest(c.name, "SumInStatsDayService.Search", in)
	out := new(SumStatsDayResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sumInStatsDayService) List(ctx context.Context, in *StatsWhere, opts ...client.CallOption) (*SumStatsDayResponse, error) {
	req := c.c.NewRequest(c.name, "SumInStatsDayService.List", in)
	out := new(SumStatsDayResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SumInStatsDayService service

type SumInStatsDayServiceHandler interface {
	Search(context.Context, *StatsWhere, *SumStatsDayResponse) error
	List(context.Context, *StatsWhere, *SumStatsDayResponse) error
}

func RegisterSumInStatsDayServiceHandler(s server.Server, hdlr SumInStatsDayServiceHandler, opts ...server.HandlerOption) error {
	type sumInStatsDayService interface {
		Search(ctx context.Context, in *StatsWhere, out *SumStatsDayResponse) error
		List(ctx context.Context, in *StatsWhere, out *SumStatsDayResponse) error
	}
	type SumInStatsDayService struct {
		sumInStatsDayService
	}
	h := &sumInStatsDayServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&SumInStatsDayService{h}, opts...))
}

type sumInStatsDayServiceHandler struct {
	SumInStatsDayServiceHandler
}

func (h *sumInStatsDayServiceHandler) Search(ctx context.Context, in *StatsWhere, out *SumStatsDayResponse) error {
	return h.SumInStatsDayServiceHandler.Search(ctx, in, out)
}

func (h *sumInStatsDayServiceHandler) List(ctx context.Context, in *StatsWhere, out *SumStatsDayResponse) error {
	return h.SumInStatsDayServiceHandler.List(ctx, in, out)
}

// Api Endpoints for SumInStatsMonthService service

func NewSumInStatsMonthServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for SumInStatsMonthService service

type SumInStatsMonthService interface {
	Search(ctx context.Context, in *StatsWhere, opts ...client.CallOption) (*SumStatsMonthResponse, error)
	List(ctx context.Context, in *StatsWhere, opts ...client.CallOption) (*SumStatsMonthResponse, error)
}

type sumInStatsMonthService struct {
	c    client.Client
	name string
}

func NewSumInStatsMonthService(name string, c client.Client) SumInStatsMonthService {
	return &sumInStatsMonthService{
		c:    c,
		name: name,
	}
}

func (c *sumInStatsMonthService) Search(ctx context.Context, in *StatsWhere, opts ...client.CallOption) (*SumStatsMonthResponse, error) {
	req := c.c.NewRequest(c.name, "SumInStatsMonthService.Search", in)
	out := new(SumStatsMonthResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sumInStatsMonthService) List(ctx context.Context, in *StatsWhere, opts ...client.CallOption) (*SumStatsMonthResponse, error) {
	req := c.c.NewRequest(c.name, "SumInStatsMonthService.List", in)
	out := new(SumStatsMonthResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SumInStatsMonthService service

type SumInStatsMonthServiceHandler interface {
	Search(context.Context, *StatsWhere, *SumStatsMonthResponse) error
	List(context.Context, *StatsWhere, *SumStatsMonthResponse) error
}

func RegisterSumInStatsMonthServiceHandler(s server.Server, hdlr SumInStatsMonthServiceHandler, opts ...server.HandlerOption) error {
	type sumInStatsMonthService interface {
		Search(ctx context.Context, in *StatsWhere, out *SumStatsMonthResponse) error
		List(ctx context.Context, in *StatsWhere, out *SumStatsMonthResponse) error
	}
	type SumInStatsMonthService struct {
		sumInStatsMonthService
	}
	h := &sumInStatsMonthServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&SumInStatsMonthService{h}, opts...))
}

type sumInStatsMonthServiceHandler struct {
	SumInStatsMonthServiceHandler
}

func (h *sumInStatsMonthServiceHandler) Search(ctx context.Context, in *StatsWhere, out *SumStatsMonthResponse) error {
	return h.SumInStatsMonthServiceHandler.Search(ctx, in, out)
}

func (h *sumInStatsMonthServiceHandler) List(ctx context.Context, in *StatsWhere, out *SumStatsMonthResponse) error {
	return h.SumInStatsMonthServiceHandler.List(ctx, in, out)
}

// Api Endpoints for SumOutStatsDayService service

func NewSumOutStatsDayServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for SumOutStatsDayService service

type SumOutStatsDayService interface {
	Search(ctx context.Context, in *StatsWhere, opts ...client.CallOption) (*SumStatsDayResponse, error)
	List(ctx context.Context, in *StatsWhere, opts ...client.CallOption) (*SumStatsDayResponse, error)
}

type sumOutStatsDayService struct {
	c    client.Client
	name string
}

func NewSumOutStatsDayService(name string, c client.Client) SumOutStatsDayService {
	return &sumOutStatsDayService{
		c:    c,
		name: name,
	}
}

func (c *sumOutStatsDayService) Search(ctx context.Context, in *StatsWhere, opts ...client.CallOption) (*SumStatsDayResponse, error) {
	req := c.c.NewRequest(c.name, "SumOutStatsDayService.Search", in)
	out := new(SumStatsDayResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sumOutStatsDayService) List(ctx context.Context, in *StatsWhere, opts ...client.CallOption) (*SumStatsDayResponse, error) {
	req := c.c.NewRequest(c.name, "SumOutStatsDayService.List", in)
	out := new(SumStatsDayResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SumOutStatsDayService service

type SumOutStatsDayServiceHandler interface {
	Search(context.Context, *StatsWhere, *SumStatsDayResponse) error
	List(context.Context, *StatsWhere, *SumStatsDayResponse) error
}

func RegisterSumOutStatsDayServiceHandler(s server.Server, hdlr SumOutStatsDayServiceHandler, opts ...server.HandlerOption) error {
	type sumOutStatsDayService interface {
		Search(ctx context.Context, in *StatsWhere, out *SumStatsDayResponse) error
		List(ctx context.Context, in *StatsWhere, out *SumStatsDayResponse) error
	}
	type SumOutStatsDayService struct {
		sumOutStatsDayService
	}
	h := &sumOutStatsDayServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&SumOutStatsDayService{h}, opts...))
}

type sumOutStatsDayServiceHandler struct {
	SumOutStatsDayServiceHandler
}

func (h *sumOutStatsDayServiceHandler) Search(ctx context.Context, in *StatsWhere, out *SumStatsDayResponse) error {
	return h.SumOutStatsDayServiceHandler.Search(ctx, in, out)
}

func (h *sumOutStatsDayServiceHandler) List(ctx context.Context, in *StatsWhere, out *SumStatsDayResponse) error {
	return h.SumOutStatsDayServiceHandler.List(ctx, in, out)
}

// Api Endpoints for SumOutStatsMonthService service

func NewSumOutStatsMonthServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for SumOutStatsMonthService service

type SumOutStatsMonthService interface {
	Search(ctx context.Context, in *StatsWhere, opts ...client.CallOption) (*SumStatsMonthResponse, error)
	List(ctx context.Context, in *StatsWhere, opts ...client.CallOption) (*SumStatsMonthResponse, error)
}

type sumOutStatsMonthService struct {
	c    client.Client
	name string
}

func NewSumOutStatsMonthService(name string, c client.Client) SumOutStatsMonthService {
	return &sumOutStatsMonthService{
		c:    c,
		name: name,
	}
}

func (c *sumOutStatsMonthService) Search(ctx context.Context, in *StatsWhere, opts ...client.CallOption) (*SumStatsMonthResponse, error) {
	req := c.c.NewRequest(c.name, "SumOutStatsMonthService.Search", in)
	out := new(SumStatsMonthResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sumOutStatsMonthService) List(ctx context.Context, in *StatsWhere, opts ...client.CallOption) (*SumStatsMonthResponse, error) {
	req := c.c.NewRequest(c.name, "SumOutStatsMonthService.List", in)
	out := new(SumStatsMonthResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SumOutStatsMonthService service

type SumOutStatsMonthServiceHandler interface {
	Search(context.Context, *StatsWhere, *SumStatsMonthResponse) error
	List(context.Context, *StatsWhere, *SumStatsMonthResponse) error
}

func RegisterSumOutStatsMonthServiceHandler(s server.Server, hdlr SumOutStatsMonthServiceHandler, opts ...server.HandlerOption) error {
	type sumOutStatsMonthService interface {
		Search(ctx context.Context, in *StatsWhere, out *SumStatsMonthResponse) error
		List(ctx context.Context, in *StatsWhere, out *SumStatsMonthResponse) error
	}
	type SumOutStatsMonthService struct {
		sumOutStatsMonthService
	}
	h := &sumOutStatsMonthServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&SumOutStatsMonthService{h}, opts...))
}

type sumOutStatsMonthServiceHandler struct {
	SumOutStatsMonthServiceHandler
}

func (h *sumOutStatsMonthServiceHandler) Search(ctx context.Context, in *StatsWhere, out *SumStatsMonthResponse) error {
	return h.SumOutStatsMonthServiceHandler.Search(ctx, in, out)
}

func (h *sumOutStatsMonthServiceHandler) List(ctx context.Context, in *StatsWhere, out *SumStatsMonthResponse) error {
	return h.SumOutStatsMonthServiceHandler.List(ctx, in, out)
}
