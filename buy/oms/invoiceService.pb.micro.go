// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: invoiceService.proto

package services

import (
	fmt "fmt"
	common "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for InvoiceService service

func NewInvoiceServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for InvoiceService service

type InvoiceService interface {
	Create(ctx context.Context, in *Invoice, opts ...client.CallOption) (*InvoiceResponse, error)
	Update(ctx context.Context, in *Invoice, opts ...client.CallOption) (*InvoiceResponse, error)
	Delete(ctx context.Context, in *Invoice, opts ...client.CallOption) (*InvoiceResponse, error)
	Get(ctx context.Context, in *Invoice, opts ...client.CallOption) (*InvoiceResponse, error)
	Search(ctx context.Context, in *common.BaseWhere, opts ...client.CallOption) (*InvoiceResponse, error)
}

type invoiceService struct {
	c    client.Client
	name string
}

func NewInvoiceService(name string, c client.Client) InvoiceService {
	return &invoiceService{
		c:    c,
		name: name,
	}
}

func (c *invoiceService) Create(ctx context.Context, in *Invoice, opts ...client.CallOption) (*InvoiceResponse, error) {
	req := c.c.NewRequest(c.name, "InvoiceService.Create", in)
	out := new(InvoiceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceService) Update(ctx context.Context, in *Invoice, opts ...client.CallOption) (*InvoiceResponse, error) {
	req := c.c.NewRequest(c.name, "InvoiceService.Update", in)
	out := new(InvoiceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceService) Delete(ctx context.Context, in *Invoice, opts ...client.CallOption) (*InvoiceResponse, error) {
	req := c.c.NewRequest(c.name, "InvoiceService.Delete", in)
	out := new(InvoiceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceService) Get(ctx context.Context, in *Invoice, opts ...client.CallOption) (*InvoiceResponse, error) {
	req := c.c.NewRequest(c.name, "InvoiceService.Get", in)
	out := new(InvoiceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceService) Search(ctx context.Context, in *common.BaseWhere, opts ...client.CallOption) (*InvoiceResponse, error) {
	req := c.c.NewRequest(c.name, "InvoiceService.Search", in)
	out := new(InvoiceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for InvoiceService service

type InvoiceServiceHandler interface {
	Create(context.Context, *Invoice, *InvoiceResponse) error
	Update(context.Context, *Invoice, *InvoiceResponse) error
	Delete(context.Context, *Invoice, *InvoiceResponse) error
	Get(context.Context, *Invoice, *InvoiceResponse) error
	Search(context.Context, *common.BaseWhere, *InvoiceResponse) error
}

func RegisterInvoiceServiceHandler(s server.Server, hdlr InvoiceServiceHandler, opts ...server.HandlerOption) error {
	type invoiceService interface {
		Create(ctx context.Context, in *Invoice, out *InvoiceResponse) error
		Update(ctx context.Context, in *Invoice, out *InvoiceResponse) error
		Delete(ctx context.Context, in *Invoice, out *InvoiceResponse) error
		Get(ctx context.Context, in *Invoice, out *InvoiceResponse) error
		Search(ctx context.Context, in *common.BaseWhere, out *InvoiceResponse) error
	}
	type InvoiceService struct {
		invoiceService
	}
	h := &invoiceServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&InvoiceService{h}, opts...))
}

type invoiceServiceHandler struct {
	InvoiceServiceHandler
}

func (h *invoiceServiceHandler) Create(ctx context.Context, in *Invoice, out *InvoiceResponse) error {
	return h.InvoiceServiceHandler.Create(ctx, in, out)
}

func (h *invoiceServiceHandler) Update(ctx context.Context, in *Invoice, out *InvoiceResponse) error {
	return h.InvoiceServiceHandler.Update(ctx, in, out)
}

func (h *invoiceServiceHandler) Delete(ctx context.Context, in *Invoice, out *InvoiceResponse) error {
	return h.InvoiceServiceHandler.Delete(ctx, in, out)
}

func (h *invoiceServiceHandler) Get(ctx context.Context, in *Invoice, out *InvoiceResponse) error {
	return h.InvoiceServiceHandler.Get(ctx, in, out)
}

func (h *invoiceServiceHandler) Search(ctx context.Context, in *common.BaseWhere, out *InvoiceResponse) error {
	return h.InvoiceServiceHandler.Search(ctx, in, out)
}
