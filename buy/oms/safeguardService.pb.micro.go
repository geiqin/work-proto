// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: safeguardService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for MySafeguardService service

func NewMySafeguardServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for MySafeguardService service

type MySafeguardService interface {
	// 申请退款
	ApplyRefund(ctx context.Context, in *Safeguard, opts ...client.CallOption) (*SafeguardResponse, error)
	// 申请退货
	ApplyReturn(ctx context.Context, in *Safeguard, opts ...client.CallOption) (*SafeguardResponse, error)
	// 申请换货
	ApplyExchange(ctx context.Context, in *Safeguard, opts ...client.CallOption) (*SafeguardResponse, error)
	// 申请补发商品
	ApplyRepair(ctx context.Context, in *Safeguard, opts ...client.CallOption) (*SafeguardResponse, error)
	// 取消维权
	ApplyCancel(ctx context.Context, in *SafeguardWhere, opts ...client.CallOption) (*SafeguardResponse, error)
	// 获取维权类型
	GetType(ctx context.Context, in *SafeguardWhere, opts ...client.CallOption) (*SafeguardTypeResponse, error)
	// 确认维权类型
	ConfirmType(ctx context.Context, in *SafeguardWhere, opts ...client.CallOption) (*SafeguardTypeResponse, error)
	// 提交退货物流信息
	ExpressConfirm(ctx context.Context, in *Safeguard, opts ...client.CallOption) (*SafeguardResponse, error)
	// 获取维权信息（基本信息）
	Get(ctx context.Context, in *SafeguardWhere, opts ...client.CallOption) (*SafeguardResponse, error)
	// 获取维权信息
	Display(ctx context.Context, in *SafeguardWhere, opts ...client.CallOption) (*SafeguardResponse, error)
	// 退换/售后查询
	Search(ctx context.Context, in *SafeguardWhere, opts ...client.CallOption) (*SafeguardResponse, error)
}

type mySafeguardService struct {
	c    client.Client
	name string
}

func NewMySafeguardService(name string, c client.Client) MySafeguardService {
	return &mySafeguardService{
		c:    c,
		name: name,
	}
}

func (c *mySafeguardService) ApplyRefund(ctx context.Context, in *Safeguard, opts ...client.CallOption) (*SafeguardResponse, error) {
	req := c.c.NewRequest(c.name, "MySafeguardService.ApplyRefund", in)
	out := new(SafeguardResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySafeguardService) ApplyReturn(ctx context.Context, in *Safeguard, opts ...client.CallOption) (*SafeguardResponse, error) {
	req := c.c.NewRequest(c.name, "MySafeguardService.ApplyReturn", in)
	out := new(SafeguardResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySafeguardService) ApplyExchange(ctx context.Context, in *Safeguard, opts ...client.CallOption) (*SafeguardResponse, error) {
	req := c.c.NewRequest(c.name, "MySafeguardService.ApplyExchange", in)
	out := new(SafeguardResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySafeguardService) ApplyRepair(ctx context.Context, in *Safeguard, opts ...client.CallOption) (*SafeguardResponse, error) {
	req := c.c.NewRequest(c.name, "MySafeguardService.ApplyRepair", in)
	out := new(SafeguardResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySafeguardService) ApplyCancel(ctx context.Context, in *SafeguardWhere, opts ...client.CallOption) (*SafeguardResponse, error) {
	req := c.c.NewRequest(c.name, "MySafeguardService.ApplyCancel", in)
	out := new(SafeguardResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySafeguardService) GetType(ctx context.Context, in *SafeguardWhere, opts ...client.CallOption) (*SafeguardTypeResponse, error) {
	req := c.c.NewRequest(c.name, "MySafeguardService.GetType", in)
	out := new(SafeguardTypeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySafeguardService) ConfirmType(ctx context.Context, in *SafeguardWhere, opts ...client.CallOption) (*SafeguardTypeResponse, error) {
	req := c.c.NewRequest(c.name, "MySafeguardService.ConfirmType", in)
	out := new(SafeguardTypeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySafeguardService) ExpressConfirm(ctx context.Context, in *Safeguard, opts ...client.CallOption) (*SafeguardResponse, error) {
	req := c.c.NewRequest(c.name, "MySafeguardService.ExpressConfirm", in)
	out := new(SafeguardResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySafeguardService) Get(ctx context.Context, in *SafeguardWhere, opts ...client.CallOption) (*SafeguardResponse, error) {
	req := c.c.NewRequest(c.name, "MySafeguardService.Get", in)
	out := new(SafeguardResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySafeguardService) Display(ctx context.Context, in *SafeguardWhere, opts ...client.CallOption) (*SafeguardResponse, error) {
	req := c.c.NewRequest(c.name, "MySafeguardService.Display", in)
	out := new(SafeguardResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySafeguardService) Search(ctx context.Context, in *SafeguardWhere, opts ...client.CallOption) (*SafeguardResponse, error) {
	req := c.c.NewRequest(c.name, "MySafeguardService.Search", in)
	out := new(SafeguardResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MySafeguardService service

type MySafeguardServiceHandler interface {
	// 申请退款
	ApplyRefund(context.Context, *Safeguard, *SafeguardResponse) error
	// 申请退货
	ApplyReturn(context.Context, *Safeguard, *SafeguardResponse) error
	// 申请换货
	ApplyExchange(context.Context, *Safeguard, *SafeguardResponse) error
	// 申请补发商品
	ApplyRepair(context.Context, *Safeguard, *SafeguardResponse) error
	// 取消维权
	ApplyCancel(context.Context, *SafeguardWhere, *SafeguardResponse) error
	// 获取维权类型
	GetType(context.Context, *SafeguardWhere, *SafeguardTypeResponse) error
	// 确认维权类型
	ConfirmType(context.Context, *SafeguardWhere, *SafeguardTypeResponse) error
	// 提交退货物流信息
	ExpressConfirm(context.Context, *Safeguard, *SafeguardResponse) error
	// 获取维权信息（基本信息）
	Get(context.Context, *SafeguardWhere, *SafeguardResponse) error
	// 获取维权信息
	Display(context.Context, *SafeguardWhere, *SafeguardResponse) error
	// 退换/售后查询
	Search(context.Context, *SafeguardWhere, *SafeguardResponse) error
}

func RegisterMySafeguardServiceHandler(s server.Server, hdlr MySafeguardServiceHandler, opts ...server.HandlerOption) error {
	type mySafeguardService interface {
		ApplyRefund(ctx context.Context, in *Safeguard, out *SafeguardResponse) error
		ApplyReturn(ctx context.Context, in *Safeguard, out *SafeguardResponse) error
		ApplyExchange(ctx context.Context, in *Safeguard, out *SafeguardResponse) error
		ApplyRepair(ctx context.Context, in *Safeguard, out *SafeguardResponse) error
		ApplyCancel(ctx context.Context, in *SafeguardWhere, out *SafeguardResponse) error
		GetType(ctx context.Context, in *SafeguardWhere, out *SafeguardTypeResponse) error
		ConfirmType(ctx context.Context, in *SafeguardWhere, out *SafeguardTypeResponse) error
		ExpressConfirm(ctx context.Context, in *Safeguard, out *SafeguardResponse) error
		Get(ctx context.Context, in *SafeguardWhere, out *SafeguardResponse) error
		Display(ctx context.Context, in *SafeguardWhere, out *SafeguardResponse) error
		Search(ctx context.Context, in *SafeguardWhere, out *SafeguardResponse) error
	}
	type MySafeguardService struct {
		mySafeguardService
	}
	h := &mySafeguardServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&MySafeguardService{h}, opts...))
}

type mySafeguardServiceHandler struct {
	MySafeguardServiceHandler
}

func (h *mySafeguardServiceHandler) ApplyRefund(ctx context.Context, in *Safeguard, out *SafeguardResponse) error {
	return h.MySafeguardServiceHandler.ApplyRefund(ctx, in, out)
}

func (h *mySafeguardServiceHandler) ApplyReturn(ctx context.Context, in *Safeguard, out *SafeguardResponse) error {
	return h.MySafeguardServiceHandler.ApplyReturn(ctx, in, out)
}

func (h *mySafeguardServiceHandler) ApplyExchange(ctx context.Context, in *Safeguard, out *SafeguardResponse) error {
	return h.MySafeguardServiceHandler.ApplyExchange(ctx, in, out)
}

func (h *mySafeguardServiceHandler) ApplyRepair(ctx context.Context, in *Safeguard, out *SafeguardResponse) error {
	return h.MySafeguardServiceHandler.ApplyRepair(ctx, in, out)
}

func (h *mySafeguardServiceHandler) ApplyCancel(ctx context.Context, in *SafeguardWhere, out *SafeguardResponse) error {
	return h.MySafeguardServiceHandler.ApplyCancel(ctx, in, out)
}

func (h *mySafeguardServiceHandler) GetType(ctx context.Context, in *SafeguardWhere, out *SafeguardTypeResponse) error {
	return h.MySafeguardServiceHandler.GetType(ctx, in, out)
}

func (h *mySafeguardServiceHandler) ConfirmType(ctx context.Context, in *SafeguardWhere, out *SafeguardTypeResponse) error {
	return h.MySafeguardServiceHandler.ConfirmType(ctx, in, out)
}

func (h *mySafeguardServiceHandler) ExpressConfirm(ctx context.Context, in *Safeguard, out *SafeguardResponse) error {
	return h.MySafeguardServiceHandler.ExpressConfirm(ctx, in, out)
}

func (h *mySafeguardServiceHandler) Get(ctx context.Context, in *SafeguardWhere, out *SafeguardResponse) error {
	return h.MySafeguardServiceHandler.Get(ctx, in, out)
}

func (h *mySafeguardServiceHandler) Display(ctx context.Context, in *SafeguardWhere, out *SafeguardResponse) error {
	return h.MySafeguardServiceHandler.Display(ctx, in, out)
}

func (h *mySafeguardServiceHandler) Search(ctx context.Context, in *SafeguardWhere, out *SafeguardResponse) error {
	return h.MySafeguardServiceHandler.Search(ctx, in, out)
}

// Api Endpoints for SafeguardService service

func NewSafeguardServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for SafeguardService service

type SafeguardService interface {
	//同意维权申请
	Agreed(ctx context.Context, in *Safeguard, opts ...client.CallOption) (*SafeguardResponse, error)
	//拒绝维权申请
	Refused(ctx context.Context, in *Safeguard, opts ...client.CallOption) (*SafeguardResponse, error)
	//维权订单退款
	Refund(ctx context.Context, in *Safeguard, opts ...client.CallOption) (*SafeguardResponse, error)
	// 获取维权信息（基本信息）
	Get(ctx context.Context, in *SafeguardWhere, opts ...client.CallOption) (*SafeguardResponse, error)
	// 获取维权信息
	Display(ctx context.Context, in *SafeguardWhere, opts ...client.CallOption) (*SafeguardResponse, error)
	//查询维权信息
	Search(ctx context.Context, in *SafeguardWhere, opts ...client.CallOption) (*SafeguardResponse, error)
}

type safeguardService struct {
	c    client.Client
	name string
}

func NewSafeguardService(name string, c client.Client) SafeguardService {
	return &safeguardService{
		c:    c,
		name: name,
	}
}

func (c *safeguardService) Agreed(ctx context.Context, in *Safeguard, opts ...client.CallOption) (*SafeguardResponse, error) {
	req := c.c.NewRequest(c.name, "SafeguardService.Agreed", in)
	out := new(SafeguardResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *safeguardService) Refused(ctx context.Context, in *Safeguard, opts ...client.CallOption) (*SafeguardResponse, error) {
	req := c.c.NewRequest(c.name, "SafeguardService.Refused", in)
	out := new(SafeguardResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *safeguardService) Refund(ctx context.Context, in *Safeguard, opts ...client.CallOption) (*SafeguardResponse, error) {
	req := c.c.NewRequest(c.name, "SafeguardService.Refund", in)
	out := new(SafeguardResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *safeguardService) Get(ctx context.Context, in *SafeguardWhere, opts ...client.CallOption) (*SafeguardResponse, error) {
	req := c.c.NewRequest(c.name, "SafeguardService.Get", in)
	out := new(SafeguardResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *safeguardService) Display(ctx context.Context, in *SafeguardWhere, opts ...client.CallOption) (*SafeguardResponse, error) {
	req := c.c.NewRequest(c.name, "SafeguardService.Display", in)
	out := new(SafeguardResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *safeguardService) Search(ctx context.Context, in *SafeguardWhere, opts ...client.CallOption) (*SafeguardResponse, error) {
	req := c.c.NewRequest(c.name, "SafeguardService.Search", in)
	out := new(SafeguardResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SafeguardService service

type SafeguardServiceHandler interface {
	//同意维权申请
	Agreed(context.Context, *Safeguard, *SafeguardResponse) error
	//拒绝维权申请
	Refused(context.Context, *Safeguard, *SafeguardResponse) error
	//维权订单退款
	Refund(context.Context, *Safeguard, *SafeguardResponse) error
	// 获取维权信息（基本信息）
	Get(context.Context, *SafeguardWhere, *SafeguardResponse) error
	// 获取维权信息
	Display(context.Context, *SafeguardWhere, *SafeguardResponse) error
	//查询维权信息
	Search(context.Context, *SafeguardWhere, *SafeguardResponse) error
}

func RegisterSafeguardServiceHandler(s server.Server, hdlr SafeguardServiceHandler, opts ...server.HandlerOption) error {
	type safeguardService interface {
		Agreed(ctx context.Context, in *Safeguard, out *SafeguardResponse) error
		Refused(ctx context.Context, in *Safeguard, out *SafeguardResponse) error
		Refund(ctx context.Context, in *Safeguard, out *SafeguardResponse) error
		Get(ctx context.Context, in *SafeguardWhere, out *SafeguardResponse) error
		Display(ctx context.Context, in *SafeguardWhere, out *SafeguardResponse) error
		Search(ctx context.Context, in *SafeguardWhere, out *SafeguardResponse) error
	}
	type SafeguardService struct {
		safeguardService
	}
	h := &safeguardServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&SafeguardService{h}, opts...))
}

type safeguardServiceHandler struct {
	SafeguardServiceHandler
}

func (h *safeguardServiceHandler) Agreed(ctx context.Context, in *Safeguard, out *SafeguardResponse) error {
	return h.SafeguardServiceHandler.Agreed(ctx, in, out)
}

func (h *safeguardServiceHandler) Refused(ctx context.Context, in *Safeguard, out *SafeguardResponse) error {
	return h.SafeguardServiceHandler.Refused(ctx, in, out)
}

func (h *safeguardServiceHandler) Refund(ctx context.Context, in *Safeguard, out *SafeguardResponse) error {
	return h.SafeguardServiceHandler.Refund(ctx, in, out)
}

func (h *safeguardServiceHandler) Get(ctx context.Context, in *SafeguardWhere, out *SafeguardResponse) error {
	return h.SafeguardServiceHandler.Get(ctx, in, out)
}

func (h *safeguardServiceHandler) Display(ctx context.Context, in *SafeguardWhere, out *SafeguardResponse) error {
	return h.SafeguardServiceHandler.Display(ctx, in, out)
}

func (h *safeguardServiceHandler) Search(ctx context.Context, in *SafeguardWhere, out *SafeguardResponse) error {
	return h.SafeguardServiceHandler.Search(ctx, in, out)
}
