// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: statisticsService.proto

package services

import (
	fmt "fmt"
	common "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for MyStatisticsService service

func NewMyStatisticsServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for MyStatisticsService service

type MyStatisticsService interface {
	//获取用户未处理订单数量
	Unhandled(ctx context.Context, in *StatsRequest, opts ...client.CallOption) (*CustomerOrderHandledStatsResponse, error)
}

type myStatisticsService struct {
	c    client.Client
	name string
}

func NewMyStatisticsService(name string, c client.Client) MyStatisticsService {
	return &myStatisticsService{
		c:    c,
		name: name,
	}
}

func (c *myStatisticsService) Unhandled(ctx context.Context, in *StatsRequest, opts ...client.CallOption) (*CustomerOrderHandledStatsResponse, error) {
	req := c.c.NewRequest(c.name, "MyStatisticsService.Unhandled", in)
	out := new(CustomerOrderHandledStatsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MyStatisticsService service

type MyStatisticsServiceHandler interface {
	//获取用户未处理订单数量
	Unhandled(context.Context, *StatsRequest, *CustomerOrderHandledStatsResponse) error
}

func RegisterMyStatisticsServiceHandler(s server.Server, hdlr MyStatisticsServiceHandler, opts ...server.HandlerOption) error {
	type myStatisticsService interface {
		Unhandled(ctx context.Context, in *StatsRequest, out *CustomerOrderHandledStatsResponse) error
	}
	type MyStatisticsService struct {
		myStatisticsService
	}
	h := &myStatisticsServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&MyStatisticsService{h}, opts...))
}

type myStatisticsServiceHandler struct {
	MyStatisticsServiceHandler
}

func (h *myStatisticsServiceHandler) Unhandled(ctx context.Context, in *StatsRequest, out *CustomerOrderHandledStatsResponse) error {
	return h.MyStatisticsServiceHandler.Unhandled(ctx, in, out)
}

// Api Endpoints for StatisticsService service

func NewStatisticsServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for StatisticsService service

type StatisticsService interface {
	//获取订单每日统计数据
	OrderDaily(ctx context.Context, in *StatsRequest, opts ...client.CallOption) (*OrderDayStatsResponse, error)
	//获取订单统计数据
	OrderTotal(ctx context.Context, in *StatsRequest, opts ...client.CallOption) (*OrderStatsResponse, error)
	//今日实时统计
	TodayTotal(ctx context.Context, in *StatsRequest, opts ...client.CallOption) (*OrderDayStatsResponse, error)
	//获取订单近30日客单统计明细数据
	OrderDays(ctx context.Context, in *StatsRequest, opts ...client.CallOption) (*OrderDayStatsResponse, error)
	//获取店铺未处理订单数量
	Unhandled(ctx context.Context, in *StatsRequest, opts ...client.CallOption) (*OrderHandledStatsResponse, error)
	//查询用户购买的商品
	CustomerGoods(ctx context.Context, in *StatsRequest, opts ...client.CallOption) (*CustomerGoodsResponse, error)
	//获取用户订单统计数据
	CustomerOrder(ctx context.Context, in *StatsRequest, opts ...client.CallOption) (*CustomerOrderStatsResponse, error)
	//获取用户未处理订单数量
	CustomerUnhandled(ctx context.Context, in *StatsRequest, opts ...client.CallOption) (*CustomerOrderHandledStatsResponse, error)
	//重置统计
	Reset(ctx context.Context, in *common.Empty, opts ...client.CallOption) (*OrderStatsResponse, error)
}

type statisticsService struct {
	c    client.Client
	name string
}

func NewStatisticsService(name string, c client.Client) StatisticsService {
	return &statisticsService{
		c:    c,
		name: name,
	}
}

func (c *statisticsService) OrderDaily(ctx context.Context, in *StatsRequest, opts ...client.CallOption) (*OrderDayStatsResponse, error) {
	req := c.c.NewRequest(c.name, "StatisticsService.OrderDaily", in)
	out := new(OrderDayStatsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticsService) OrderTotal(ctx context.Context, in *StatsRequest, opts ...client.CallOption) (*OrderStatsResponse, error) {
	req := c.c.NewRequest(c.name, "StatisticsService.OrderTotal", in)
	out := new(OrderStatsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticsService) TodayTotal(ctx context.Context, in *StatsRequest, opts ...client.CallOption) (*OrderDayStatsResponse, error) {
	req := c.c.NewRequest(c.name, "StatisticsService.TodayTotal", in)
	out := new(OrderDayStatsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticsService) OrderDays(ctx context.Context, in *StatsRequest, opts ...client.CallOption) (*OrderDayStatsResponse, error) {
	req := c.c.NewRequest(c.name, "StatisticsService.OrderDays", in)
	out := new(OrderDayStatsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticsService) Unhandled(ctx context.Context, in *StatsRequest, opts ...client.CallOption) (*OrderHandledStatsResponse, error) {
	req := c.c.NewRequest(c.name, "StatisticsService.Unhandled", in)
	out := new(OrderHandledStatsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticsService) CustomerGoods(ctx context.Context, in *StatsRequest, opts ...client.CallOption) (*CustomerGoodsResponse, error) {
	req := c.c.NewRequest(c.name, "StatisticsService.CustomerGoods", in)
	out := new(CustomerGoodsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticsService) CustomerOrder(ctx context.Context, in *StatsRequest, opts ...client.CallOption) (*CustomerOrderStatsResponse, error) {
	req := c.c.NewRequest(c.name, "StatisticsService.CustomerOrder", in)
	out := new(CustomerOrderStatsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticsService) CustomerUnhandled(ctx context.Context, in *StatsRequest, opts ...client.CallOption) (*CustomerOrderHandledStatsResponse, error) {
	req := c.c.NewRequest(c.name, "StatisticsService.CustomerUnhandled", in)
	out := new(CustomerOrderHandledStatsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticsService) Reset(ctx context.Context, in *common.Empty, opts ...client.CallOption) (*OrderStatsResponse, error) {
	req := c.c.NewRequest(c.name, "StatisticsService.Reset", in)
	out := new(OrderStatsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for StatisticsService service

type StatisticsServiceHandler interface {
	//获取订单每日统计数据
	OrderDaily(context.Context, *StatsRequest, *OrderDayStatsResponse) error
	//获取订单统计数据
	OrderTotal(context.Context, *StatsRequest, *OrderStatsResponse) error
	//今日实时统计
	TodayTotal(context.Context, *StatsRequest, *OrderDayStatsResponse) error
	//获取订单近30日客单统计明细数据
	OrderDays(context.Context, *StatsRequest, *OrderDayStatsResponse) error
	//获取店铺未处理订单数量
	Unhandled(context.Context, *StatsRequest, *OrderHandledStatsResponse) error
	//查询用户购买的商品
	CustomerGoods(context.Context, *StatsRequest, *CustomerGoodsResponse) error
	//获取用户订单统计数据
	CustomerOrder(context.Context, *StatsRequest, *CustomerOrderStatsResponse) error
	//获取用户未处理订单数量
	CustomerUnhandled(context.Context, *StatsRequest, *CustomerOrderHandledStatsResponse) error
	//重置统计
	Reset(context.Context, *common.Empty, *OrderStatsResponse) error
}

func RegisterStatisticsServiceHandler(s server.Server, hdlr StatisticsServiceHandler, opts ...server.HandlerOption) error {
	type statisticsService interface {
		OrderDaily(ctx context.Context, in *StatsRequest, out *OrderDayStatsResponse) error
		OrderTotal(ctx context.Context, in *StatsRequest, out *OrderStatsResponse) error
		TodayTotal(ctx context.Context, in *StatsRequest, out *OrderDayStatsResponse) error
		OrderDays(ctx context.Context, in *StatsRequest, out *OrderDayStatsResponse) error
		Unhandled(ctx context.Context, in *StatsRequest, out *OrderHandledStatsResponse) error
		CustomerGoods(ctx context.Context, in *StatsRequest, out *CustomerGoodsResponse) error
		CustomerOrder(ctx context.Context, in *StatsRequest, out *CustomerOrderStatsResponse) error
		CustomerUnhandled(ctx context.Context, in *StatsRequest, out *CustomerOrderHandledStatsResponse) error
		Reset(ctx context.Context, in *common.Empty, out *OrderStatsResponse) error
	}
	type StatisticsService struct {
		statisticsService
	}
	h := &statisticsServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&StatisticsService{h}, opts...))
}

type statisticsServiceHandler struct {
	StatisticsServiceHandler
}

func (h *statisticsServiceHandler) OrderDaily(ctx context.Context, in *StatsRequest, out *OrderDayStatsResponse) error {
	return h.StatisticsServiceHandler.OrderDaily(ctx, in, out)
}

func (h *statisticsServiceHandler) OrderTotal(ctx context.Context, in *StatsRequest, out *OrderStatsResponse) error {
	return h.StatisticsServiceHandler.OrderTotal(ctx, in, out)
}

func (h *statisticsServiceHandler) TodayTotal(ctx context.Context, in *StatsRequest, out *OrderDayStatsResponse) error {
	return h.StatisticsServiceHandler.TodayTotal(ctx, in, out)
}

func (h *statisticsServiceHandler) OrderDays(ctx context.Context, in *StatsRequest, out *OrderDayStatsResponse) error {
	return h.StatisticsServiceHandler.OrderDays(ctx, in, out)
}

func (h *statisticsServiceHandler) Unhandled(ctx context.Context, in *StatsRequest, out *OrderHandledStatsResponse) error {
	return h.StatisticsServiceHandler.Unhandled(ctx, in, out)
}

func (h *statisticsServiceHandler) CustomerGoods(ctx context.Context, in *StatsRequest, out *CustomerGoodsResponse) error {
	return h.StatisticsServiceHandler.CustomerGoods(ctx, in, out)
}

func (h *statisticsServiceHandler) CustomerOrder(ctx context.Context, in *StatsRequest, out *CustomerOrderStatsResponse) error {
	return h.StatisticsServiceHandler.CustomerOrder(ctx, in, out)
}

func (h *statisticsServiceHandler) CustomerUnhandled(ctx context.Context, in *StatsRequest, out *CustomerOrderHandledStatsResponse) error {
	return h.StatisticsServiceHandler.CustomerUnhandled(ctx, in, out)
}

func (h *statisticsServiceHandler) Reset(ctx context.Context, in *common.Empty, out *OrderStatsResponse) error {
	return h.StatisticsServiceHandler.Reset(ctx, in, out)
}
