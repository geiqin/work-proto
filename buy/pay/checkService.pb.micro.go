// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: checkService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for CheckService service

func NewCheckServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for CheckService service

type CheckService interface {
	//支付对账
	Charge(ctx context.Context, in *CheckRequest, opts ...client.CallOption) (*CheckResponse, error)
	//退款对账
	Refund(ctx context.Context, in *CheckRequest, opts ...client.CallOption) (*CheckResponse, error)
	//转账对账
	Transfer(ctx context.Context, in *CheckRequest, opts ...client.CallOption) (*CheckResponse, error)
	//拉取第三方支付对账
	Pull(ctx context.Context, in *CheckRequest, opts ...client.CallOption) (*CheckResponse, error)
}

type checkService struct {
	c    client.Client
	name string
}

func NewCheckService(name string, c client.Client) CheckService {
	return &checkService{
		c:    c,
		name: name,
	}
}

func (c *checkService) Charge(ctx context.Context, in *CheckRequest, opts ...client.CallOption) (*CheckResponse, error) {
	req := c.c.NewRequest(c.name, "CheckService.Charge", in)
	out := new(CheckResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkService) Refund(ctx context.Context, in *CheckRequest, opts ...client.CallOption) (*CheckResponse, error) {
	req := c.c.NewRequest(c.name, "CheckService.Refund", in)
	out := new(CheckResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkService) Transfer(ctx context.Context, in *CheckRequest, opts ...client.CallOption) (*CheckResponse, error) {
	req := c.c.NewRequest(c.name, "CheckService.Transfer", in)
	out := new(CheckResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkService) Pull(ctx context.Context, in *CheckRequest, opts ...client.CallOption) (*CheckResponse, error) {
	req := c.c.NewRequest(c.name, "CheckService.Pull", in)
	out := new(CheckResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CheckService service

type CheckServiceHandler interface {
	//支付对账
	Charge(context.Context, *CheckRequest, *CheckResponse) error
	//退款对账
	Refund(context.Context, *CheckRequest, *CheckResponse) error
	//转账对账
	Transfer(context.Context, *CheckRequest, *CheckResponse) error
	//拉取第三方支付对账
	Pull(context.Context, *CheckRequest, *CheckResponse) error
}

func RegisterCheckServiceHandler(s server.Server, hdlr CheckServiceHandler, opts ...server.HandlerOption) error {
	type checkService interface {
		Charge(ctx context.Context, in *CheckRequest, out *CheckResponse) error
		Refund(ctx context.Context, in *CheckRequest, out *CheckResponse) error
		Transfer(ctx context.Context, in *CheckRequest, out *CheckResponse) error
		Pull(ctx context.Context, in *CheckRequest, out *CheckResponse) error
	}
	type CheckService struct {
		checkService
	}
	h := &checkServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&CheckService{h}, opts...))
}

type checkServiceHandler struct {
	CheckServiceHandler
}

func (h *checkServiceHandler) Charge(ctx context.Context, in *CheckRequest, out *CheckResponse) error {
	return h.CheckServiceHandler.Charge(ctx, in, out)
}

func (h *checkServiceHandler) Refund(ctx context.Context, in *CheckRequest, out *CheckResponse) error {
	return h.CheckServiceHandler.Refund(ctx, in, out)
}

func (h *checkServiceHandler) Transfer(ctx context.Context, in *CheckRequest, out *CheckResponse) error {
	return h.CheckServiceHandler.Transfer(ctx, in, out)
}

func (h *checkServiceHandler) Pull(ctx context.Context, in *CheckRequest, out *CheckResponse) error {
	return h.CheckServiceHandler.Pull(ctx, in, out)
}
