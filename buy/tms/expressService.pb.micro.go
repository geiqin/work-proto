// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: expressService.proto

package services

import (
	fmt "fmt"
	common "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ExpressCfgService service

func NewExpressCfgServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ExpressCfgService service

type ExpressCfgService interface {
	// 启用快递发货功能
	Open(ctx context.Context, in *common.Empty, opts ...client.CallOption) (*SettingResponse, error)
	// 关闭快递发货功能
	Close(ctx context.Context, in *common.Empty, opts ...client.CallOption) (*SettingResponse, error)
	// 检查快递发货功能是否开启
	IsOpen(ctx context.Context, in *common.Empty, opts ...client.CallOption) (*SettingResponse, error)
	// 获取快递发货配置
	Get(ctx context.Context, in *common.Empty, opts ...client.CallOption) (*SettingResponse, error)
	// 修改运费模板计费方式
	Update(ctx context.Context, in *Setting, opts ...client.CallOption) (*SettingResponse, error)
}

type expressCfgService struct {
	c    client.Client
	name string
}

func NewExpressCfgService(name string, c client.Client) ExpressCfgService {
	return &expressCfgService{
		c:    c,
		name: name,
	}
}

func (c *expressCfgService) Open(ctx context.Context, in *common.Empty, opts ...client.CallOption) (*SettingResponse, error) {
	req := c.c.NewRequest(c.name, "ExpressCfgService.Open", in)
	out := new(SettingResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expressCfgService) Close(ctx context.Context, in *common.Empty, opts ...client.CallOption) (*SettingResponse, error) {
	req := c.c.NewRequest(c.name, "ExpressCfgService.Close", in)
	out := new(SettingResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expressCfgService) IsOpen(ctx context.Context, in *common.Empty, opts ...client.CallOption) (*SettingResponse, error) {
	req := c.c.NewRequest(c.name, "ExpressCfgService.IsOpen", in)
	out := new(SettingResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expressCfgService) Get(ctx context.Context, in *common.Empty, opts ...client.CallOption) (*SettingResponse, error) {
	req := c.c.NewRequest(c.name, "ExpressCfgService.Get", in)
	out := new(SettingResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expressCfgService) Update(ctx context.Context, in *Setting, opts ...client.CallOption) (*SettingResponse, error) {
	req := c.c.NewRequest(c.name, "ExpressCfgService.Update", in)
	out := new(SettingResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ExpressCfgService service

type ExpressCfgServiceHandler interface {
	// 启用快递发货功能
	Open(context.Context, *common.Empty, *SettingResponse) error
	// 关闭快递发货功能
	Close(context.Context, *common.Empty, *SettingResponse) error
	// 检查快递发货功能是否开启
	IsOpen(context.Context, *common.Empty, *SettingResponse) error
	// 获取快递发货配置
	Get(context.Context, *common.Empty, *SettingResponse) error
	// 修改运费模板计费方式
	Update(context.Context, *Setting, *SettingResponse) error
}

func RegisterExpressCfgServiceHandler(s server.Server, hdlr ExpressCfgServiceHandler, opts ...server.HandlerOption) error {
	type expressCfgService interface {
		Open(ctx context.Context, in *common.Empty, out *SettingResponse) error
		Close(ctx context.Context, in *common.Empty, out *SettingResponse) error
		IsOpen(ctx context.Context, in *common.Empty, out *SettingResponse) error
		Get(ctx context.Context, in *common.Empty, out *SettingResponse) error
		Update(ctx context.Context, in *Setting, out *SettingResponse) error
	}
	type ExpressCfgService struct {
		expressCfgService
	}
	h := &expressCfgServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ExpressCfgService{h}, opts...))
}

type expressCfgServiceHandler struct {
	ExpressCfgServiceHandler
}

func (h *expressCfgServiceHandler) Open(ctx context.Context, in *common.Empty, out *SettingResponse) error {
	return h.ExpressCfgServiceHandler.Open(ctx, in, out)
}

func (h *expressCfgServiceHandler) Close(ctx context.Context, in *common.Empty, out *SettingResponse) error {
	return h.ExpressCfgServiceHandler.Close(ctx, in, out)
}

func (h *expressCfgServiceHandler) IsOpen(ctx context.Context, in *common.Empty, out *SettingResponse) error {
	return h.ExpressCfgServiceHandler.IsOpen(ctx, in, out)
}

func (h *expressCfgServiceHandler) Get(ctx context.Context, in *common.Empty, out *SettingResponse) error {
	return h.ExpressCfgServiceHandler.Get(ctx, in, out)
}

func (h *expressCfgServiceHandler) Update(ctx context.Context, in *Setting, out *SettingResponse) error {
	return h.ExpressCfgServiceHandler.Update(ctx, in, out)
}

// Api Endpoints for ExpressService service

func NewExpressServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ExpressService service

type ExpressService interface {
	Create(ctx context.Context, in *Express, opts ...client.CallOption) (*ExpressResponse, error)
	Update(ctx context.Context, in *Express, opts ...client.CallOption) (*ExpressResponse, error)
	Copy(ctx context.Context, in *ExpressWhere, opts ...client.CallOption) (*ExpressResponse, error)
	Delete(ctx context.Context, in *ExpressWhere, opts ...client.CallOption) (*ExpressResponse, error)
	Search(ctx context.Context, in *ExpressWhere, opts ...client.CallOption) (*ExpressResponse, error)
	List(ctx context.Context, in *ExpressWhere, opts ...client.CallOption) (*ExpressResponse, error)
	Get(ctx context.Context, in *Express, opts ...client.CallOption) (*ExpressResponse, error)
	// 设置默认使用模板
	Defaulted(ctx context.Context, in *ExpressWhere, opts ...client.CallOption) (*ExpressResponse, error)
	// 获取默认使用的模板
	GetDefault(ctx context.Context, in *common.Empty, opts ...client.CallOption) (*ExpressResponse, error)
}

type expressService struct {
	c    client.Client
	name string
}

func NewExpressService(name string, c client.Client) ExpressService {
	return &expressService{
		c:    c,
		name: name,
	}
}

func (c *expressService) Create(ctx context.Context, in *Express, opts ...client.CallOption) (*ExpressResponse, error) {
	req := c.c.NewRequest(c.name, "ExpressService.Create", in)
	out := new(ExpressResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expressService) Update(ctx context.Context, in *Express, opts ...client.CallOption) (*ExpressResponse, error) {
	req := c.c.NewRequest(c.name, "ExpressService.Update", in)
	out := new(ExpressResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expressService) Copy(ctx context.Context, in *ExpressWhere, opts ...client.CallOption) (*ExpressResponse, error) {
	req := c.c.NewRequest(c.name, "ExpressService.Copy", in)
	out := new(ExpressResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expressService) Delete(ctx context.Context, in *ExpressWhere, opts ...client.CallOption) (*ExpressResponse, error) {
	req := c.c.NewRequest(c.name, "ExpressService.Delete", in)
	out := new(ExpressResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expressService) Search(ctx context.Context, in *ExpressWhere, opts ...client.CallOption) (*ExpressResponse, error) {
	req := c.c.NewRequest(c.name, "ExpressService.Search", in)
	out := new(ExpressResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expressService) List(ctx context.Context, in *ExpressWhere, opts ...client.CallOption) (*ExpressResponse, error) {
	req := c.c.NewRequest(c.name, "ExpressService.List", in)
	out := new(ExpressResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expressService) Get(ctx context.Context, in *Express, opts ...client.CallOption) (*ExpressResponse, error) {
	req := c.c.NewRequest(c.name, "ExpressService.Get", in)
	out := new(ExpressResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expressService) Defaulted(ctx context.Context, in *ExpressWhere, opts ...client.CallOption) (*ExpressResponse, error) {
	req := c.c.NewRequest(c.name, "ExpressService.Defaulted", in)
	out := new(ExpressResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expressService) GetDefault(ctx context.Context, in *common.Empty, opts ...client.CallOption) (*ExpressResponse, error) {
	req := c.c.NewRequest(c.name, "ExpressService.GetDefault", in)
	out := new(ExpressResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ExpressService service

type ExpressServiceHandler interface {
	Create(context.Context, *Express, *ExpressResponse) error
	Update(context.Context, *Express, *ExpressResponse) error
	Copy(context.Context, *ExpressWhere, *ExpressResponse) error
	Delete(context.Context, *ExpressWhere, *ExpressResponse) error
	Search(context.Context, *ExpressWhere, *ExpressResponse) error
	List(context.Context, *ExpressWhere, *ExpressResponse) error
	Get(context.Context, *Express, *ExpressResponse) error
	// 设置默认使用模板
	Defaulted(context.Context, *ExpressWhere, *ExpressResponse) error
	// 获取默认使用的模板
	GetDefault(context.Context, *common.Empty, *ExpressResponse) error
}

func RegisterExpressServiceHandler(s server.Server, hdlr ExpressServiceHandler, opts ...server.HandlerOption) error {
	type expressService interface {
		Create(ctx context.Context, in *Express, out *ExpressResponse) error
		Update(ctx context.Context, in *Express, out *ExpressResponse) error
		Copy(ctx context.Context, in *ExpressWhere, out *ExpressResponse) error
		Delete(ctx context.Context, in *ExpressWhere, out *ExpressResponse) error
		Search(ctx context.Context, in *ExpressWhere, out *ExpressResponse) error
		List(ctx context.Context, in *ExpressWhere, out *ExpressResponse) error
		Get(ctx context.Context, in *Express, out *ExpressResponse) error
		Defaulted(ctx context.Context, in *ExpressWhere, out *ExpressResponse) error
		GetDefault(ctx context.Context, in *common.Empty, out *ExpressResponse) error
	}
	type ExpressService struct {
		expressService
	}
	h := &expressServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ExpressService{h}, opts...))
}

type expressServiceHandler struct {
	ExpressServiceHandler
}

func (h *expressServiceHandler) Create(ctx context.Context, in *Express, out *ExpressResponse) error {
	return h.ExpressServiceHandler.Create(ctx, in, out)
}

func (h *expressServiceHandler) Update(ctx context.Context, in *Express, out *ExpressResponse) error {
	return h.ExpressServiceHandler.Update(ctx, in, out)
}

func (h *expressServiceHandler) Copy(ctx context.Context, in *ExpressWhere, out *ExpressResponse) error {
	return h.ExpressServiceHandler.Copy(ctx, in, out)
}

func (h *expressServiceHandler) Delete(ctx context.Context, in *ExpressWhere, out *ExpressResponse) error {
	return h.ExpressServiceHandler.Delete(ctx, in, out)
}

func (h *expressServiceHandler) Search(ctx context.Context, in *ExpressWhere, out *ExpressResponse) error {
	return h.ExpressServiceHandler.Search(ctx, in, out)
}

func (h *expressServiceHandler) List(ctx context.Context, in *ExpressWhere, out *ExpressResponse) error {
	return h.ExpressServiceHandler.List(ctx, in, out)
}

func (h *expressServiceHandler) Get(ctx context.Context, in *Express, out *ExpressResponse) error {
	return h.ExpressServiceHandler.Get(ctx, in, out)
}

func (h *expressServiceHandler) Defaulted(ctx context.Context, in *ExpressWhere, out *ExpressResponse) error {
	return h.ExpressServiceHandler.Defaulted(ctx, in, out)
}

func (h *expressServiceHandler) GetDefault(ctx context.Context, in *common.Empty, out *ExpressResponse) error {
	return h.ExpressServiceHandler.GetDefault(ctx, in, out)
}
