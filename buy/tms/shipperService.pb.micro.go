// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: shipperService.proto

package services

import (
	fmt "fmt"
	common "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ShipperService service

func NewShipperServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ShipperService service

type ShipperService interface {
	Create(ctx context.Context, in *Shipper, opts ...client.CallOption) (*ShipperResponse, error)
	Update(ctx context.Context, in *Shipper, opts ...client.CallOption) (*ShipperResponse, error)
	Get(ctx context.Context, in *Shipper, opts ...client.CallOption) (*ShipperResponse, error)
	Search(ctx context.Context, in *common.BaseWhere, opts ...client.CallOption) (*ShipperResponse, error)
	List(ctx context.Context, in *common.BaseWhere, opts ...client.CallOption) (*ShipperResponse, error)
}

type shipperService struct {
	c    client.Client
	name string
}

func NewShipperService(name string, c client.Client) ShipperService {
	return &shipperService{
		c:    c,
		name: name,
	}
}

func (c *shipperService) Create(ctx context.Context, in *Shipper, opts ...client.CallOption) (*ShipperResponse, error) {
	req := c.c.NewRequest(c.name, "ShipperService.Create", in)
	out := new(ShipperResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shipperService) Update(ctx context.Context, in *Shipper, opts ...client.CallOption) (*ShipperResponse, error) {
	req := c.c.NewRequest(c.name, "ShipperService.Update", in)
	out := new(ShipperResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shipperService) Get(ctx context.Context, in *Shipper, opts ...client.CallOption) (*ShipperResponse, error) {
	req := c.c.NewRequest(c.name, "ShipperService.Get", in)
	out := new(ShipperResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shipperService) Search(ctx context.Context, in *common.BaseWhere, opts ...client.CallOption) (*ShipperResponse, error) {
	req := c.c.NewRequest(c.name, "ShipperService.Search", in)
	out := new(ShipperResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shipperService) List(ctx context.Context, in *common.BaseWhere, opts ...client.CallOption) (*ShipperResponse, error) {
	req := c.c.NewRequest(c.name, "ShipperService.List", in)
	out := new(ShipperResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ShipperService service

type ShipperServiceHandler interface {
	Create(context.Context, *Shipper, *ShipperResponse) error
	Update(context.Context, *Shipper, *ShipperResponse) error
	Get(context.Context, *Shipper, *ShipperResponse) error
	Search(context.Context, *common.BaseWhere, *ShipperResponse) error
	List(context.Context, *common.BaseWhere, *ShipperResponse) error
}

func RegisterShipperServiceHandler(s server.Server, hdlr ShipperServiceHandler, opts ...server.HandlerOption) error {
	type shipperService interface {
		Create(ctx context.Context, in *Shipper, out *ShipperResponse) error
		Update(ctx context.Context, in *Shipper, out *ShipperResponse) error
		Get(ctx context.Context, in *Shipper, out *ShipperResponse) error
		Search(ctx context.Context, in *common.BaseWhere, out *ShipperResponse) error
		List(ctx context.Context, in *common.BaseWhere, out *ShipperResponse) error
	}
	type ShipperService struct {
		shipperService
	}
	h := &shipperServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ShipperService{h}, opts...))
}

type shipperServiceHandler struct {
	ShipperServiceHandler
}

func (h *shipperServiceHandler) Create(ctx context.Context, in *Shipper, out *ShipperResponse) error {
	return h.ShipperServiceHandler.Create(ctx, in, out)
}

func (h *shipperServiceHandler) Update(ctx context.Context, in *Shipper, out *ShipperResponse) error {
	return h.ShipperServiceHandler.Update(ctx, in, out)
}

func (h *shipperServiceHandler) Get(ctx context.Context, in *Shipper, out *ShipperResponse) error {
	return h.ShipperServiceHandler.Get(ctx, in, out)
}

func (h *shipperServiceHandler) Search(ctx context.Context, in *common.BaseWhere, out *ShipperResponse) error {
	return h.ShipperServiceHandler.Search(ctx, in, out)
}

func (h *shipperServiceHandler) List(ctx context.Context, in *common.BaseWhere, out *ShipperResponse) error {
	return h.ShipperServiceHandler.List(ctx, in, out)
}
