// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: articleCatService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ArticleCatService service

func NewArticleCatServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ArticleCatService service

type ArticleCatService interface {
	ArticleList(ctx context.Context, in *ArticleCatWhere, opts ...client.CallOption) (*ArticleCatResponse, error)
}

type articleCatService struct {
	c    client.Client
	name string
}

func NewArticleCatService(name string, c client.Client) ArticleCatService {
	return &articleCatService{
		c:    c,
		name: name,
	}
}

func (c *articleCatService) ArticleList(ctx context.Context, in *ArticleCatWhere, opts ...client.CallOption) (*ArticleCatResponse, error) {
	req := c.c.NewRequest(c.name, "ArticleCatService.ArticleList", in)
	out := new(ArticleCatResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ArticleCatService service

type ArticleCatServiceHandler interface {
	ArticleList(context.Context, *ArticleCatWhere, *ArticleCatResponse) error
}

func RegisterArticleCatServiceHandler(s server.Server, hdlr ArticleCatServiceHandler, opts ...server.HandlerOption) error {
	type articleCatService interface {
		ArticleList(ctx context.Context, in *ArticleCatWhere, out *ArticleCatResponse) error
	}
	type ArticleCatService struct {
		articleCatService
	}
	h := &articleCatServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ArticleCatService{h}, opts...))
}

type articleCatServiceHandler struct {
	ArticleCatServiceHandler
}

func (h *articleCatServiceHandler) ArticleList(ctx context.Context, in *ArticleCatWhere, out *ArticleCatResponse) error {
	return h.ArticleCatServiceHandler.ArticleList(ctx, in, out)
}
