// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: articleService.proto

package services

import (
	common "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

//文章信息
type Article struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	Title          string `protobuf:"bytes,2,opt,name=title,proto3" json:"title"`
	Name           string `protobuf:"bytes,3,opt,name=name,proto3" json:"name"`
	Content        string `protobuf:"bytes,4,opt,name=content,proto3" json:"content"`
	Excerpt        string `protobuf:"bytes,5,opt,name=excerpt,proto3" json:"excerpt"`
	Type           string `protobuf:"bytes,6,opt,name=type,proto3" json:"type"`
	MimeType       string `protobuf:"bytes,7,opt,name=mime_type,json=mimeType,proto3" json:"mime_type"`
	Keywords       string `protobuf:"bytes,8,opt,name=keywords,proto3" json:"keywords"`
	ThumbId        int64  `protobuf:"varint,9,opt,name=thumb_id,json=thumbId,proto3" json:"thumb_id"`
	ThumbUrl       string `protobuf:"bytes,10,opt,name=thumb_url,json=thumbUrl,proto3" json:"thumb_url"`
	ParentId       int64  `protobuf:"varint,11,opt,name=parent_id,json=parentId,proto3" json:"parent_id"`
	Drafted        bool   `protobuf:"varint,12,opt,name=drafted,proto3" json:"drafted"`
	Status         string `protobuf:"bytes,13,opt,name=status,proto3" json:"status"`
	CommentEnabled bool   `protobuf:"varint,14,opt,name=comment_enabled,json=commentEnabled,proto3" json:"comment_enabled"`
	CommentCount   int32  `protobuf:"varint,15,opt,name=comment_count,json=commentCount,proto3" json:"comment_count"`
	ViewCount      int32  `protobuf:"varint,16,opt,name=view_count,json=viewCount,proto3" json:"view_count"`
	System         bool   `protobuf:"varint,17,opt,name=system,proto3" json:"system"`
	Sorting        int32  `protobuf:"varint,18,opt,name=sorting,proto3" json:"sorting"`
	UserId         int64  `protobuf:"varint,19,opt,name=user_id,json=userId,proto3" json:"user_id"`
	//google.protobuf.Timestamp published_at =20;
	PublishedAt string `protobuf:"bytes,20,opt,name=published_at,json=publishedAt,proto3" json:"published_at"`
	CreatedAt   string `protobuf:"bytes,21,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt   string `protobuf:"bytes,22,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	// @inject_tag: gorm:"many2many:article_cats;"
	Cats []*Cat `protobuf:"bytes,23,rep,name=cats,proto3" json:"cats" gorm:"many2many:article_cats;"`
	// @inject_tag: gorm:"many2many:article_tags;"
	Tags []*Tag `protobuf:"bytes,24,rep,name=tags,proto3" json:"tags" gorm:"many2many:article_tags;"`
	// @inject_tag: gorm:"-"
	Ids             []int32           `protobuf:"varint,25,rep,packed,name=ids,proto3" json:"ids" gorm:"-"`
	AttributeTypeId int32             `protobuf:"varint,26,opt,name=attribute_type_id,json=attributeTypeId,proto3" json:"attribute_type_id"`
	Metas           []*ArticleMeta    `protobuf:"bytes,27,rep,name=metas,proto3" json:"metas"`
	Galleries       []*ArticleGallery `protobuf:"bytes,28,rep,name=galleries,proto3" json:"galleries"`
	// @inject_tag: gorm:"-"
	PreArticle *Article `protobuf:"bytes,29,opt,name=pre_article,json=preArticle,proto3" json:"pre_article" gorm:"-"` // 上一篇文章
	// @inject_tag: gorm:"-"
	NextArticle *Article `protobuf:"bytes,30,opt,name=next_article,json=nextArticle,proto3" json:"next_article" gorm:"-"` // 下一篇文章
	STitle      string   `protobuf:"bytes,31,opt,name=s_title,json=sTitle,proto3" json:"s_title"`
	SDescribe   string   `protobuf:"bytes,32,opt,name=s_describe,json=sDescribe,proto3" json:"s_describe"`
	SKeywords   string   `protobuf:"bytes,33,opt,name=s_keywords,json=sKeywords,proto3" json:"s_keywords"`
}

func (x *Article) Reset() {
	*x = Article{}
	if protoimpl.UnsafeEnabled {
		mi := &file_articleService_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Article) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Article) ProtoMessage() {}

func (x *Article) ProtoReflect() protoreflect.Message {
	mi := &file_articleService_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Article.ProtoReflect.Descriptor instead.
func (*Article) Descriptor() ([]byte, []int) {
	return file_articleService_proto_rawDescGZIP(), []int{0}
}

func (x *Article) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Article) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Article) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Article) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Article) GetExcerpt() string {
	if x != nil {
		return x.Excerpt
	}
	return ""
}

func (x *Article) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Article) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *Article) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *Article) GetThumbId() int64 {
	if x != nil {
		return x.ThumbId
	}
	return 0
}

func (x *Article) GetThumbUrl() string {
	if x != nil {
		return x.ThumbUrl
	}
	return ""
}

func (x *Article) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *Article) GetDrafted() bool {
	if x != nil {
		return x.Drafted
	}
	return false
}

func (x *Article) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Article) GetCommentEnabled() bool {
	if x != nil {
		return x.CommentEnabled
	}
	return false
}

func (x *Article) GetCommentCount() int32 {
	if x != nil {
		return x.CommentCount
	}
	return 0
}

func (x *Article) GetViewCount() int32 {
	if x != nil {
		return x.ViewCount
	}
	return 0
}

func (x *Article) GetSystem() bool {
	if x != nil {
		return x.System
	}
	return false
}

func (x *Article) GetSorting() int32 {
	if x != nil {
		return x.Sorting
	}
	return 0
}

func (x *Article) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Article) GetPublishedAt() string {
	if x != nil {
		return x.PublishedAt
	}
	return ""
}

func (x *Article) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Article) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *Article) GetCats() []*Cat {
	if x != nil {
		return x.Cats
	}
	return nil
}

func (x *Article) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Article) GetIds() []int32 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *Article) GetAttributeTypeId() int32 {
	if x != nil {
		return x.AttributeTypeId
	}
	return 0
}

func (x *Article) GetMetas() []*ArticleMeta {
	if x != nil {
		return x.Metas
	}
	return nil
}

func (x *Article) GetGalleries() []*ArticleGallery {
	if x != nil {
		return x.Galleries
	}
	return nil
}

func (x *Article) GetPreArticle() *Article {
	if x != nil {
		return x.PreArticle
	}
	return nil
}

func (x *Article) GetNextArticle() *Article {
	if x != nil {
		return x.NextArticle
	}
	return nil
}

func (x *Article) GetSTitle() string {
	if x != nil {
		return x.STitle
	}
	return ""
}

func (x *Article) GetSDescribe() string {
	if x != nil {
		return x.SDescribe
	}
	return ""
}

func (x *Article) GetSKeywords() string {
	if x != nil {
		return x.SKeywords
	}
	return ""
}

//文章查询参数
type ArticleWhere struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Paged    int32  `protobuf:"varint,1,opt,name=paged,proto3" json:"paged"`
	PageSize int32  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size"`
	Top      int32  `protobuf:"varint,3,opt,name=top,proto3" json:"top"`
	Title    string `protobuf:"bytes,4,opt,name=title,proto3" json:"title"`
	CatId    int32  `protobuf:"varint,5,opt,name=cat_id,json=catId,proto3" json:"cat_id"`
	CatSlug  string `protobuf:"bytes,6,opt,name=cat_slug,json=catSlug,proto3" json:"cat_slug"`
	Type     string `protobuf:"bytes,7,opt,name=type,proto3" json:"type"`
	// @inject_tag: gorm:"-"
	Names     []string `protobuf:"bytes,8,rep,name=names,proto3" json:"names" gorm:"-"`
	Id        int64    `protobuf:"varint,9,opt,name=id,proto3" json:"id"`
	IsInclude bool     `protobuf:"varint,10,opt,name=is_include,json=isInclude,proto3" json:"is_include"` // 是否包含上一篇、下一篇文章
	Drafted   bool     `protobuf:"varint,11,opt,name=drafted,proto3" json:"drafted"`                      // 是否草稿
	Status    string   `protobuf:"bytes,12,opt,name=status,proto3" json:"status"`
	IsClient  bool     `protobuf:"varint,13,opt,name=is_client,json=isClient,proto3" json:"is_client"` // 是否客户端展示
	// @inject_tag: gorm:"-"
	CatSlugs []*CatSlugs `protobuf:"bytes,14,rep,name=cat_slugs,json=catSlugs,proto3" json:"cat_slugs" gorm:"-"`
	// @inject_tag: gorm:"-"
	AttrQueries []*SheetAttrQueries `protobuf:"bytes,15,rep,name=attr_queries,json=attrQueries,proto3" json:"attr_queries" gorm:"-"`
}

func (x *ArticleWhere) Reset() {
	*x = ArticleWhere{}
	if protoimpl.UnsafeEnabled {
		mi := &file_articleService_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArticleWhere) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArticleWhere) ProtoMessage() {}

func (x *ArticleWhere) ProtoReflect() protoreflect.Message {
	mi := &file_articleService_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArticleWhere.ProtoReflect.Descriptor instead.
func (*ArticleWhere) Descriptor() ([]byte, []int) {
	return file_articleService_proto_rawDescGZIP(), []int{1}
}

func (x *ArticleWhere) GetPaged() int32 {
	if x != nil {
		return x.Paged
	}
	return 0
}

func (x *ArticleWhere) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ArticleWhere) GetTop() int32 {
	if x != nil {
		return x.Top
	}
	return 0
}

func (x *ArticleWhere) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ArticleWhere) GetCatId() int32 {
	if x != nil {
		return x.CatId
	}
	return 0
}

func (x *ArticleWhere) GetCatSlug() string {
	if x != nil {
		return x.CatSlug
	}
	return ""
}

func (x *ArticleWhere) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ArticleWhere) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *ArticleWhere) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ArticleWhere) GetIsInclude() bool {
	if x != nil {
		return x.IsInclude
	}
	return false
}

func (x *ArticleWhere) GetDrafted() bool {
	if x != nil {
		return x.Drafted
	}
	return false
}

func (x *ArticleWhere) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ArticleWhere) GetIsClient() bool {
	if x != nil {
		return x.IsClient
	}
	return false
}

func (x *ArticleWhere) GetCatSlugs() []*CatSlugs {
	if x != nil {
		return x.CatSlugs
	}
	return nil
}

func (x *ArticleWhere) GetAttrQueries() []*SheetAttrQueries {
	if x != nil {
		return x.AttrQueries
	}
	return nil
}

type CatSlugs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CatId   int32  `protobuf:"varint,1,opt,name=cat_id,json=catId,proto3" json:"cat_id"`
	CatSlug string `protobuf:"bytes,2,opt,name=cat_slug,json=catSlug,proto3" json:"cat_slug"`
	Top     int32  `protobuf:"varint,3,opt,name=top,proto3" json:"top"`
	// @inject_tag: gorm:"-"
	Items []*Article `protobuf:"bytes,4,rep,name=items,proto3" json:"items" gorm:"-"`
}

func (x *CatSlugs) Reset() {
	*x = CatSlugs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_articleService_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CatSlugs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CatSlugs) ProtoMessage() {}

func (x *CatSlugs) ProtoReflect() protoreflect.Message {
	mi := &file_articleService_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CatSlugs.ProtoReflect.Descriptor instead.
func (*CatSlugs) Descriptor() ([]byte, []int) {
	return file_articleService_proto_rawDescGZIP(), []int{2}
}

func (x *CatSlugs) GetCatId() int32 {
	if x != nil {
		return x.CatId
	}
	return 0
}

func (x *CatSlugs) GetCatSlug() string {
	if x != nil {
		return x.CatSlug
	}
	return ""
}

func (x *CatSlugs) GetTop() int32 {
	if x != nil {
		return x.Top
	}
	return 0
}

func (x *CatSlugs) GetItems() []*Article {
	if x != nil {
		return x.Items
	}
	return nil
}

type ArticleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entity *Article      `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity"`
	Pager  *common.Pager `protobuf:"bytes,2,opt,name=pager,proto3" json:"pager"`
	Items  []*Article    `protobuf:"bytes,3,rep,name=items,proto3" json:"items"`
	Error  *common.Error `protobuf:"bytes,4,opt,name=error,proto3" json:"error"`
	Info   *common.Info  `protobuf:"bytes,5,opt,name=info,proto3" json:"info"`
}

func (x *ArticleResponse) Reset() {
	*x = ArticleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_articleService_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArticleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArticleResponse) ProtoMessage() {}

func (x *ArticleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_articleService_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArticleResponse.ProtoReflect.Descriptor instead.
func (*ArticleResponse) Descriptor() ([]byte, []int) {
	return file_articleService_proto_rawDescGZIP(), []int{3}
}

func (x *ArticleResponse) GetEntity() *Article {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *ArticleResponse) GetPager() *common.Pager {
	if x != nil {
		return x.Pager
	}
	return nil
}

func (x *ArticleResponse) GetItems() []*Article {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ArticleResponse) GetError() *common.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ArticleResponse) GetInfo() *common.Info {
	if x != nil {
		return x.Info
	}
	return nil
}

type CatSlugsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entity *CatSlugs     `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity"`
	Pager  *common.Pager `protobuf:"bytes,2,opt,name=pager,proto3" json:"pager"`
	Items  []*CatSlugs   `protobuf:"bytes,3,rep,name=items,proto3" json:"items"`
	Error  *common.Error `protobuf:"bytes,4,opt,name=error,proto3" json:"error"`
	Info   *common.Info  `protobuf:"bytes,5,opt,name=info,proto3" json:"info"`
}

func (x *CatSlugsResponse) Reset() {
	*x = CatSlugsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_articleService_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CatSlugsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CatSlugsResponse) ProtoMessage() {}

func (x *CatSlugsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_articleService_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CatSlugsResponse.ProtoReflect.Descriptor instead.
func (*CatSlugsResponse) Descriptor() ([]byte, []int) {
	return file_articleService_proto_rawDescGZIP(), []int{4}
}

func (x *CatSlugsResponse) GetEntity() *CatSlugs {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *CatSlugsResponse) GetPager() *common.Pager {
	if x != nil {
		return x.Pager
	}
	return nil
}

func (x *CatSlugsResponse) GetItems() []*CatSlugs {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *CatSlugsResponse) GetError() *common.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *CatSlugsResponse) GetInfo() *common.Info {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_articleService_proto protoreflect.FileDescriptor

var file_articleService_proto_rawDesc = []byte{
	0x0a, 0x14, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x1a, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x63, 0x61, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x74, 0x61, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72,
	0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18,
	0x73, 0x68, 0x65, 0x65, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8e, 0x08, 0x0a, 0x07, 0x41, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x65,
	0x72, 0x70, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x63, 0x65, 0x72,
	0x70, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6d, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12,
	0x19, 0x0a, 0x08, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x68,
	0x75, 0x6d, 0x62, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x68, 0x75, 0x6d, 0x62, 0x55, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x72, 0x61, 0x66, 0x74, 0x65, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x72, 0x61, 0x66, 0x74, 0x65, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x6f,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x21, 0x0a, 0x04, 0x63, 0x61, 0x74, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x61, 0x74, 0x52, 0x04, 0x63, 0x61,
	0x74, 0x73, 0x12, 0x21, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x54, 0x61, 0x67, 0x52,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x19, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x05, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x18, 0x1b, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x05, 0x6d, 0x65, 0x74, 0x61, 0x73,
	0x12, 0x36, 0x0a, 0x09, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x1c, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x41,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x52, 0x09, 0x67,
	0x61, 0x6c, 0x6c, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x5f,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x52, 0x0a, 0x70, 0x72, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x34, 0x0a, 0x0c,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x5f,
	0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xb3, 0x03, 0x0a, 0x0c, 0x41, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x57, 0x68, 0x65, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61,
	0x67, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x74, 0x6f, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x74, 0x6f, 0x70, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x61, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x63, 0x61, 0x74, 0x5f, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x61, 0x74, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x64, 0x72, 0x61, 0x66, 0x74, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x64, 0x72, 0x61, 0x66, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12,
	0x2f, 0x0a, 0x09, 0x63, 0x61, 0x74, 0x5f, 0x73, 0x6c, 0x75, 0x67, 0x73, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x61,
	0x74, 0x53, 0x6c, 0x75, 0x67, 0x73, 0x52, 0x08, 0x63, 0x61, 0x74, 0x53, 0x6c, 0x75, 0x67, 0x73,
	0x12, 0x3d, 0x0a, 0x0c, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x53, 0x68, 0x65, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x51, 0x75, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x72, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x22,
	0x77, 0x0a, 0x08, 0x43, 0x61, 0x74, 0x53, 0x6c, 0x75, 0x67, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x63,
	0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x61, 0x74,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x5f, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x61, 0x74, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x10, 0x0a,
	0x03, 0x74, 0x6f, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x74, 0x6f, 0x70, 0x12,
	0x27, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xd1, 0x01, 0x0a, 0x0f, 0x41, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x06,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52,
	0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x50, 0x61, 0x67, 0x65, 0x72, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x04, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xd4, 0x01, 0x0a,
	0x10, 0x43, 0x61, 0x74, 0x53, 0x6c, 0x75, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2a, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x61, 0x74,
	0x53, 0x6c, 0x75, 0x67, 0x73, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a,
	0x05, 0x70, 0x61, 0x67, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x72, 0x52, 0x05, 0x70, 0x61, 0x67,
	0x65, 0x72, 0x12, 0x28, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x61, 0x74,
	0x53, 0x6c, 0x75, 0x67, 0x73, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x23, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x20, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69,
	0x6e, 0x66, 0x6f, 0x32, 0xf2, 0x03, 0x0a, 0x0e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x12, 0x11, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x1a, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x41,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x38, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x11, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x1a, 0x19, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x06, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x12, 0x11, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x1a, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x16, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x57, 0x68,
	0x65, 0x72, 0x65, 0x1a, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x41,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x3d, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x16, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x57, 0x68, 0x65,
	0x72, 0x65, 0x1a, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x3b, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x57, 0x68, 0x65, 0x72, 0x65, 0x1a,
	0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x07,
	0x47, 0x65, 0x74, 0x50, 0x61, 0x67, 0x65, 0x12, 0x11, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x1a, 0x19, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x41,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x57, 0x68, 0x65, 0x72, 0x65, 0x1a, 0x19, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0x91, 0x03, 0x0a, 0x13, 0x46, 0x72, 0x6f,
	0x6e, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x3a, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x57, 0x68, 0x65, 0x72, 0x65, 0x1a,
	0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x06,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x57, 0x68, 0x65, 0x72, 0x65, 0x1a, 0x19,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x04, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x41,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x57, 0x68, 0x65, 0x72, 0x65, 0x1a, 0x19, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x12, 0x11, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x41,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x1a, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x57, 0x68, 0x65, 0x72, 0x65, 0x1a, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x43, 0x61,
	0x74, 0x53, 0x6c, 0x75, 0x67, 0x73, 0x12, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x57, 0x68, 0x65, 0x72, 0x65, 0x1a, 0x1a,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x61, 0x74, 0x53, 0x6c, 0x75,
	0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x0c, 0x5a, 0x0a,
	0x2e, 0x3b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_articleService_proto_rawDescOnce sync.Once
	file_articleService_proto_rawDescData = file_articleService_proto_rawDesc
)

func file_articleService_proto_rawDescGZIP() []byte {
	file_articleService_proto_rawDescOnce.Do(func() {
		file_articleService_proto_rawDescData = protoimpl.X.CompressGZIP(file_articleService_proto_rawDescData)
	})
	return file_articleService_proto_rawDescData
}

var file_articleService_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_articleService_proto_goTypes = []interface{}{
	(*Article)(nil),          // 0: services.Article
	(*ArticleWhere)(nil),     // 1: services.ArticleWhere
	(*CatSlugs)(nil),         // 2: services.CatSlugs
	(*ArticleResponse)(nil),  // 3: services.ArticleResponse
	(*CatSlugsResponse)(nil), // 4: services.CatSlugsResponse
	(*Cat)(nil),              // 5: services.Cat
	(*Tag)(nil),              // 6: services.Tag
	(*ArticleMeta)(nil),      // 7: services.ArticleMeta
	(*ArticleGallery)(nil),   // 8: services.ArticleGallery
	(*SheetAttrQueries)(nil), // 9: services.SheetAttrQueries
	(*common.Pager)(nil),     // 10: common.Pager
	(*common.Error)(nil),     // 11: common.Error
	(*common.Info)(nil),      // 12: common.Info
}
var file_articleService_proto_depIdxs = []int32{
	5,  // 0: services.Article.cats:type_name -> services.Cat
	6,  // 1: services.Article.tags:type_name -> services.Tag
	7,  // 2: services.Article.metas:type_name -> services.ArticleMeta
	8,  // 3: services.Article.galleries:type_name -> services.ArticleGallery
	0,  // 4: services.Article.pre_article:type_name -> services.Article
	0,  // 5: services.Article.next_article:type_name -> services.Article
	2,  // 6: services.ArticleWhere.cat_slugs:type_name -> services.CatSlugs
	9,  // 7: services.ArticleWhere.attr_queries:type_name -> services.SheetAttrQueries
	0,  // 8: services.CatSlugs.items:type_name -> services.Article
	0,  // 9: services.ArticleResponse.entity:type_name -> services.Article
	10, // 10: services.ArticleResponse.pager:type_name -> common.Pager
	0,  // 11: services.ArticleResponse.items:type_name -> services.Article
	11, // 12: services.ArticleResponse.error:type_name -> common.Error
	12, // 13: services.ArticleResponse.info:type_name -> common.Info
	2,  // 14: services.CatSlugsResponse.entity:type_name -> services.CatSlugs
	10, // 15: services.CatSlugsResponse.pager:type_name -> common.Pager
	2,  // 16: services.CatSlugsResponse.items:type_name -> services.CatSlugs
	11, // 17: services.CatSlugsResponse.error:type_name -> common.Error
	12, // 18: services.CatSlugsResponse.info:type_name -> common.Info
	0,  // 19: services.ArticleService.Create:input_type -> services.Article
	0,  // 20: services.ArticleService.Update:input_type -> services.Article
	0,  // 21: services.ArticleService.Delete:input_type -> services.Article
	1,  // 22: services.ArticleService.Get:input_type -> services.ArticleWhere
	1,  // 23: services.ArticleService.Search:input_type -> services.ArticleWhere
	1,  // 24: services.ArticleService.List:input_type -> services.ArticleWhere
	0,  // 25: services.ArticleService.GetPage:input_type -> services.Article
	1,  // 26: services.ArticleService.PageList:input_type -> services.ArticleWhere
	1,  // 27: services.FrontArticleService.Get:input_type -> services.ArticleWhere
	1,  // 28: services.FrontArticleService.Search:input_type -> services.ArticleWhere
	1,  // 29: services.FrontArticleService.List:input_type -> services.ArticleWhere
	0,  // 30: services.FrontArticleService.GetPage:input_type -> services.Article
	1,  // 31: services.FrontArticleService.PageList:input_type -> services.ArticleWhere
	1,  // 32: services.FrontArticleService.ListByCatSlugs:input_type -> services.ArticleWhere
	3,  // 33: services.ArticleService.Create:output_type -> services.ArticleResponse
	3,  // 34: services.ArticleService.Update:output_type -> services.ArticleResponse
	3,  // 35: services.ArticleService.Delete:output_type -> services.ArticleResponse
	3,  // 36: services.ArticleService.Get:output_type -> services.ArticleResponse
	3,  // 37: services.ArticleService.Search:output_type -> services.ArticleResponse
	3,  // 38: services.ArticleService.List:output_type -> services.ArticleResponse
	3,  // 39: services.ArticleService.GetPage:output_type -> services.ArticleResponse
	3,  // 40: services.ArticleService.PageList:output_type -> services.ArticleResponse
	3,  // 41: services.FrontArticleService.Get:output_type -> services.ArticleResponse
	3,  // 42: services.FrontArticleService.Search:output_type -> services.ArticleResponse
	3,  // 43: services.FrontArticleService.List:output_type -> services.ArticleResponse
	3,  // 44: services.FrontArticleService.GetPage:output_type -> services.ArticleResponse
	3,  // 45: services.FrontArticleService.PageList:output_type -> services.ArticleResponse
	4,  // 46: services.FrontArticleService.ListByCatSlugs:output_type -> services.CatSlugsResponse
	33, // [33:47] is the sub-list for method output_type
	19, // [19:33] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_articleService_proto_init() }
func file_articleService_proto_init() {
	if File_articleService_proto != nil {
		return
	}
	file_catService_proto_init()
	file_tagService_proto_init()
	file_articleMetaService_proto_init()
	file_articleGalleryService_proto_init()
	file_sheetWriterService_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_articleService_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Article); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_articleService_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArticleWhere); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_articleService_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CatSlugs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_articleService_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArticleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_articleService_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CatSlugsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_articleService_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_articleService_proto_goTypes,
		DependencyIndexes: file_articleService_proto_depIdxs,
		MessageInfos:      file_articleService_proto_msgTypes,
	}.Build()
	File_articleService_proto = out.File
	file_articleService_proto_rawDesc = nil
	file_articleService_proto_goTypes = nil
	file_articleService_proto_depIdxs = nil
}
