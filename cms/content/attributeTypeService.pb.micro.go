// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: attributeTypeService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for AttributeTypeService service

func NewAttributeTypeServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for AttributeTypeService service

type AttributeTypeService interface {
	Create(ctx context.Context, in *AttributeType, opts ...client.CallOption) (*AttributeTypeResponse, error)
	Update(ctx context.Context, in *AttributeType, opts ...client.CallOption) (*AttributeTypeResponse, error)
	Delete(ctx context.Context, in *AttributeTypeWhere, opts ...client.CallOption) (*AttributeTypeResponse, error)
	Get(ctx context.Context, in *AttributeTypeWhere, opts ...client.CallOption) (*AttributeTypeResponse, error)
	Search(ctx context.Context, in *AttributeTypeWhere, opts ...client.CallOption) (*AttributeTypeResponse, error)
	List(ctx context.Context, in *AttributeTypeWhere, opts ...client.CallOption) (*AttributeTypeResponse, error)
}

type attributeTypeService struct {
	c    client.Client
	name string
}

func NewAttributeTypeService(name string, c client.Client) AttributeTypeService {
	return &attributeTypeService{
		c:    c,
		name: name,
	}
}

func (c *attributeTypeService) Create(ctx context.Context, in *AttributeType, opts ...client.CallOption) (*AttributeTypeResponse, error) {
	req := c.c.NewRequest(c.name, "AttributeTypeService.Create", in)
	out := new(AttributeTypeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attributeTypeService) Update(ctx context.Context, in *AttributeType, opts ...client.CallOption) (*AttributeTypeResponse, error) {
	req := c.c.NewRequest(c.name, "AttributeTypeService.Update", in)
	out := new(AttributeTypeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attributeTypeService) Delete(ctx context.Context, in *AttributeTypeWhere, opts ...client.CallOption) (*AttributeTypeResponse, error) {
	req := c.c.NewRequest(c.name, "AttributeTypeService.Delete", in)
	out := new(AttributeTypeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attributeTypeService) Get(ctx context.Context, in *AttributeTypeWhere, opts ...client.CallOption) (*AttributeTypeResponse, error) {
	req := c.c.NewRequest(c.name, "AttributeTypeService.Get", in)
	out := new(AttributeTypeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attributeTypeService) Search(ctx context.Context, in *AttributeTypeWhere, opts ...client.CallOption) (*AttributeTypeResponse, error) {
	req := c.c.NewRequest(c.name, "AttributeTypeService.Search", in)
	out := new(AttributeTypeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attributeTypeService) List(ctx context.Context, in *AttributeTypeWhere, opts ...client.CallOption) (*AttributeTypeResponse, error) {
	req := c.c.NewRequest(c.name, "AttributeTypeService.List", in)
	out := new(AttributeTypeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AttributeTypeService service

type AttributeTypeServiceHandler interface {
	Create(context.Context, *AttributeType, *AttributeTypeResponse) error
	Update(context.Context, *AttributeType, *AttributeTypeResponse) error
	Delete(context.Context, *AttributeTypeWhere, *AttributeTypeResponse) error
	Get(context.Context, *AttributeTypeWhere, *AttributeTypeResponse) error
	Search(context.Context, *AttributeTypeWhere, *AttributeTypeResponse) error
	List(context.Context, *AttributeTypeWhere, *AttributeTypeResponse) error
}

func RegisterAttributeTypeServiceHandler(s server.Server, hdlr AttributeTypeServiceHandler, opts ...server.HandlerOption) error {
	type attributeTypeService interface {
		Create(ctx context.Context, in *AttributeType, out *AttributeTypeResponse) error
		Update(ctx context.Context, in *AttributeType, out *AttributeTypeResponse) error
		Delete(ctx context.Context, in *AttributeTypeWhere, out *AttributeTypeResponse) error
		Get(ctx context.Context, in *AttributeTypeWhere, out *AttributeTypeResponse) error
		Search(ctx context.Context, in *AttributeTypeWhere, out *AttributeTypeResponse) error
		List(ctx context.Context, in *AttributeTypeWhere, out *AttributeTypeResponse) error
	}
	type AttributeTypeService struct {
		attributeTypeService
	}
	h := &attributeTypeServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&AttributeTypeService{h}, opts...))
}

type attributeTypeServiceHandler struct {
	AttributeTypeServiceHandler
}

func (h *attributeTypeServiceHandler) Create(ctx context.Context, in *AttributeType, out *AttributeTypeResponse) error {
	return h.AttributeTypeServiceHandler.Create(ctx, in, out)
}

func (h *attributeTypeServiceHandler) Update(ctx context.Context, in *AttributeType, out *AttributeTypeResponse) error {
	return h.AttributeTypeServiceHandler.Update(ctx, in, out)
}

func (h *attributeTypeServiceHandler) Delete(ctx context.Context, in *AttributeTypeWhere, out *AttributeTypeResponse) error {
	return h.AttributeTypeServiceHandler.Delete(ctx, in, out)
}

func (h *attributeTypeServiceHandler) Get(ctx context.Context, in *AttributeTypeWhere, out *AttributeTypeResponse) error {
	return h.AttributeTypeServiceHandler.Get(ctx, in, out)
}

func (h *attributeTypeServiceHandler) Search(ctx context.Context, in *AttributeTypeWhere, out *AttributeTypeResponse) error {
	return h.AttributeTypeServiceHandler.Search(ctx, in, out)
}

func (h *attributeTypeServiceHandler) List(ctx context.Context, in *AttributeTypeWhere, out *AttributeTypeResponse) error {
	return h.AttributeTypeServiceHandler.List(ctx, in, out)
}
