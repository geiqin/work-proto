// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: sheetWriterService.proto

package services

import (
	common "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type SheetAttrQueries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrId      int64  `protobuf:"varint,1,opt,name=attr_id,json=attrId,proto3" json:"attr_id"`               // 字段ID
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`                                  // 字段名
	QueryMethod string `protobuf:"bytes,3,opt,name=query_method,json=queryMethod,proto3" json:"query_method"` // 查询方式
	Value       string `protobuf:"bytes,4,opt,name=value,proto3" json:"value"`                                // 值1
	Value2      string `protobuf:"bytes,5,opt,name=value2,proto3" json:"value2"`                              // 值2【区间查询使用】
}

func (x *SheetAttrQueries) Reset() {
	*x = SheetAttrQueries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sheetWriterService_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SheetAttrQueries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SheetAttrQueries) ProtoMessage() {}

func (x *SheetAttrQueries) ProtoReflect() protoreflect.Message {
	mi := &file_sheetWriterService_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SheetAttrQueries.ProtoReflect.Descriptor instead.
func (*SheetAttrQueries) Descriptor() ([]byte, []int) {
	return file_sheetWriterService_proto_rawDescGZIP(), []int{0}
}

func (x *SheetAttrQueries) GetAttrId() int64 {
	if x != nil {
		return x.AttrId
	}
	return 0
}

func (x *SheetAttrQueries) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SheetAttrQueries) GetQueryMethod() string {
	if x != nil {
		return x.QueryMethod
	}
	return ""
}

func (x *SheetAttrQueries) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *SheetAttrQueries) GetValue2() string {
	if x != nil {
		return x.Value2
	}
	return ""
}

type SheetWriterWhere struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Paged    int32 `protobuf:"varint,1,opt,name=paged,proto3" json:"paged"`
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size"`
	Id       int64 `protobuf:"varint,3,opt,name=id,proto3" json:"id"`
	// @inject_tag: gorm:"-"
	Ids        []int64 `protobuf:"varint,4,rep,packed,name=ids,proto3" json:"ids" gorm:"-"`
	CustomerId int64   `protobuf:"varint,5,opt,name=customer_id,json=customerId,proto3" json:"customer_id"`
	SheetId    int32   `protobuf:"varint,6,opt,name=sheet_id,json=sheetId,proto3" json:"sheet_id"`
	// @inject_tag: gorm:"-"
	AttrQueries []*SheetAttrQueries `protobuf:"bytes,7,rep,name=attr_queries,json=attrQueries,proto3" json:"attr_queries" gorm:"-"`
}

func (x *SheetWriterWhere) Reset() {
	*x = SheetWriterWhere{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sheetWriterService_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SheetWriterWhere) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SheetWriterWhere) ProtoMessage() {}

func (x *SheetWriterWhere) ProtoReflect() protoreflect.Message {
	mi := &file_sheetWriterService_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SheetWriterWhere.ProtoReflect.Descriptor instead.
func (*SheetWriterWhere) Descriptor() ([]byte, []int) {
	return file_sheetWriterService_proto_rawDescGZIP(), []int{1}
}

func (x *SheetWriterWhere) GetPaged() int32 {
	if x != nil {
		return x.Paged
	}
	return 0
}

func (x *SheetWriterWhere) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *SheetWriterWhere) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SheetWriterWhere) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *SheetWriterWhere) GetCustomerId() int64 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

func (x *SheetWriterWhere) GetSheetId() int32 {
	if x != nil {
		return x.SheetId
	}
	return 0
}

func (x *SheetWriterWhere) GetAttrQueries() []*SheetAttrQueries {
	if x != nil {
		return x.AttrQueries
	}
	return nil
}

type SheetWriter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64        `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	SheetId    int32        `protobuf:"varint,2,opt,name=sheet_id,json=sheetId,proto3" json:"sheet_id"`
	CustomerId int64        `protobuf:"varint,3,opt,name=customer_id,json=customerId,proto3" json:"customer_id"`
	Source     string       `protobuf:"bytes,4,opt,name=source,proto3" json:"source"`
	CreatedAt  string       `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt  string       `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	SheetData  []*SheetData `protobuf:"bytes,7,rep,name=sheet_data,json=sheetData,proto3" json:"sheet_data"`
	// @inject_tag: gorm:"-"
	Customer *Customer `protobuf:"bytes,8,opt,name=customer,proto3" json:"customer" gorm:"-"`
}

func (x *SheetWriter) Reset() {
	*x = SheetWriter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sheetWriterService_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SheetWriter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SheetWriter) ProtoMessage() {}

func (x *SheetWriter) ProtoReflect() protoreflect.Message {
	mi := &file_sheetWriterService_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SheetWriter.ProtoReflect.Descriptor instead.
func (*SheetWriter) Descriptor() ([]byte, []int) {
	return file_sheetWriterService_proto_rawDescGZIP(), []int{2}
}

func (x *SheetWriter) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SheetWriter) GetSheetId() int32 {
	if x != nil {
		return x.SheetId
	}
	return 0
}

func (x *SheetWriter) GetCustomerId() int64 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

func (x *SheetWriter) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *SheetWriter) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *SheetWriter) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *SheetWriter) GetSheetData() []*SheetData {
	if x != nil {
		return x.SheetData
	}
	return nil
}

func (x *SheetWriter) GetCustomer() *Customer {
	if x != nil {
		return x.Customer
	}
	return nil
}

type SheetWriterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error  *common.Error  `protobuf:"bytes,1,opt,name=error,proto3" json:"error"`
	Info   *common.Info   `protobuf:"bytes,2,opt,name=info,proto3" json:"info"`
	Pager  *common.Pager  `protobuf:"bytes,3,opt,name=pager,proto3" json:"pager"`
	Entity *SheetWriter   `protobuf:"bytes,4,opt,name=entity,proto3" json:"entity"`
	Items  []*SheetWriter `protobuf:"bytes,5,rep,name=items,proto3" json:"items"`
}

func (x *SheetWriterResponse) Reset() {
	*x = SheetWriterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sheetWriterService_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SheetWriterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SheetWriterResponse) ProtoMessage() {}

func (x *SheetWriterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sheetWriterService_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SheetWriterResponse.ProtoReflect.Descriptor instead.
func (*SheetWriterResponse) Descriptor() ([]byte, []int) {
	return file_sheetWriterService_proto_rawDescGZIP(), []int{3}
}

func (x *SheetWriterResponse) GetError() *common.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *SheetWriterResponse) GetInfo() *common.Info {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *SheetWriterResponse) GetPager() *common.Pager {
	if x != nil {
		return x.Pager
	}
	return nil
}

func (x *SheetWriterResponse) GetEntity() *SheetWriter {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *SheetWriterResponse) GetItems() []*SheetWriter {
	if x != nil {
		return x.Items
	}
	return nil
}

var File_sheetWriterService_proto protoreflect.FileDescriptor

var file_sheetWriterService_proto_rawDesc = []byte{
	0x0a, 0x18, 0x73, 0x68, 0x65, 0x65, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x1a, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x73, 0x68, 0x65, 0x65, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x19, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x73, 0x68, 0x65, 0x65,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x90,
	0x01, 0x0a, 0x10, 0x53, 0x68, 0x65, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x51, 0x75, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x74, 0x74, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x32, 0x22, 0xe2, 0x01, 0x0a, 0x10, 0x53, 0x68, 0x65, 0x65, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x72, 0x57, 0x68, 0x65, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x73, 0x68, 0x65, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x73, 0x68, 0x65, 0x65, 0x74, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x61, 0x74, 0x74, 0x72, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x68, 0x65, 0x65, 0x74, 0x41, 0x74,
	0x74, 0x72, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x72, 0x51,
	0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x22, 0x93, 0x02, 0x0a, 0x0b, 0x53, 0x68, 0x65, 0x65, 0x74,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x68, 0x65, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x68, 0x65, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x32, 0x0a, 0x0a, 0x73, 0x68, 0x65, 0x65,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x68, 0x65, 0x65, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x09, 0x73, 0x68, 0x65, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x08,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x22, 0xdd, 0x01, 0x0a,
	0x13, 0x53, 0x68, 0x65, 0x65, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x04, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x05, 0x70,
	0x61, 0x67, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x72, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x72,
	0x12, 0x2d, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x68, 0x65, 0x65,
	0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x2b, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x68, 0x65, 0x65, 0x74, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x72, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x32, 0xaa, 0x03, 0x0a,
	0x12, 0x53, 0x68, 0x65, 0x65, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x15, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x68, 0x65, 0x65, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x72, 0x1a, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x68, 0x65,
	0x65, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x45, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x1a, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x68, 0x65, 0x65, 0x74, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x72, 0x57, 0x68, 0x65, 0x72, 0x65, 0x1a, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x53, 0x68, 0x65, 0x65, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x04, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x68, 0x65,
	0x65, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x57, 0x68, 0x65, 0x72, 0x65, 0x1a, 0x1d, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x68, 0x65, 0x65, 0x74, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x40,
	0x0a, 0x06, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x12, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x53, 0x68, 0x65, 0x65, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x1a,
	0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x68, 0x65, 0x65, 0x74,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x40, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x15, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x68, 0x65, 0x65, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x72, 0x1a, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x68, 0x65,
	0x65, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x45, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1a, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x68, 0x65, 0x65, 0x74, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x72, 0x57, 0x68, 0x65, 0x72, 0x65, 0x1a, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x53, 0x68, 0x65, 0x65, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xe8, 0x03, 0x0a, 0x14, 0x4d, 0x79,
	0x53, 0x68, 0x65, 0x65, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x40, 0x0a, 0x06, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x12, 0x15, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x68, 0x65, 0x65, 0x74, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x72, 0x1a, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53,
	0x68, 0x65, 0x65, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x15,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x68, 0x65, 0x65, 0x74, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x72, 0x1a, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x53, 0x68, 0x65, 0x65, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x12, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x68, 0x65, 0x65,
	0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x57, 0x68, 0x65, 0x72, 0x65, 0x1a, 0x1d, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x68, 0x65, 0x65, 0x74, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a,
	0x03, 0x47, 0x65, 0x74, 0x12, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x53, 0x68, 0x65, 0x65, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x1a, 0x1d, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x68, 0x65, 0x65, 0x74, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x06,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x53, 0x68, 0x65, 0x65, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x57, 0x68, 0x65,
	0x72, 0x65, 0x1a, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x68,
	0x65, 0x65, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x68, 0x65, 0x65, 0x74, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x72, 0x57, 0x68, 0x65, 0x72, 0x65, 0x1a, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x53, 0x68, 0x65, 0x65, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x46,
	0x6f, 0x72, 0x6d, 0x12, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53,
	0x68, 0x65, 0x65, 0x74, 0x57, 0x68, 0x65, 0x72, 0x65, 0x1a, 0x17, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x68, 0x65, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x32, 0x60, 0x0a, 0x17, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x53, 0x68, 0x65,
	0x65, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x45, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x68, 0x65, 0x65, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72,
	0x57, 0x68, 0x65, 0x72, 0x65, 0x1a, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x53, 0x68, 0x65, 0x65, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x3b, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sheetWriterService_proto_rawDescOnce sync.Once
	file_sheetWriterService_proto_rawDescData = file_sheetWriterService_proto_rawDesc
)

func file_sheetWriterService_proto_rawDescGZIP() []byte {
	file_sheetWriterService_proto_rawDescOnce.Do(func() {
		file_sheetWriterService_proto_rawDescData = protoimpl.X.CompressGZIP(file_sheetWriterService_proto_rawDescData)
	})
	return file_sheetWriterService_proto_rawDescData
}

var file_sheetWriterService_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_sheetWriterService_proto_goTypes = []interface{}{
	(*SheetAttrQueries)(nil),    // 0: services.SheetAttrQueries
	(*SheetWriterWhere)(nil),    // 1: services.SheetWriterWhere
	(*SheetWriter)(nil),         // 2: services.SheetWriter
	(*SheetWriterResponse)(nil), // 3: services.SheetWriterResponse
	(*SheetData)(nil),           // 4: services.SheetData
	(*Customer)(nil),            // 5: services.Customer
	(*common.Error)(nil),        // 6: common.Error
	(*common.Info)(nil),         // 7: common.Info
	(*common.Pager)(nil),        // 8: common.Pager
	(*SheetWhere)(nil),          // 9: services.SheetWhere
	(*SheetResponse)(nil),       // 10: services.SheetResponse
}
var file_sheetWriterService_proto_depIdxs = []int32{
	0,  // 0: services.SheetWriterWhere.attr_queries:type_name -> services.SheetAttrQueries
	4,  // 1: services.SheetWriter.sheet_data:type_name -> services.SheetData
	5,  // 2: services.SheetWriter.customer:type_name -> services.Customer
	6,  // 3: services.SheetWriterResponse.error:type_name -> common.Error
	7,  // 4: services.SheetWriterResponse.info:type_name -> common.Info
	8,  // 5: services.SheetWriterResponse.pager:type_name -> common.Pager
	2,  // 6: services.SheetWriterResponse.entity:type_name -> services.SheetWriter
	2,  // 7: services.SheetWriterResponse.items:type_name -> services.SheetWriter
	2,  // 8: services.SheetWriterService.Get:input_type -> services.SheetWriter
	1,  // 9: services.SheetWriterService.Search:input_type -> services.SheetWriterWhere
	1,  // 10: services.SheetWriterService.List:input_type -> services.SheetWriterWhere
	2,  // 11: services.SheetWriterService.Submit:input_type -> services.SheetWriter
	2,  // 12: services.SheetWriterService.Update:input_type -> services.SheetWriter
	1,  // 13: services.SheetWriterService.Delete:input_type -> services.SheetWriterWhere
	2,  // 14: services.MySheetWriterService.Submit:input_type -> services.SheetWriter
	2,  // 15: services.MySheetWriterService.Update:input_type -> services.SheetWriter
	1,  // 16: services.MySheetWriterService.Delete:input_type -> services.SheetWriterWhere
	2,  // 17: services.MySheetWriterService.Get:input_type -> services.SheetWriter
	1,  // 18: services.MySheetWriterService.Search:input_type -> services.SheetWriterWhere
	1,  // 19: services.MySheetWriterService.List:input_type -> services.SheetWriterWhere
	9,  // 20: services.MySheetWriterService.GetForm:input_type -> services.SheetWhere
	1,  // 21: services.FrontSheetWriterService.Search:input_type -> services.SheetWriterWhere
	3,  // 22: services.SheetWriterService.Get:output_type -> services.SheetWriterResponse
	3,  // 23: services.SheetWriterService.Search:output_type -> services.SheetWriterResponse
	3,  // 24: services.SheetWriterService.List:output_type -> services.SheetWriterResponse
	3,  // 25: services.SheetWriterService.Submit:output_type -> services.SheetWriterResponse
	3,  // 26: services.SheetWriterService.Update:output_type -> services.SheetWriterResponse
	3,  // 27: services.SheetWriterService.Delete:output_type -> services.SheetWriterResponse
	3,  // 28: services.MySheetWriterService.Submit:output_type -> services.SheetWriterResponse
	3,  // 29: services.MySheetWriterService.Update:output_type -> services.SheetWriterResponse
	3,  // 30: services.MySheetWriterService.Delete:output_type -> services.SheetWriterResponse
	3,  // 31: services.MySheetWriterService.Get:output_type -> services.SheetWriterResponse
	3,  // 32: services.MySheetWriterService.Search:output_type -> services.SheetWriterResponse
	3,  // 33: services.MySheetWriterService.List:output_type -> services.SheetWriterResponse
	10, // 34: services.MySheetWriterService.GetForm:output_type -> services.SheetResponse
	3,  // 35: services.FrontSheetWriterService.Search:output_type -> services.SheetWriterResponse
	22, // [22:36] is the sub-list for method output_type
	8,  // [8:22] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_sheetWriterService_proto_init() }
func file_sheetWriterService_proto_init() {
	if File_sheetWriterService_proto != nil {
		return
	}
	file_sheetDataService_proto_init()
	file_customerInfoService_proto_init()
	file_sheetService_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_sheetWriterService_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SheetAttrQueries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sheetWriterService_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SheetWriterWhere); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sheetWriterService_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SheetWriter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sheetWriterService_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SheetWriterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sheetWriterService_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_sheetWriterService_proto_goTypes,
		DependencyIndexes: file_sheetWriterService_proto_depIdxs,
		MessageInfos:      file_sheetWriterService_proto_msgTypes,
	}.Build()
	File_sheetWriterService_proto = out.File
	file_sheetWriterService_proto_rawDesc = nil
	file_sheetWriterService_proto_goTypes = nil
	file_sheetWriterService_proto_depIdxs = nil
}
