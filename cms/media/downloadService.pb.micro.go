// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: downloadService.proto

package services

import (
	_ "github.com/geiqin/micro-kit/protobuf/common"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for DownloadService service

func NewDownloadServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for DownloadService service

type DownloadService interface {
	BuildStart(ctx context.Context, in *Download, opts ...client.CallOption) (*DownloadResponse, error)
	BuildEnd(ctx context.Context, in *Download, opts ...client.CallOption) (*DownloadResponse, error)
	Create(ctx context.Context, in *Download, opts ...client.CallOption) (*DownloadResponse, error)
	Update(ctx context.Context, in *Download, opts ...client.CallOption) (*DownloadResponse, error)
	Delete(ctx context.Context, in *Download, opts ...client.CallOption) (*DownloadResponse, error)
	Get(ctx context.Context, in *Download, opts ...client.CallOption) (*DownloadResponse, error)
	Search(ctx context.Context, in *DownloadWhere, opts ...client.CallOption) (*DownloadResponse, error)
}

type downloadService struct {
	c    client.Client
	name string
}

func NewDownloadService(name string, c client.Client) DownloadService {
	return &downloadService{
		c:    c,
		name: name,
	}
}

func (c *downloadService) BuildStart(ctx context.Context, in *Download, opts ...client.CallOption) (*DownloadResponse, error) {
	req := c.c.NewRequest(c.name, "DownloadService.BuildStart", in)
	out := new(DownloadResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *downloadService) BuildEnd(ctx context.Context, in *Download, opts ...client.CallOption) (*DownloadResponse, error) {
	req := c.c.NewRequest(c.name, "DownloadService.BuildEnd", in)
	out := new(DownloadResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *downloadService) Create(ctx context.Context, in *Download, opts ...client.CallOption) (*DownloadResponse, error) {
	req := c.c.NewRequest(c.name, "DownloadService.Create", in)
	out := new(DownloadResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *downloadService) Update(ctx context.Context, in *Download, opts ...client.CallOption) (*DownloadResponse, error) {
	req := c.c.NewRequest(c.name, "DownloadService.Update", in)
	out := new(DownloadResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *downloadService) Delete(ctx context.Context, in *Download, opts ...client.CallOption) (*DownloadResponse, error) {
	req := c.c.NewRequest(c.name, "DownloadService.Delete", in)
	out := new(DownloadResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *downloadService) Get(ctx context.Context, in *Download, opts ...client.CallOption) (*DownloadResponse, error) {
	req := c.c.NewRequest(c.name, "DownloadService.Get", in)
	out := new(DownloadResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *downloadService) Search(ctx context.Context, in *DownloadWhere, opts ...client.CallOption) (*DownloadResponse, error) {
	req := c.c.NewRequest(c.name, "DownloadService.Search", in)
	out := new(DownloadResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DownloadService service

type DownloadServiceHandler interface {
	BuildStart(context.Context, *Download, *DownloadResponse) error
	BuildEnd(context.Context, *Download, *DownloadResponse) error
	Create(context.Context, *Download, *DownloadResponse) error
	Update(context.Context, *Download, *DownloadResponse) error
	Delete(context.Context, *Download, *DownloadResponse) error
	Get(context.Context, *Download, *DownloadResponse) error
	Search(context.Context, *DownloadWhere, *DownloadResponse) error
}

func RegisterDownloadServiceHandler(s server.Server, hdlr DownloadServiceHandler, opts ...server.HandlerOption) error {
	type downloadService interface {
		BuildStart(ctx context.Context, in *Download, out *DownloadResponse) error
		BuildEnd(ctx context.Context, in *Download, out *DownloadResponse) error
		Create(ctx context.Context, in *Download, out *DownloadResponse) error
		Update(ctx context.Context, in *Download, out *DownloadResponse) error
		Delete(ctx context.Context, in *Download, out *DownloadResponse) error
		Get(ctx context.Context, in *Download, out *DownloadResponse) error
		Search(ctx context.Context, in *DownloadWhere, out *DownloadResponse) error
	}
	type DownloadService struct {
		downloadService
	}
	h := &downloadServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&DownloadService{h}, opts...))
}

type downloadServiceHandler struct {
	DownloadServiceHandler
}

func (h *downloadServiceHandler) BuildStart(ctx context.Context, in *Download, out *DownloadResponse) error {
	return h.DownloadServiceHandler.BuildStart(ctx, in, out)
}

func (h *downloadServiceHandler) BuildEnd(ctx context.Context, in *Download, out *DownloadResponse) error {
	return h.DownloadServiceHandler.BuildEnd(ctx, in, out)
}

func (h *downloadServiceHandler) Create(ctx context.Context, in *Download, out *DownloadResponse) error {
	return h.DownloadServiceHandler.Create(ctx, in, out)
}

func (h *downloadServiceHandler) Update(ctx context.Context, in *Download, out *DownloadResponse) error {
	return h.DownloadServiceHandler.Update(ctx, in, out)
}

func (h *downloadServiceHandler) Delete(ctx context.Context, in *Download, out *DownloadResponse) error {
	return h.DownloadServiceHandler.Delete(ctx, in, out)
}

func (h *downloadServiceHandler) Get(ctx context.Context, in *Download, out *DownloadResponse) error {
	return h.DownloadServiceHandler.Get(ctx, in, out)
}

func (h *downloadServiceHandler) Search(ctx context.Context, in *DownloadWhere, out *DownloadResponse) error {
	return h.DownloadServiceHandler.Search(ctx, in, out)
}
