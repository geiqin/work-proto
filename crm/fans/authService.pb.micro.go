// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: authService.proto

package services

import (
	fmt "fmt"
	common "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for AuthService service

func NewAuthServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for AuthService service

type AuthService interface {
	//微信小程序登录
	WxMini(ctx context.Context, in *WxMiniLogin, opts ...client.CallOption) (*common.TokenResponse, error)
	//支付宝登陆
	Alipay(ctx context.Context, in *AlipayLogin, opts ...client.CallOption) (*common.TokenResponse, error)
}

type authService struct {
	c    client.Client
	name string
}

func NewAuthService(name string, c client.Client) AuthService {
	return &authService{
		c:    c,
		name: name,
	}
}

func (c *authService) WxMini(ctx context.Context, in *WxMiniLogin, opts ...client.CallOption) (*common.TokenResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.WxMini", in)
	out := new(common.TokenResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) Alipay(ctx context.Context, in *AlipayLogin, opts ...client.CallOption) (*common.TokenResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.Alipay", in)
	out := new(common.TokenResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AuthService service

type AuthServiceHandler interface {
	//微信小程序登录
	WxMini(context.Context, *WxMiniLogin, *common.TokenResponse) error
	//支付宝登陆
	Alipay(context.Context, *AlipayLogin, *common.TokenResponse) error
}

func RegisterAuthServiceHandler(s server.Server, hdlr AuthServiceHandler, opts ...server.HandlerOption) error {
	type authService interface {
		WxMini(ctx context.Context, in *WxMiniLogin, out *common.TokenResponse) error
		Alipay(ctx context.Context, in *AlipayLogin, out *common.TokenResponse) error
	}
	type AuthService struct {
		authService
	}
	h := &authServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&AuthService{h}, opts...))
}

type authServiceHandler struct {
	AuthServiceHandler
}

func (h *authServiceHandler) WxMini(ctx context.Context, in *WxMiniLogin, out *common.TokenResponse) error {
	return h.AuthServiceHandler.WxMini(ctx, in, out)
}

func (h *authServiceHandler) Alipay(ctx context.Context, in *AlipayLogin, out *common.TokenResponse) error {
	return h.AuthServiceHandler.Alipay(ctx, in, out)
}
