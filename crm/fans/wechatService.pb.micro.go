// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: wechatService.proto

package services

import (
	fmt "fmt"
	common "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for MyWechatService service

func NewMyWechatServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for MyWechatService service

type MyWechatService interface {
	//记录推荐人
	Recommender(ctx context.Context, in *Wechat, opts ...client.CallOption) (*common.TokenResponse, error)
	//记录分享痕迹
	WriteShare(ctx context.Context, in *Wechat, opts ...client.CallOption) (*common.TokenResponse, error)
	//记录追踪痕迹
	WriteTrack(ctx context.Context, in *Wechat, opts ...client.CallOption) (*WechatResponse, error)
	//拉取绑定手机号码
	PullMobile(ctx context.Context, in *Wechat, opts ...client.CallOption) (*WechatResponse, error)
}

type myWechatService struct {
	c    client.Client
	name string
}

func NewMyWechatService(name string, c client.Client) MyWechatService {
	return &myWechatService{
		c:    c,
		name: name,
	}
}

func (c *myWechatService) Recommender(ctx context.Context, in *Wechat, opts ...client.CallOption) (*common.TokenResponse, error) {
	req := c.c.NewRequest(c.name, "MyWechatService.Recommender", in)
	out := new(common.TokenResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myWechatService) WriteShare(ctx context.Context, in *Wechat, opts ...client.CallOption) (*common.TokenResponse, error) {
	req := c.c.NewRequest(c.name, "MyWechatService.WriteShare", in)
	out := new(common.TokenResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myWechatService) WriteTrack(ctx context.Context, in *Wechat, opts ...client.CallOption) (*WechatResponse, error) {
	req := c.c.NewRequest(c.name, "MyWechatService.WriteTrack", in)
	out := new(WechatResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myWechatService) PullMobile(ctx context.Context, in *Wechat, opts ...client.CallOption) (*WechatResponse, error) {
	req := c.c.NewRequest(c.name, "MyWechatService.PullMobile", in)
	out := new(WechatResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MyWechatService service

type MyWechatServiceHandler interface {
	//记录推荐人
	Recommender(context.Context, *Wechat, *common.TokenResponse) error
	//记录分享痕迹
	WriteShare(context.Context, *Wechat, *common.TokenResponse) error
	//记录追踪痕迹
	WriteTrack(context.Context, *Wechat, *WechatResponse) error
	//拉取绑定手机号码
	PullMobile(context.Context, *Wechat, *WechatResponse) error
}

func RegisterMyWechatServiceHandler(s server.Server, hdlr MyWechatServiceHandler, opts ...server.HandlerOption) error {
	type myWechatService interface {
		Recommender(ctx context.Context, in *Wechat, out *common.TokenResponse) error
		WriteShare(ctx context.Context, in *Wechat, out *common.TokenResponse) error
		WriteTrack(ctx context.Context, in *Wechat, out *WechatResponse) error
		PullMobile(ctx context.Context, in *Wechat, out *WechatResponse) error
	}
	type MyWechatService struct {
		myWechatService
	}
	h := &myWechatServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&MyWechatService{h}, opts...))
}

type myWechatServiceHandler struct {
	MyWechatServiceHandler
}

func (h *myWechatServiceHandler) Recommender(ctx context.Context, in *Wechat, out *common.TokenResponse) error {
	return h.MyWechatServiceHandler.Recommender(ctx, in, out)
}

func (h *myWechatServiceHandler) WriteShare(ctx context.Context, in *Wechat, out *common.TokenResponse) error {
	return h.MyWechatServiceHandler.WriteShare(ctx, in, out)
}

func (h *myWechatServiceHandler) WriteTrack(ctx context.Context, in *Wechat, out *WechatResponse) error {
	return h.MyWechatServiceHandler.WriteTrack(ctx, in, out)
}

func (h *myWechatServiceHandler) PullMobile(ctx context.Context, in *Wechat, out *WechatResponse) error {
	return h.MyWechatServiceHandler.PullMobile(ctx, in, out)
}

// Api Endpoints for WechatService service

func NewWechatServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for WechatService service

type WechatService interface {
	//生成二维码（公众号二维码和小程序码，支持批量生成）
	MakeCode(ctx context.Context, in *Wechat, opts ...client.CallOption) (*WechatResponse, error)
	//二维码查询
	CodeSearch(ctx context.Context, in *Wechat, opts ...client.CallOption) (*WechatResponse, error)
	//跟踪痕迹查询
	TrackSearch(ctx context.Context, in *FanTrack, opts ...client.CallOption) (*FanTrackResponse, error)
	//分享痕迹查询
	ShareSearch(ctx context.Context, in *FanShare, opts ...client.CallOption) (*FanShareResponse, error)
}

type wechatService struct {
	c    client.Client
	name string
}

func NewWechatService(name string, c client.Client) WechatService {
	return &wechatService{
		c:    c,
		name: name,
	}
}

func (c *wechatService) MakeCode(ctx context.Context, in *Wechat, opts ...client.CallOption) (*WechatResponse, error) {
	req := c.c.NewRequest(c.name, "WechatService.MakeCode", in)
	out := new(WechatResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wechatService) CodeSearch(ctx context.Context, in *Wechat, opts ...client.CallOption) (*WechatResponse, error) {
	req := c.c.NewRequest(c.name, "WechatService.CodeSearch", in)
	out := new(WechatResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wechatService) TrackSearch(ctx context.Context, in *FanTrack, opts ...client.CallOption) (*FanTrackResponse, error) {
	req := c.c.NewRequest(c.name, "WechatService.TrackSearch", in)
	out := new(FanTrackResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wechatService) ShareSearch(ctx context.Context, in *FanShare, opts ...client.CallOption) (*FanShareResponse, error) {
	req := c.c.NewRequest(c.name, "WechatService.ShareSearch", in)
	out := new(FanShareResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for WechatService service

type WechatServiceHandler interface {
	//生成二维码（公众号二维码和小程序码，支持批量生成）
	MakeCode(context.Context, *Wechat, *WechatResponse) error
	//二维码查询
	CodeSearch(context.Context, *Wechat, *WechatResponse) error
	//跟踪痕迹查询
	TrackSearch(context.Context, *FanTrack, *FanTrackResponse) error
	//分享痕迹查询
	ShareSearch(context.Context, *FanShare, *FanShareResponse) error
}

func RegisterWechatServiceHandler(s server.Server, hdlr WechatServiceHandler, opts ...server.HandlerOption) error {
	type wechatService interface {
		MakeCode(ctx context.Context, in *Wechat, out *WechatResponse) error
		CodeSearch(ctx context.Context, in *Wechat, out *WechatResponse) error
		TrackSearch(ctx context.Context, in *FanTrack, out *FanTrackResponse) error
		ShareSearch(ctx context.Context, in *FanShare, out *FanShareResponse) error
	}
	type WechatService struct {
		wechatService
	}
	h := &wechatServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&WechatService{h}, opts...))
}

type wechatServiceHandler struct {
	WechatServiceHandler
}

func (h *wechatServiceHandler) MakeCode(ctx context.Context, in *Wechat, out *WechatResponse) error {
	return h.WechatServiceHandler.MakeCode(ctx, in, out)
}

func (h *wechatServiceHandler) CodeSearch(ctx context.Context, in *Wechat, out *WechatResponse) error {
	return h.WechatServiceHandler.CodeSearch(ctx, in, out)
}

func (h *wechatServiceHandler) TrackSearch(ctx context.Context, in *FanTrack, out *FanTrackResponse) error {
	return h.WechatServiceHandler.TrackSearch(ctx, in, out)
}

func (h *wechatServiceHandler) ShareSearch(ctx context.Context, in *FanShare, out *FanShareResponse) error {
	return h.WechatServiceHandler.ShareSearch(ctx, in, out)
}
