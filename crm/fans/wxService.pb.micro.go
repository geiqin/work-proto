// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: wxService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for WxService service

func NewWxServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for WxService service

type WxService interface {
	//生成二维码（公众号二维码支持批量生成）
	BaseQrcode(ctx context.Context, in *WxRequest, opts ...client.CallOption) (*WxResponse, error)
	//微信小程序码
	MiniQrcode(ctx context.Context, in *WxRequest, opts ...client.CallOption) (*WxResponse, error)
	//拉取绑定手机号码
	PullMobile(ctx context.Context, in *WxRequest, opts ...client.CallOption) (*WxResponse, error)
}

type wxService struct {
	c    client.Client
	name string
}

func NewWxService(name string, c client.Client) WxService {
	return &wxService{
		c:    c,
		name: name,
	}
}

func (c *wxService) BaseQrcode(ctx context.Context, in *WxRequest, opts ...client.CallOption) (*WxResponse, error) {
	req := c.c.NewRequest(c.name, "WxService.BaseQrcode", in)
	out := new(WxResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wxService) MiniQrcode(ctx context.Context, in *WxRequest, opts ...client.CallOption) (*WxResponse, error) {
	req := c.c.NewRequest(c.name, "WxService.MiniQrcode", in)
	out := new(WxResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wxService) PullMobile(ctx context.Context, in *WxRequest, opts ...client.CallOption) (*WxResponse, error) {
	req := c.c.NewRequest(c.name, "WxService.PullMobile", in)
	out := new(WxResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for WxService service

type WxServiceHandler interface {
	//生成二维码（公众号二维码支持批量生成）
	BaseQrcode(context.Context, *WxRequest, *WxResponse) error
	//微信小程序码
	MiniQrcode(context.Context, *WxRequest, *WxResponse) error
	//拉取绑定手机号码
	PullMobile(context.Context, *WxRequest, *WxResponse) error
}

func RegisterWxServiceHandler(s server.Server, hdlr WxServiceHandler, opts ...server.HandlerOption) error {
	type wxService interface {
		BaseQrcode(ctx context.Context, in *WxRequest, out *WxResponse) error
		MiniQrcode(ctx context.Context, in *WxRequest, out *WxResponse) error
		PullMobile(ctx context.Context, in *WxRequest, out *WxResponse) error
	}
	type WxService struct {
		wxService
	}
	h := &wxServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&WxService{h}, opts...))
}

type wxServiceHandler struct {
	WxServiceHandler
}

func (h *wxServiceHandler) BaseQrcode(ctx context.Context, in *WxRequest, out *WxResponse) error {
	return h.WxServiceHandler.BaseQrcode(ctx, in, out)
}

func (h *wxServiceHandler) MiniQrcode(ctx context.Context, in *WxRequest, out *WxResponse) error {
	return h.WxServiceHandler.MiniQrcode(ctx, in, out)
}

func (h *wxServiceHandler) PullMobile(ctx context.Context, in *WxRequest, out *WxResponse) error {
	return h.WxServiceHandler.PullMobile(ctx, in, out)
}
