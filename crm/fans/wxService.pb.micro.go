// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: wxService.proto

package services

import (
	fmt "fmt"
	common "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for MyWxService service

func NewMyWxServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for MyWxService service

type MyWxService interface {
	//记录推荐人
	Recommender(ctx context.Context, in *WxRequest, opts ...client.CallOption) (*common.TokenResponse, error)
	//记录分享痕迹
	WriteShare(ctx context.Context, in *WxRequest, opts ...client.CallOption) (*common.TokenResponse, error)
	//记录追踪痕迹
	WriteTrack(ctx context.Context, in *WxRequest, opts ...client.CallOption) (*WxResponse, error)
	//拉取绑定手机号码
	PullMobile(ctx context.Context, in *WxRequest, opts ...client.CallOption) (*WxResponse, error)
}

type myWxService struct {
	c    client.Client
	name string
}

func NewMyWxService(name string, c client.Client) MyWxService {
	return &myWxService{
		c:    c,
		name: name,
	}
}

func (c *myWxService) Recommender(ctx context.Context, in *WxRequest, opts ...client.CallOption) (*common.TokenResponse, error) {
	req := c.c.NewRequest(c.name, "MyWxService.Recommender", in)
	out := new(common.TokenResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myWxService) WriteShare(ctx context.Context, in *WxRequest, opts ...client.CallOption) (*common.TokenResponse, error) {
	req := c.c.NewRequest(c.name, "MyWxService.WriteShare", in)
	out := new(common.TokenResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myWxService) WriteTrack(ctx context.Context, in *WxRequest, opts ...client.CallOption) (*WxResponse, error) {
	req := c.c.NewRequest(c.name, "MyWxService.WriteTrack", in)
	out := new(WxResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myWxService) PullMobile(ctx context.Context, in *WxRequest, opts ...client.CallOption) (*WxResponse, error) {
	req := c.c.NewRequest(c.name, "MyWxService.PullMobile", in)
	out := new(WxResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MyWxService service

type MyWxServiceHandler interface {
	//记录推荐人
	Recommender(context.Context, *WxRequest, *common.TokenResponse) error
	//记录分享痕迹
	WriteShare(context.Context, *WxRequest, *common.TokenResponse) error
	//记录追踪痕迹
	WriteTrack(context.Context, *WxRequest, *WxResponse) error
	//拉取绑定手机号码
	PullMobile(context.Context, *WxRequest, *WxResponse) error
}

func RegisterMyWxServiceHandler(s server.Server, hdlr MyWxServiceHandler, opts ...server.HandlerOption) error {
	type myWxService interface {
		Recommender(ctx context.Context, in *WxRequest, out *common.TokenResponse) error
		WriteShare(ctx context.Context, in *WxRequest, out *common.TokenResponse) error
		WriteTrack(ctx context.Context, in *WxRequest, out *WxResponse) error
		PullMobile(ctx context.Context, in *WxRequest, out *WxResponse) error
	}
	type MyWxService struct {
		myWxService
	}
	h := &myWxServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&MyWxService{h}, opts...))
}

type myWxServiceHandler struct {
	MyWxServiceHandler
}

func (h *myWxServiceHandler) Recommender(ctx context.Context, in *WxRequest, out *common.TokenResponse) error {
	return h.MyWxServiceHandler.Recommender(ctx, in, out)
}

func (h *myWxServiceHandler) WriteShare(ctx context.Context, in *WxRequest, out *common.TokenResponse) error {
	return h.MyWxServiceHandler.WriteShare(ctx, in, out)
}

func (h *myWxServiceHandler) WriteTrack(ctx context.Context, in *WxRequest, out *WxResponse) error {
	return h.MyWxServiceHandler.WriteTrack(ctx, in, out)
}

func (h *myWxServiceHandler) PullMobile(ctx context.Context, in *WxRequest, out *WxResponse) error {
	return h.MyWxServiceHandler.PullMobile(ctx, in, out)
}

// Api Endpoints for WxService service

func NewWxServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for WxService service

type WxService interface {
	//生成二维码（公众号二维码和小程序码，支持批量生成）
	MakeCode(ctx context.Context, in *WxRequest, opts ...client.CallOption) (*WxResponse, error)
	//二维码查询
	CodeSearch(ctx context.Context, in *WxRequest, opts ...client.CallOption) (*WxResponse, error)
	//跟踪痕迹查询
	TrackSearch(ctx context.Context, in *FanTrack, opts ...client.CallOption) (*FanTrackResponse, error)
	//分享痕迹查询
	ShareSearch(ctx context.Context, in *FanShare, opts ...client.CallOption) (*FanShareResponse, error)
}

type wxService struct {
	c    client.Client
	name string
}

func NewWxService(name string, c client.Client) WxService {
	return &wxService{
		c:    c,
		name: name,
	}
}

func (c *wxService) MakeCode(ctx context.Context, in *WxRequest, opts ...client.CallOption) (*WxResponse, error) {
	req := c.c.NewRequest(c.name, "WxService.MakeCode", in)
	out := new(WxResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wxService) CodeSearch(ctx context.Context, in *WxRequest, opts ...client.CallOption) (*WxResponse, error) {
	req := c.c.NewRequest(c.name, "WxService.CodeSearch", in)
	out := new(WxResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wxService) TrackSearch(ctx context.Context, in *FanTrack, opts ...client.CallOption) (*FanTrackResponse, error) {
	req := c.c.NewRequest(c.name, "WxService.TrackSearch", in)
	out := new(FanTrackResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wxService) ShareSearch(ctx context.Context, in *FanShare, opts ...client.CallOption) (*FanShareResponse, error) {
	req := c.c.NewRequest(c.name, "WxService.ShareSearch", in)
	out := new(FanShareResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for WxService service

type WxServiceHandler interface {
	//生成二维码（公众号二维码和小程序码，支持批量生成）
	MakeCode(context.Context, *WxRequest, *WxResponse) error
	//二维码查询
	CodeSearch(context.Context, *WxRequest, *WxResponse) error
	//跟踪痕迹查询
	TrackSearch(context.Context, *FanTrack, *FanTrackResponse) error
	//分享痕迹查询
	ShareSearch(context.Context, *FanShare, *FanShareResponse) error
}

func RegisterWxServiceHandler(s server.Server, hdlr WxServiceHandler, opts ...server.HandlerOption) error {
	type wxService interface {
		MakeCode(ctx context.Context, in *WxRequest, out *WxResponse) error
		CodeSearch(ctx context.Context, in *WxRequest, out *WxResponse) error
		TrackSearch(ctx context.Context, in *FanTrack, out *FanTrackResponse) error
		ShareSearch(ctx context.Context, in *FanShare, out *FanShareResponse) error
	}
	type WxService struct {
		wxService
	}
	h := &wxServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&WxService{h}, opts...))
}

type wxServiceHandler struct {
	WxServiceHandler
}

func (h *wxServiceHandler) MakeCode(ctx context.Context, in *WxRequest, out *WxResponse) error {
	return h.WxServiceHandler.MakeCode(ctx, in, out)
}

func (h *wxServiceHandler) CodeSearch(ctx context.Context, in *WxRequest, out *WxResponse) error {
	return h.WxServiceHandler.CodeSearch(ctx, in, out)
}

func (h *wxServiceHandler) TrackSearch(ctx context.Context, in *FanTrack, out *FanTrackResponse) error {
	return h.WxServiceHandler.TrackSearch(ctx, in, out)
}

func (h *wxServiceHandler) ShareSearch(ctx context.Context, in *FanShare, out *FanShareResponse) error {
	return h.WxServiceHandler.ShareSearch(ctx, in, out)
}
