// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: levelService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for LevelService service

func NewLevelServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for LevelService service

type LevelService interface {
	Create(ctx context.Context, in *Level, opts ...client.CallOption) (*LevelResponse, error)
	Update(ctx context.Context, in *Level, opts ...client.CallOption) (*LevelResponse, error)
	Delete(ctx context.Context, in *Level, opts ...client.CallOption) (*LevelResponse, error)
	Get(ctx context.Context, in *Level, opts ...client.CallOption) (*LevelResponse, error)
	Search(ctx context.Context, in *LevelRequest, opts ...client.CallOption) (*LevelResponse, error)
	List(ctx context.Context, in *LevelRequest, opts ...client.CallOption) (*LevelResponse, error)
}

type levelService struct {
	c    client.Client
	name string
}

func NewLevelService(name string, c client.Client) LevelService {
	return &levelService{
		c:    c,
		name: name,
	}
}

func (c *levelService) Create(ctx context.Context, in *Level, opts ...client.CallOption) (*LevelResponse, error) {
	req := c.c.NewRequest(c.name, "LevelService.Create", in)
	out := new(LevelResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *levelService) Update(ctx context.Context, in *Level, opts ...client.CallOption) (*LevelResponse, error) {
	req := c.c.NewRequest(c.name, "LevelService.Update", in)
	out := new(LevelResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *levelService) Delete(ctx context.Context, in *Level, opts ...client.CallOption) (*LevelResponse, error) {
	req := c.c.NewRequest(c.name, "LevelService.Delete", in)
	out := new(LevelResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *levelService) Get(ctx context.Context, in *Level, opts ...client.CallOption) (*LevelResponse, error) {
	req := c.c.NewRequest(c.name, "LevelService.Get", in)
	out := new(LevelResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *levelService) Search(ctx context.Context, in *LevelRequest, opts ...client.CallOption) (*LevelResponse, error) {
	req := c.c.NewRequest(c.name, "LevelService.Search", in)
	out := new(LevelResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *levelService) List(ctx context.Context, in *LevelRequest, opts ...client.CallOption) (*LevelResponse, error) {
	req := c.c.NewRequest(c.name, "LevelService.List", in)
	out := new(LevelResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LevelService service

type LevelServiceHandler interface {
	Create(context.Context, *Level, *LevelResponse) error
	Update(context.Context, *Level, *LevelResponse) error
	Delete(context.Context, *Level, *LevelResponse) error
	Get(context.Context, *Level, *LevelResponse) error
	Search(context.Context, *LevelRequest, *LevelResponse) error
	List(context.Context, *LevelRequest, *LevelResponse) error
}

func RegisterLevelServiceHandler(s server.Server, hdlr LevelServiceHandler, opts ...server.HandlerOption) error {
	type levelService interface {
		Create(ctx context.Context, in *Level, out *LevelResponse) error
		Update(ctx context.Context, in *Level, out *LevelResponse) error
		Delete(ctx context.Context, in *Level, out *LevelResponse) error
		Get(ctx context.Context, in *Level, out *LevelResponse) error
		Search(ctx context.Context, in *LevelRequest, out *LevelResponse) error
		List(ctx context.Context, in *LevelRequest, out *LevelResponse) error
	}
	type LevelService struct {
		levelService
	}
	h := &levelServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&LevelService{h}, opts...))
}

type levelServiceHandler struct {
	LevelServiceHandler
}

func (h *levelServiceHandler) Create(ctx context.Context, in *Level, out *LevelResponse) error {
	return h.LevelServiceHandler.Create(ctx, in, out)
}

func (h *levelServiceHandler) Update(ctx context.Context, in *Level, out *LevelResponse) error {
	return h.LevelServiceHandler.Update(ctx, in, out)
}

func (h *levelServiceHandler) Delete(ctx context.Context, in *Level, out *LevelResponse) error {
	return h.LevelServiceHandler.Delete(ctx, in, out)
}

func (h *levelServiceHandler) Get(ctx context.Context, in *Level, out *LevelResponse) error {
	return h.LevelServiceHandler.Get(ctx, in, out)
}

func (h *levelServiceHandler) Search(ctx context.Context, in *LevelRequest, out *LevelResponse) error {
	return h.LevelServiceHandler.Search(ctx, in, out)
}

func (h *levelServiceHandler) List(ctx context.Context, in *LevelRequest, out *LevelResponse) error {
	return h.LevelServiceHandler.List(ctx, in, out)
}
