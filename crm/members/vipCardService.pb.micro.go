// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: vipCardService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for MyVipCardService service

func NewMyVipCardServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for MyVipCardService service

type MyVipCardService interface {
	//会员卡申请
	Apply(ctx context.Context, in *VipCard, opts ...client.CallOption) (*VipCardResponse, error)
	//会员卡续展
	Renew(ctx context.Context, in *VipCard, opts ...client.CallOption) (*VipCardResponse, error)
	//获取会员卡
	Get(ctx context.Context, in *VipCard, opts ...client.CallOption) (*VipCardResponse, error)
	//获取默认使用的会员卡
	GetDefault(ctx context.Context, in *VipCard, opts ...client.CallOption) (*VipCardResponse, error)
	//查询会员卡
	Search(ctx context.Context, in *VipCardWhere, opts ...client.CallOption) (*VipCardResponse, error)
	//会员是否有会员卡
	HasCard(ctx context.Context, in *VipCardWhere, opts ...client.CallOption) (*VipCardResponse, error)
	//获取有效的会员卡列表
	ValidList(ctx context.Context, in *VipCardWhere, opts ...client.CallOption) (*VipCardResponse, error)
}

type myVipCardService struct {
	c    client.Client
	name string
}

func NewMyVipCardService(name string, c client.Client) MyVipCardService {
	return &myVipCardService{
		c:    c,
		name: name,
	}
}

func (c *myVipCardService) Apply(ctx context.Context, in *VipCard, opts ...client.CallOption) (*VipCardResponse, error) {
	req := c.c.NewRequest(c.name, "MyVipCardService.Apply", in)
	out := new(VipCardResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myVipCardService) Renew(ctx context.Context, in *VipCard, opts ...client.CallOption) (*VipCardResponse, error) {
	req := c.c.NewRequest(c.name, "MyVipCardService.Renew", in)
	out := new(VipCardResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myVipCardService) Get(ctx context.Context, in *VipCard, opts ...client.CallOption) (*VipCardResponse, error) {
	req := c.c.NewRequest(c.name, "MyVipCardService.Get", in)
	out := new(VipCardResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myVipCardService) GetDefault(ctx context.Context, in *VipCard, opts ...client.CallOption) (*VipCardResponse, error) {
	req := c.c.NewRequest(c.name, "MyVipCardService.GetDefault", in)
	out := new(VipCardResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myVipCardService) Search(ctx context.Context, in *VipCardWhere, opts ...client.CallOption) (*VipCardResponse, error) {
	req := c.c.NewRequest(c.name, "MyVipCardService.Search", in)
	out := new(VipCardResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myVipCardService) HasCard(ctx context.Context, in *VipCardWhere, opts ...client.CallOption) (*VipCardResponse, error) {
	req := c.c.NewRequest(c.name, "MyVipCardService.HasCard", in)
	out := new(VipCardResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myVipCardService) ValidList(ctx context.Context, in *VipCardWhere, opts ...client.CallOption) (*VipCardResponse, error) {
	req := c.c.NewRequest(c.name, "MyVipCardService.ValidList", in)
	out := new(VipCardResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MyVipCardService service

type MyVipCardServiceHandler interface {
	//会员卡申请
	Apply(context.Context, *VipCard, *VipCardResponse) error
	//会员卡续展
	Renew(context.Context, *VipCard, *VipCardResponse) error
	//获取会员卡
	Get(context.Context, *VipCard, *VipCardResponse) error
	//获取默认使用的会员卡
	GetDefault(context.Context, *VipCard, *VipCardResponse) error
	//查询会员卡
	Search(context.Context, *VipCardWhere, *VipCardResponse) error
	//会员是否有会员卡
	HasCard(context.Context, *VipCardWhere, *VipCardResponse) error
	//获取有效的会员卡列表
	ValidList(context.Context, *VipCardWhere, *VipCardResponse) error
}

func RegisterMyVipCardServiceHandler(s server.Server, hdlr MyVipCardServiceHandler, opts ...server.HandlerOption) error {
	type myVipCardService interface {
		Apply(ctx context.Context, in *VipCard, out *VipCardResponse) error
		Renew(ctx context.Context, in *VipCard, out *VipCardResponse) error
		Get(ctx context.Context, in *VipCard, out *VipCardResponse) error
		GetDefault(ctx context.Context, in *VipCard, out *VipCardResponse) error
		Search(ctx context.Context, in *VipCardWhere, out *VipCardResponse) error
		HasCard(ctx context.Context, in *VipCardWhere, out *VipCardResponse) error
		ValidList(ctx context.Context, in *VipCardWhere, out *VipCardResponse) error
	}
	type MyVipCardService struct {
		myVipCardService
	}
	h := &myVipCardServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&MyVipCardService{h}, opts...))
}

type myVipCardServiceHandler struct {
	MyVipCardServiceHandler
}

func (h *myVipCardServiceHandler) Apply(ctx context.Context, in *VipCard, out *VipCardResponse) error {
	return h.MyVipCardServiceHandler.Apply(ctx, in, out)
}

func (h *myVipCardServiceHandler) Renew(ctx context.Context, in *VipCard, out *VipCardResponse) error {
	return h.MyVipCardServiceHandler.Renew(ctx, in, out)
}

func (h *myVipCardServiceHandler) Get(ctx context.Context, in *VipCard, out *VipCardResponse) error {
	return h.MyVipCardServiceHandler.Get(ctx, in, out)
}

func (h *myVipCardServiceHandler) GetDefault(ctx context.Context, in *VipCard, out *VipCardResponse) error {
	return h.MyVipCardServiceHandler.GetDefault(ctx, in, out)
}

func (h *myVipCardServiceHandler) Search(ctx context.Context, in *VipCardWhere, out *VipCardResponse) error {
	return h.MyVipCardServiceHandler.Search(ctx, in, out)
}

func (h *myVipCardServiceHandler) HasCard(ctx context.Context, in *VipCardWhere, out *VipCardResponse) error {
	return h.MyVipCardServiceHandler.HasCard(ctx, in, out)
}

func (h *myVipCardServiceHandler) ValidList(ctx context.Context, in *VipCardWhere, out *VipCardResponse) error {
	return h.MyVipCardServiceHandler.ValidList(ctx, in, out)
}

// Api Endpoints for VipCardService service

func NewVipCardServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for VipCardService service

type VipCardService interface {
	//后台颁发会员卡
	Create(ctx context.Context, in *VipCard, opts ...client.CallOption) (*VipCardResponse, error)
	//后台会员卡续展
	Renew(ctx context.Context, in *VipCard, opts ...client.CallOption) (*VipCardResponse, error)
	//删除会员卡
	Delete(ctx context.Context, in *VipCard, opts ...client.CallOption) (*VipCardResponse, error)
	//获取会员卡
	Get(ctx context.Context, in *VipCard, opts ...client.CallOption) (*VipCardResponse, error)
	//会员卡列表
	List(ctx context.Context, in *VipCard, opts ...client.CallOption) (*VipCardResponse, error)
	//查询会员卡
	Search(ctx context.Context, in *VipCardWhere, opts ...client.CallOption) (*VipCardResponse, error)
}

type vipCardService struct {
	c    client.Client
	name string
}

func NewVipCardService(name string, c client.Client) VipCardService {
	return &vipCardService{
		c:    c,
		name: name,
	}
}

func (c *vipCardService) Create(ctx context.Context, in *VipCard, opts ...client.CallOption) (*VipCardResponse, error) {
	req := c.c.NewRequest(c.name, "VipCardService.Create", in)
	out := new(VipCardResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipCardService) Renew(ctx context.Context, in *VipCard, opts ...client.CallOption) (*VipCardResponse, error) {
	req := c.c.NewRequest(c.name, "VipCardService.Renew", in)
	out := new(VipCardResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipCardService) Delete(ctx context.Context, in *VipCard, opts ...client.CallOption) (*VipCardResponse, error) {
	req := c.c.NewRequest(c.name, "VipCardService.Delete", in)
	out := new(VipCardResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipCardService) Get(ctx context.Context, in *VipCard, opts ...client.CallOption) (*VipCardResponse, error) {
	req := c.c.NewRequest(c.name, "VipCardService.Get", in)
	out := new(VipCardResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipCardService) List(ctx context.Context, in *VipCard, opts ...client.CallOption) (*VipCardResponse, error) {
	req := c.c.NewRequest(c.name, "VipCardService.List", in)
	out := new(VipCardResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipCardService) Search(ctx context.Context, in *VipCardWhere, opts ...client.CallOption) (*VipCardResponse, error) {
	req := c.c.NewRequest(c.name, "VipCardService.Search", in)
	out := new(VipCardResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for VipCardService service

type VipCardServiceHandler interface {
	//后台颁发会员卡
	Create(context.Context, *VipCard, *VipCardResponse) error
	//后台会员卡续展
	Renew(context.Context, *VipCard, *VipCardResponse) error
	//删除会员卡
	Delete(context.Context, *VipCard, *VipCardResponse) error
	//获取会员卡
	Get(context.Context, *VipCard, *VipCardResponse) error
	//会员卡列表
	List(context.Context, *VipCard, *VipCardResponse) error
	//查询会员卡
	Search(context.Context, *VipCardWhere, *VipCardResponse) error
}

func RegisterVipCardServiceHandler(s server.Server, hdlr VipCardServiceHandler, opts ...server.HandlerOption) error {
	type vipCardService interface {
		Create(ctx context.Context, in *VipCard, out *VipCardResponse) error
		Renew(ctx context.Context, in *VipCard, out *VipCardResponse) error
		Delete(ctx context.Context, in *VipCard, out *VipCardResponse) error
		Get(ctx context.Context, in *VipCard, out *VipCardResponse) error
		List(ctx context.Context, in *VipCard, out *VipCardResponse) error
		Search(ctx context.Context, in *VipCardWhere, out *VipCardResponse) error
	}
	type VipCardService struct {
		vipCardService
	}
	h := &vipCardServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&VipCardService{h}, opts...))
}

type vipCardServiceHandler struct {
	VipCardServiceHandler
}

func (h *vipCardServiceHandler) Create(ctx context.Context, in *VipCard, out *VipCardResponse) error {
	return h.VipCardServiceHandler.Create(ctx, in, out)
}

func (h *vipCardServiceHandler) Renew(ctx context.Context, in *VipCard, out *VipCardResponse) error {
	return h.VipCardServiceHandler.Renew(ctx, in, out)
}

func (h *vipCardServiceHandler) Delete(ctx context.Context, in *VipCard, out *VipCardResponse) error {
	return h.VipCardServiceHandler.Delete(ctx, in, out)
}

func (h *vipCardServiceHandler) Get(ctx context.Context, in *VipCard, out *VipCardResponse) error {
	return h.VipCardServiceHandler.Get(ctx, in, out)
}

func (h *vipCardServiceHandler) List(ctx context.Context, in *VipCard, out *VipCardResponse) error {
	return h.VipCardServiceHandler.List(ctx, in, out)
}

func (h *vipCardServiceHandler) Search(ctx context.Context, in *VipCardWhere, out *VipCardResponse) error {
	return h.VipCardServiceHandler.Search(ctx, in, out)
}
