// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: integralService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for IntegralService service

func NewIntegralServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for IntegralService service

type IntegralService interface {
	Search(ctx context.Context, in *IntegralWhere, opts ...client.CallOption) (*IntegralResponse, error)
	Get(ctx context.Context, in *IntegralWhere, opts ...client.CallOption) (*IntegralResponse, error)
	// 增加积分
	Inc(ctx context.Context, in *IntegralWhere, opts ...client.CallOption) (*IntegralResponse, error)
	// 减少积分
	Dec(ctx context.Context, in *IntegralWhere, opts ...client.CallOption) (*IntegralResponse, error)
}

type integralService struct {
	c    client.Client
	name string
}

func NewIntegralService(name string, c client.Client) IntegralService {
	return &integralService{
		c:    c,
		name: name,
	}
}

func (c *integralService) Search(ctx context.Context, in *IntegralWhere, opts ...client.CallOption) (*IntegralResponse, error) {
	req := c.c.NewRequest(c.name, "IntegralService.Search", in)
	out := new(IntegralResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integralService) Get(ctx context.Context, in *IntegralWhere, opts ...client.CallOption) (*IntegralResponse, error) {
	req := c.c.NewRequest(c.name, "IntegralService.Get", in)
	out := new(IntegralResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integralService) Inc(ctx context.Context, in *IntegralWhere, opts ...client.CallOption) (*IntegralResponse, error) {
	req := c.c.NewRequest(c.name, "IntegralService.Inc", in)
	out := new(IntegralResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integralService) Dec(ctx context.Context, in *IntegralWhere, opts ...client.CallOption) (*IntegralResponse, error) {
	req := c.c.NewRequest(c.name, "IntegralService.Dec", in)
	out := new(IntegralResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for IntegralService service

type IntegralServiceHandler interface {
	Search(context.Context, *IntegralWhere, *IntegralResponse) error
	Get(context.Context, *IntegralWhere, *IntegralResponse) error
	// 增加积分
	Inc(context.Context, *IntegralWhere, *IntegralResponse) error
	// 减少积分
	Dec(context.Context, *IntegralWhere, *IntegralResponse) error
}

func RegisterIntegralServiceHandler(s server.Server, hdlr IntegralServiceHandler, opts ...server.HandlerOption) error {
	type integralService interface {
		Search(ctx context.Context, in *IntegralWhere, out *IntegralResponse) error
		Get(ctx context.Context, in *IntegralWhere, out *IntegralResponse) error
		Inc(ctx context.Context, in *IntegralWhere, out *IntegralResponse) error
		Dec(ctx context.Context, in *IntegralWhere, out *IntegralResponse) error
	}
	type IntegralService struct {
		integralService
	}
	h := &integralServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&IntegralService{h}, opts...))
}

type integralServiceHandler struct {
	IntegralServiceHandler
}

func (h *integralServiceHandler) Search(ctx context.Context, in *IntegralWhere, out *IntegralResponse) error {
	return h.IntegralServiceHandler.Search(ctx, in, out)
}

func (h *integralServiceHandler) Get(ctx context.Context, in *IntegralWhere, out *IntegralResponse) error {
	return h.IntegralServiceHandler.Get(ctx, in, out)
}

func (h *integralServiceHandler) Inc(ctx context.Context, in *IntegralWhere, out *IntegralResponse) error {
	return h.IntegralServiceHandler.Inc(ctx, in, out)
}

func (h *integralServiceHandler) Dec(ctx context.Context, in *IntegralWhere, out *IntegralResponse) error {
	return h.IntegralServiceHandler.Dec(ctx, in, out)
}

// Api Endpoints for MyIntegralService service

func NewMyIntegralServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for MyIntegralService service

type MyIntegralService interface {
	Get(ctx context.Context, in *IntegralWhere, opts ...client.CallOption) (*IntegralResponse, error)
}

type myIntegralService struct {
	c    client.Client
	name string
}

func NewMyIntegralService(name string, c client.Client) MyIntegralService {
	return &myIntegralService{
		c:    c,
		name: name,
	}
}

func (c *myIntegralService) Get(ctx context.Context, in *IntegralWhere, opts ...client.CallOption) (*IntegralResponse, error) {
	req := c.c.NewRequest(c.name, "MyIntegralService.Get", in)
	out := new(IntegralResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MyIntegralService service

type MyIntegralServiceHandler interface {
	Get(context.Context, *IntegralWhere, *IntegralResponse) error
}

func RegisterMyIntegralServiceHandler(s server.Server, hdlr MyIntegralServiceHandler, opts ...server.HandlerOption) error {
	type myIntegralService interface {
		Get(ctx context.Context, in *IntegralWhere, out *IntegralResponse) error
	}
	type MyIntegralService struct {
		myIntegralService
	}
	h := &myIntegralServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&MyIntegralService{h}, opts...))
}

type myIntegralServiceHandler struct {
	MyIntegralServiceHandler
}

func (h *myIntegralServiceHandler) Get(ctx context.Context, in *IntegralWhere, out *IntegralResponse) error {
	return h.MyIntegralServiceHandler.Get(ctx, in, out)
}
