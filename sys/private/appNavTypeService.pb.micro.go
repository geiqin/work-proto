// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: appNavTypeService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for AppNavTypeService service

func NewAppNavTypeServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for AppNavTypeService service

type AppNavTypeService interface {
	Create(ctx context.Context, in *AppNavType, opts ...client.CallOption) (*AppNavTypeResponse, error)
	Update(ctx context.Context, in *AppNavType, opts ...client.CallOption) (*AppNavTypeResponse, error)
	Delete(ctx context.Context, in *AppNavTypeWhere, opts ...client.CallOption) (*AppNavTypeResponse, error)
	Get(ctx context.Context, in *AppNavType, opts ...client.CallOption) (*AppNavTypeResponse, error)
	List(ctx context.Context, in *AppNavTypeWhere, opts ...client.CallOption) (*AppNavTypeResponse, error)
	Search(ctx context.Context, in *AppNavTypeWhere, opts ...client.CallOption) (*AppNavTypeResponse, error)
	ChangeSort(ctx context.Context, in *AppNavType, opts ...client.CallOption) (*AppNavTypeResponse, error)
	Tree(ctx context.Context, in *AppNavTypeWhere, opts ...client.CallOption) (*AppNavTypeResponse, error)
}

type appNavTypeService struct {
	c    client.Client
	name string
}

func NewAppNavTypeService(name string, c client.Client) AppNavTypeService {
	return &appNavTypeService{
		c:    c,
		name: name,
	}
}

func (c *appNavTypeService) Create(ctx context.Context, in *AppNavType, opts ...client.CallOption) (*AppNavTypeResponse, error) {
	req := c.c.NewRequest(c.name, "AppNavTypeService.Create", in)
	out := new(AppNavTypeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appNavTypeService) Update(ctx context.Context, in *AppNavType, opts ...client.CallOption) (*AppNavTypeResponse, error) {
	req := c.c.NewRequest(c.name, "AppNavTypeService.Update", in)
	out := new(AppNavTypeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appNavTypeService) Delete(ctx context.Context, in *AppNavTypeWhere, opts ...client.CallOption) (*AppNavTypeResponse, error) {
	req := c.c.NewRequest(c.name, "AppNavTypeService.Delete", in)
	out := new(AppNavTypeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appNavTypeService) Get(ctx context.Context, in *AppNavType, opts ...client.CallOption) (*AppNavTypeResponse, error) {
	req := c.c.NewRequest(c.name, "AppNavTypeService.Get", in)
	out := new(AppNavTypeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appNavTypeService) List(ctx context.Context, in *AppNavTypeWhere, opts ...client.CallOption) (*AppNavTypeResponse, error) {
	req := c.c.NewRequest(c.name, "AppNavTypeService.List", in)
	out := new(AppNavTypeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appNavTypeService) Search(ctx context.Context, in *AppNavTypeWhere, opts ...client.CallOption) (*AppNavTypeResponse, error) {
	req := c.c.NewRequest(c.name, "AppNavTypeService.Search", in)
	out := new(AppNavTypeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appNavTypeService) ChangeSort(ctx context.Context, in *AppNavType, opts ...client.CallOption) (*AppNavTypeResponse, error) {
	req := c.c.NewRequest(c.name, "AppNavTypeService.ChangeSort", in)
	out := new(AppNavTypeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appNavTypeService) Tree(ctx context.Context, in *AppNavTypeWhere, opts ...client.CallOption) (*AppNavTypeResponse, error) {
	req := c.c.NewRequest(c.name, "AppNavTypeService.Tree", in)
	out := new(AppNavTypeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AppNavTypeService service

type AppNavTypeServiceHandler interface {
	Create(context.Context, *AppNavType, *AppNavTypeResponse) error
	Update(context.Context, *AppNavType, *AppNavTypeResponse) error
	Delete(context.Context, *AppNavTypeWhere, *AppNavTypeResponse) error
	Get(context.Context, *AppNavType, *AppNavTypeResponse) error
	List(context.Context, *AppNavTypeWhere, *AppNavTypeResponse) error
	Search(context.Context, *AppNavTypeWhere, *AppNavTypeResponse) error
	ChangeSort(context.Context, *AppNavType, *AppNavTypeResponse) error
	Tree(context.Context, *AppNavTypeWhere, *AppNavTypeResponse) error
}

func RegisterAppNavTypeServiceHandler(s server.Server, hdlr AppNavTypeServiceHandler, opts ...server.HandlerOption) error {
	type appNavTypeService interface {
		Create(ctx context.Context, in *AppNavType, out *AppNavTypeResponse) error
		Update(ctx context.Context, in *AppNavType, out *AppNavTypeResponse) error
		Delete(ctx context.Context, in *AppNavTypeWhere, out *AppNavTypeResponse) error
		Get(ctx context.Context, in *AppNavType, out *AppNavTypeResponse) error
		List(ctx context.Context, in *AppNavTypeWhere, out *AppNavTypeResponse) error
		Search(ctx context.Context, in *AppNavTypeWhere, out *AppNavTypeResponse) error
		ChangeSort(ctx context.Context, in *AppNavType, out *AppNavTypeResponse) error
		Tree(ctx context.Context, in *AppNavTypeWhere, out *AppNavTypeResponse) error
	}
	type AppNavTypeService struct {
		appNavTypeService
	}
	h := &appNavTypeServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&AppNavTypeService{h}, opts...))
}

type appNavTypeServiceHandler struct {
	AppNavTypeServiceHandler
}

func (h *appNavTypeServiceHandler) Create(ctx context.Context, in *AppNavType, out *AppNavTypeResponse) error {
	return h.AppNavTypeServiceHandler.Create(ctx, in, out)
}

func (h *appNavTypeServiceHandler) Update(ctx context.Context, in *AppNavType, out *AppNavTypeResponse) error {
	return h.AppNavTypeServiceHandler.Update(ctx, in, out)
}

func (h *appNavTypeServiceHandler) Delete(ctx context.Context, in *AppNavTypeWhere, out *AppNavTypeResponse) error {
	return h.AppNavTypeServiceHandler.Delete(ctx, in, out)
}

func (h *appNavTypeServiceHandler) Get(ctx context.Context, in *AppNavType, out *AppNavTypeResponse) error {
	return h.AppNavTypeServiceHandler.Get(ctx, in, out)
}

func (h *appNavTypeServiceHandler) List(ctx context.Context, in *AppNavTypeWhere, out *AppNavTypeResponse) error {
	return h.AppNavTypeServiceHandler.List(ctx, in, out)
}

func (h *appNavTypeServiceHandler) Search(ctx context.Context, in *AppNavTypeWhere, out *AppNavTypeResponse) error {
	return h.AppNavTypeServiceHandler.Search(ctx, in, out)
}

func (h *appNavTypeServiceHandler) ChangeSort(ctx context.Context, in *AppNavType, out *AppNavTypeResponse) error {
	return h.AppNavTypeServiceHandler.ChangeSort(ctx, in, out)
}

func (h *appNavTypeServiceHandler) Tree(ctx context.Context, in *AppNavTypeWhere, out *AppNavTypeResponse) error {
	return h.AppNavTypeServiceHandler.Tree(ctx, in, out)
}
