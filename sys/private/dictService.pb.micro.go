// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: dictService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for DictService service

func NewDictServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for DictService service

type DictService interface {
	Create(ctx context.Context, in *Dict, opts ...client.CallOption) (*DictResponse, error)
	Update(ctx context.Context, in *Dict, opts ...client.CallOption) (*DictResponse, error)
	Delete(ctx context.Context, in *DictRequest, opts ...client.CallOption) (*DictResponse, error)
	Get(ctx context.Context, in *DictRequest, opts ...client.CallOption) (*DictResponse, error)
	Search(ctx context.Context, in *DictRequest, opts ...client.CallOption) (*DictResponse, error)
	List(ctx context.Context, in *DictRequest, opts ...client.CallOption) (*DictResponse, error)
	SetSort(ctx context.Context, in *DictRequest, opts ...client.CallOption) (*DictResponse, error)
	SetStatus(ctx context.Context, in *DictRequest, opts ...client.CallOption) (*DictResponse, error)
}

type dictService struct {
	c    client.Client
	name string
}

func NewDictService(name string, c client.Client) DictService {
	return &dictService{
		c:    c,
		name: name,
	}
}

func (c *dictService) Create(ctx context.Context, in *Dict, opts ...client.CallOption) (*DictResponse, error) {
	req := c.c.NewRequest(c.name, "DictService.Create", in)
	out := new(DictResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictService) Update(ctx context.Context, in *Dict, opts ...client.CallOption) (*DictResponse, error) {
	req := c.c.NewRequest(c.name, "DictService.Update", in)
	out := new(DictResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictService) Delete(ctx context.Context, in *DictRequest, opts ...client.CallOption) (*DictResponse, error) {
	req := c.c.NewRequest(c.name, "DictService.Delete", in)
	out := new(DictResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictService) Get(ctx context.Context, in *DictRequest, opts ...client.CallOption) (*DictResponse, error) {
	req := c.c.NewRequest(c.name, "DictService.Get", in)
	out := new(DictResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictService) Search(ctx context.Context, in *DictRequest, opts ...client.CallOption) (*DictResponse, error) {
	req := c.c.NewRequest(c.name, "DictService.Search", in)
	out := new(DictResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictService) List(ctx context.Context, in *DictRequest, opts ...client.CallOption) (*DictResponse, error) {
	req := c.c.NewRequest(c.name, "DictService.List", in)
	out := new(DictResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictService) SetSort(ctx context.Context, in *DictRequest, opts ...client.CallOption) (*DictResponse, error) {
	req := c.c.NewRequest(c.name, "DictService.SetSort", in)
	out := new(DictResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictService) SetStatus(ctx context.Context, in *DictRequest, opts ...client.CallOption) (*DictResponse, error) {
	req := c.c.NewRequest(c.name, "DictService.SetStatus", in)
	out := new(DictResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DictService service

type DictServiceHandler interface {
	Create(context.Context, *Dict, *DictResponse) error
	Update(context.Context, *Dict, *DictResponse) error
	Delete(context.Context, *DictRequest, *DictResponse) error
	Get(context.Context, *DictRequest, *DictResponse) error
	Search(context.Context, *DictRequest, *DictResponse) error
	List(context.Context, *DictRequest, *DictResponse) error
	SetSort(context.Context, *DictRequest, *DictResponse) error
	SetStatus(context.Context, *DictRequest, *DictResponse) error
}

func RegisterDictServiceHandler(s server.Server, hdlr DictServiceHandler, opts ...server.HandlerOption) error {
	type dictService interface {
		Create(ctx context.Context, in *Dict, out *DictResponse) error
		Update(ctx context.Context, in *Dict, out *DictResponse) error
		Delete(ctx context.Context, in *DictRequest, out *DictResponse) error
		Get(ctx context.Context, in *DictRequest, out *DictResponse) error
		Search(ctx context.Context, in *DictRequest, out *DictResponse) error
		List(ctx context.Context, in *DictRequest, out *DictResponse) error
		SetSort(ctx context.Context, in *DictRequest, out *DictResponse) error
		SetStatus(ctx context.Context, in *DictRequest, out *DictResponse) error
	}
	type DictService struct {
		dictService
	}
	h := &dictServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&DictService{h}, opts...))
}

type dictServiceHandler struct {
	DictServiceHandler
}

func (h *dictServiceHandler) Create(ctx context.Context, in *Dict, out *DictResponse) error {
	return h.DictServiceHandler.Create(ctx, in, out)
}

func (h *dictServiceHandler) Update(ctx context.Context, in *Dict, out *DictResponse) error {
	return h.DictServiceHandler.Update(ctx, in, out)
}

func (h *dictServiceHandler) Delete(ctx context.Context, in *DictRequest, out *DictResponse) error {
	return h.DictServiceHandler.Delete(ctx, in, out)
}

func (h *dictServiceHandler) Get(ctx context.Context, in *DictRequest, out *DictResponse) error {
	return h.DictServiceHandler.Get(ctx, in, out)
}

func (h *dictServiceHandler) Search(ctx context.Context, in *DictRequest, out *DictResponse) error {
	return h.DictServiceHandler.Search(ctx, in, out)
}

func (h *dictServiceHandler) List(ctx context.Context, in *DictRequest, out *DictResponse) error {
	return h.DictServiceHandler.List(ctx, in, out)
}

func (h *dictServiceHandler) SetSort(ctx context.Context, in *DictRequest, out *DictResponse) error {
	return h.DictServiceHandler.SetSort(ctx, in, out)
}

func (h *dictServiceHandler) SetStatus(ctx context.Context, in *DictRequest, out *DictResponse) error {
	return h.DictServiceHandler.SetStatus(ctx, in, out)
}
