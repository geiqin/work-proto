// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: feedbackService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for FeedbackService service

func NewFeedbackServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for FeedbackService service

type FeedbackService interface {
	Search(ctx context.Context, in *FeedbackWhere, opts ...client.CallOption) (*FeedbackResponse, error)
	List(ctx context.Context, in *FeedbackWhere, opts ...client.CallOption) (*FeedbackResponse, error)
	Get(ctx context.Context, in *FeedbackWhere, opts ...client.CallOption) (*FeedbackResponse, error)
}

type feedbackService struct {
	c    client.Client
	name string
}

func NewFeedbackService(name string, c client.Client) FeedbackService {
	return &feedbackService{
		c:    c,
		name: name,
	}
}

func (c *feedbackService) Search(ctx context.Context, in *FeedbackWhere, opts ...client.CallOption) (*FeedbackResponse, error) {
	req := c.c.NewRequest(c.name, "FeedbackService.Search", in)
	out := new(FeedbackResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedbackService) List(ctx context.Context, in *FeedbackWhere, opts ...client.CallOption) (*FeedbackResponse, error) {
	req := c.c.NewRequest(c.name, "FeedbackService.List", in)
	out := new(FeedbackResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedbackService) Get(ctx context.Context, in *FeedbackWhere, opts ...client.CallOption) (*FeedbackResponse, error) {
	req := c.c.NewRequest(c.name, "FeedbackService.Get", in)
	out := new(FeedbackResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FeedbackService service

type FeedbackServiceHandler interface {
	Search(context.Context, *FeedbackWhere, *FeedbackResponse) error
	List(context.Context, *FeedbackWhere, *FeedbackResponse) error
	Get(context.Context, *FeedbackWhere, *FeedbackResponse) error
}

func RegisterFeedbackServiceHandler(s server.Server, hdlr FeedbackServiceHandler, opts ...server.HandlerOption) error {
	type feedbackService interface {
		Search(ctx context.Context, in *FeedbackWhere, out *FeedbackResponse) error
		List(ctx context.Context, in *FeedbackWhere, out *FeedbackResponse) error
		Get(ctx context.Context, in *FeedbackWhere, out *FeedbackResponse) error
	}
	type FeedbackService struct {
		feedbackService
	}
	h := &feedbackServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&FeedbackService{h}, opts...))
}

type feedbackServiceHandler struct {
	FeedbackServiceHandler
}

func (h *feedbackServiceHandler) Search(ctx context.Context, in *FeedbackWhere, out *FeedbackResponse) error {
	return h.FeedbackServiceHandler.Search(ctx, in, out)
}

func (h *feedbackServiceHandler) List(ctx context.Context, in *FeedbackWhere, out *FeedbackResponse) error {
	return h.FeedbackServiceHandler.List(ctx, in, out)
}

func (h *feedbackServiceHandler) Get(ctx context.Context, in *FeedbackWhere, out *FeedbackResponse) error {
	return h.FeedbackServiceHandler.Get(ctx, in, out)
}

// Api Endpoints for FrontFeedbackService service

func NewFrontFeedbackServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for FrontFeedbackService service

type FrontFeedbackService interface {
	Search(ctx context.Context, in *FeedbackWhere, opts ...client.CallOption) (*FeedbackResponse, error)
	List(ctx context.Context, in *FeedbackWhere, opts ...client.CallOption) (*FeedbackResponse, error)
	Get(ctx context.Context, in *FeedbackWhere, opts ...client.CallOption) (*FeedbackResponse, error)
	Submit(ctx context.Context, in *Feedback, opts ...client.CallOption) (*FeedbackResponse, error)
}

type frontFeedbackService struct {
	c    client.Client
	name string
}

func NewFrontFeedbackService(name string, c client.Client) FrontFeedbackService {
	return &frontFeedbackService{
		c:    c,
		name: name,
	}
}

func (c *frontFeedbackService) Search(ctx context.Context, in *FeedbackWhere, opts ...client.CallOption) (*FeedbackResponse, error) {
	req := c.c.NewRequest(c.name, "FrontFeedbackService.Search", in)
	out := new(FeedbackResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontFeedbackService) List(ctx context.Context, in *FeedbackWhere, opts ...client.CallOption) (*FeedbackResponse, error) {
	req := c.c.NewRequest(c.name, "FrontFeedbackService.List", in)
	out := new(FeedbackResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontFeedbackService) Get(ctx context.Context, in *FeedbackWhere, opts ...client.CallOption) (*FeedbackResponse, error) {
	req := c.c.NewRequest(c.name, "FrontFeedbackService.Get", in)
	out := new(FeedbackResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontFeedbackService) Submit(ctx context.Context, in *Feedback, opts ...client.CallOption) (*FeedbackResponse, error) {
	req := c.c.NewRequest(c.name, "FrontFeedbackService.Submit", in)
	out := new(FeedbackResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FrontFeedbackService service

type FrontFeedbackServiceHandler interface {
	Search(context.Context, *FeedbackWhere, *FeedbackResponse) error
	List(context.Context, *FeedbackWhere, *FeedbackResponse) error
	Get(context.Context, *FeedbackWhere, *FeedbackResponse) error
	Submit(context.Context, *Feedback, *FeedbackResponse) error
}

func RegisterFrontFeedbackServiceHandler(s server.Server, hdlr FrontFeedbackServiceHandler, opts ...server.HandlerOption) error {
	type frontFeedbackService interface {
		Search(ctx context.Context, in *FeedbackWhere, out *FeedbackResponse) error
		List(ctx context.Context, in *FeedbackWhere, out *FeedbackResponse) error
		Get(ctx context.Context, in *FeedbackWhere, out *FeedbackResponse) error
		Submit(ctx context.Context, in *Feedback, out *FeedbackResponse) error
	}
	type FrontFeedbackService struct {
		frontFeedbackService
	}
	h := &frontFeedbackServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&FrontFeedbackService{h}, opts...))
}

type frontFeedbackServiceHandler struct {
	FrontFeedbackServiceHandler
}

func (h *frontFeedbackServiceHandler) Search(ctx context.Context, in *FeedbackWhere, out *FeedbackResponse) error {
	return h.FrontFeedbackServiceHandler.Search(ctx, in, out)
}

func (h *frontFeedbackServiceHandler) List(ctx context.Context, in *FeedbackWhere, out *FeedbackResponse) error {
	return h.FrontFeedbackServiceHandler.List(ctx, in, out)
}

func (h *frontFeedbackServiceHandler) Get(ctx context.Context, in *FeedbackWhere, out *FeedbackResponse) error {
	return h.FrontFeedbackServiceHandler.Get(ctx, in, out)
}

func (h *frontFeedbackServiceHandler) Submit(ctx context.Context, in *Feedback, out *FeedbackResponse) error {
	return h.FrontFeedbackServiceHandler.Submit(ctx, in, out)
}
