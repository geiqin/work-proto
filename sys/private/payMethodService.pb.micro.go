// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: payMethodService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for PayMethodService service

func NewPayMethodServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for PayMethodService service

type PayMethodService interface {
	Lock(ctx context.Context, in *PayMethod, opts ...client.CallOption) (*PayMethodResponse, error)
	Unlock(ctx context.Context, in *PayMethod, opts ...client.CallOption) (*PayMethodResponse, error)
	Get(ctx context.Context, in *PayMethod, opts ...client.CallOption) (*PayMethodResponse, error)
	List(ctx context.Context, in *PayMethodWhere, opts ...client.CallOption) (*PayMethodResponse, error)
	Search(ctx context.Context, in *PayMethodWhere, opts ...client.CallOption) (*PayMethodResponse, error)
}

type payMethodService struct {
	c    client.Client
	name string
}

func NewPayMethodService(name string, c client.Client) PayMethodService {
	return &payMethodService{
		c:    c,
		name: name,
	}
}

func (c *payMethodService) Lock(ctx context.Context, in *PayMethod, opts ...client.CallOption) (*PayMethodResponse, error) {
	req := c.c.NewRequest(c.name, "PayMethodService.Lock", in)
	out := new(PayMethodResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payMethodService) Unlock(ctx context.Context, in *PayMethod, opts ...client.CallOption) (*PayMethodResponse, error) {
	req := c.c.NewRequest(c.name, "PayMethodService.Unlock", in)
	out := new(PayMethodResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payMethodService) Get(ctx context.Context, in *PayMethod, opts ...client.CallOption) (*PayMethodResponse, error) {
	req := c.c.NewRequest(c.name, "PayMethodService.Get", in)
	out := new(PayMethodResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payMethodService) List(ctx context.Context, in *PayMethodWhere, opts ...client.CallOption) (*PayMethodResponse, error) {
	req := c.c.NewRequest(c.name, "PayMethodService.List", in)
	out := new(PayMethodResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payMethodService) Search(ctx context.Context, in *PayMethodWhere, opts ...client.CallOption) (*PayMethodResponse, error) {
	req := c.c.NewRequest(c.name, "PayMethodService.Search", in)
	out := new(PayMethodResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PayMethodService service

type PayMethodServiceHandler interface {
	Lock(context.Context, *PayMethod, *PayMethodResponse) error
	Unlock(context.Context, *PayMethod, *PayMethodResponse) error
	Get(context.Context, *PayMethod, *PayMethodResponse) error
	List(context.Context, *PayMethodWhere, *PayMethodResponse) error
	Search(context.Context, *PayMethodWhere, *PayMethodResponse) error
}

func RegisterPayMethodServiceHandler(s server.Server, hdlr PayMethodServiceHandler, opts ...server.HandlerOption) error {
	type payMethodService interface {
		Lock(ctx context.Context, in *PayMethod, out *PayMethodResponse) error
		Unlock(ctx context.Context, in *PayMethod, out *PayMethodResponse) error
		Get(ctx context.Context, in *PayMethod, out *PayMethodResponse) error
		List(ctx context.Context, in *PayMethodWhere, out *PayMethodResponse) error
		Search(ctx context.Context, in *PayMethodWhere, out *PayMethodResponse) error
	}
	type PayMethodService struct {
		payMethodService
	}
	h := &payMethodServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&PayMethodService{h}, opts...))
}

type payMethodServiceHandler struct {
	PayMethodServiceHandler
}

func (h *payMethodServiceHandler) Lock(ctx context.Context, in *PayMethod, out *PayMethodResponse) error {
	return h.PayMethodServiceHandler.Lock(ctx, in, out)
}

func (h *payMethodServiceHandler) Unlock(ctx context.Context, in *PayMethod, out *PayMethodResponse) error {
	return h.PayMethodServiceHandler.Unlock(ctx, in, out)
}

func (h *payMethodServiceHandler) Get(ctx context.Context, in *PayMethod, out *PayMethodResponse) error {
	return h.PayMethodServiceHandler.Get(ctx, in, out)
}

func (h *payMethodServiceHandler) List(ctx context.Context, in *PayMethodWhere, out *PayMethodResponse) error {
	return h.PayMethodServiceHandler.List(ctx, in, out)
}

func (h *payMethodServiceHandler) Search(ctx context.Context, in *PayMethodWhere, out *PayMethodResponse) error {
	return h.PayMethodServiceHandler.Search(ctx, in, out)
}
