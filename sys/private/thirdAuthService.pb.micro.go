// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: thirdAuthService.proto

package services

import (
	fmt "fmt"
	common "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ThirdAuthService service

func NewThirdAuthServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ThirdAuthService service

type ThirdAuthService interface {
	Create(ctx context.Context, in *ThirdAuth, opts ...client.CallOption) (*ThirdAuthResponse, error)
	Update(ctx context.Context, in *ThirdAuth, opts ...client.CallOption) (*ThirdAuthResponse, error)
	Delete(ctx context.Context, in *ThirdAuth, opts ...client.CallOption) (*ThirdAuthResponse, error)
	Lock(ctx context.Context, in *ThirdAuth, opts ...client.CallOption) (*ThirdAuthResponse, error)
	Unlock(ctx context.Context, in *ThirdAuth, opts ...client.CallOption) (*ThirdAuthResponse, error)
	Get(ctx context.Context, in *ThirdAuth, opts ...client.CallOption) (*ThirdAuthResponse, error)
	Search(ctx context.Context, in *common.BaseWhere, opts ...client.CallOption) (*ThirdAuthResponse, error)
}

type thirdAuthService struct {
	c    client.Client
	name string
}

func NewThirdAuthService(name string, c client.Client) ThirdAuthService {
	return &thirdAuthService{
		c:    c,
		name: name,
	}
}

func (c *thirdAuthService) Create(ctx context.Context, in *ThirdAuth, opts ...client.CallOption) (*ThirdAuthResponse, error) {
	req := c.c.NewRequest(c.name, "ThirdAuthService.Create", in)
	out := new(ThirdAuthResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thirdAuthService) Update(ctx context.Context, in *ThirdAuth, opts ...client.CallOption) (*ThirdAuthResponse, error) {
	req := c.c.NewRequest(c.name, "ThirdAuthService.Update", in)
	out := new(ThirdAuthResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thirdAuthService) Delete(ctx context.Context, in *ThirdAuth, opts ...client.CallOption) (*ThirdAuthResponse, error) {
	req := c.c.NewRequest(c.name, "ThirdAuthService.Delete", in)
	out := new(ThirdAuthResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thirdAuthService) Lock(ctx context.Context, in *ThirdAuth, opts ...client.CallOption) (*ThirdAuthResponse, error) {
	req := c.c.NewRequest(c.name, "ThirdAuthService.Lock", in)
	out := new(ThirdAuthResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thirdAuthService) Unlock(ctx context.Context, in *ThirdAuth, opts ...client.CallOption) (*ThirdAuthResponse, error) {
	req := c.c.NewRequest(c.name, "ThirdAuthService.Unlock", in)
	out := new(ThirdAuthResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thirdAuthService) Get(ctx context.Context, in *ThirdAuth, opts ...client.CallOption) (*ThirdAuthResponse, error) {
	req := c.c.NewRequest(c.name, "ThirdAuthService.Get", in)
	out := new(ThirdAuthResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thirdAuthService) Search(ctx context.Context, in *common.BaseWhere, opts ...client.CallOption) (*ThirdAuthResponse, error) {
	req := c.c.NewRequest(c.name, "ThirdAuthService.Search", in)
	out := new(ThirdAuthResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ThirdAuthService service

type ThirdAuthServiceHandler interface {
	Create(context.Context, *ThirdAuth, *ThirdAuthResponse) error
	Update(context.Context, *ThirdAuth, *ThirdAuthResponse) error
	Delete(context.Context, *ThirdAuth, *ThirdAuthResponse) error
	Lock(context.Context, *ThirdAuth, *ThirdAuthResponse) error
	Unlock(context.Context, *ThirdAuth, *ThirdAuthResponse) error
	Get(context.Context, *ThirdAuth, *ThirdAuthResponse) error
	Search(context.Context, *common.BaseWhere, *ThirdAuthResponse) error
}

func RegisterThirdAuthServiceHandler(s server.Server, hdlr ThirdAuthServiceHandler, opts ...server.HandlerOption) error {
	type thirdAuthService interface {
		Create(ctx context.Context, in *ThirdAuth, out *ThirdAuthResponse) error
		Update(ctx context.Context, in *ThirdAuth, out *ThirdAuthResponse) error
		Delete(ctx context.Context, in *ThirdAuth, out *ThirdAuthResponse) error
		Lock(ctx context.Context, in *ThirdAuth, out *ThirdAuthResponse) error
		Unlock(ctx context.Context, in *ThirdAuth, out *ThirdAuthResponse) error
		Get(ctx context.Context, in *ThirdAuth, out *ThirdAuthResponse) error
		Search(ctx context.Context, in *common.BaseWhere, out *ThirdAuthResponse) error
	}
	type ThirdAuthService struct {
		thirdAuthService
	}
	h := &thirdAuthServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ThirdAuthService{h}, opts...))
}

type thirdAuthServiceHandler struct {
	ThirdAuthServiceHandler
}

func (h *thirdAuthServiceHandler) Create(ctx context.Context, in *ThirdAuth, out *ThirdAuthResponse) error {
	return h.ThirdAuthServiceHandler.Create(ctx, in, out)
}

func (h *thirdAuthServiceHandler) Update(ctx context.Context, in *ThirdAuth, out *ThirdAuthResponse) error {
	return h.ThirdAuthServiceHandler.Update(ctx, in, out)
}

func (h *thirdAuthServiceHandler) Delete(ctx context.Context, in *ThirdAuth, out *ThirdAuthResponse) error {
	return h.ThirdAuthServiceHandler.Delete(ctx, in, out)
}

func (h *thirdAuthServiceHandler) Lock(ctx context.Context, in *ThirdAuth, out *ThirdAuthResponse) error {
	return h.ThirdAuthServiceHandler.Lock(ctx, in, out)
}

func (h *thirdAuthServiceHandler) Unlock(ctx context.Context, in *ThirdAuth, out *ThirdAuthResponse) error {
	return h.ThirdAuthServiceHandler.Unlock(ctx, in, out)
}

func (h *thirdAuthServiceHandler) Get(ctx context.Context, in *ThirdAuth, out *ThirdAuthResponse) error {
	return h.ThirdAuthServiceHandler.Get(ctx, in, out)
}

func (h *thirdAuthServiceHandler) Search(ctx context.Context, in *common.BaseWhere, out *ThirdAuthResponse) error {
	return h.ThirdAuthServiceHandler.Search(ctx, in, out)
}
