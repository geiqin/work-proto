// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: qrcodeService.proto

package services

import (
	_ "github.com/geiqin/micro-kit/protobuf/common"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for QrcodeService service

func NewQrcodeServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for QrcodeService service

type QrcodeService interface {
	//微信普通二维码（公众号二维码支持批量生成）
	Base(ctx context.Context, in *QrcodeRequest, opts ...client.CallOption) (*QrcodeResponse, error)
	//微信小程序码
	Mini(ctx context.Context, in *QrcodeRequest, opts ...client.CallOption) (*QrcodeResponse, error)
}

type qrcodeService struct {
	c    client.Client
	name string
}

func NewQrcodeService(name string, c client.Client) QrcodeService {
	return &qrcodeService{
		c:    c,
		name: name,
	}
}

func (c *qrcodeService) Base(ctx context.Context, in *QrcodeRequest, opts ...client.CallOption) (*QrcodeResponse, error) {
	req := c.c.NewRequest(c.name, "QrcodeService.Base", in)
	out := new(QrcodeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qrcodeService) Mini(ctx context.Context, in *QrcodeRequest, opts ...client.CallOption) (*QrcodeResponse, error) {
	req := c.c.NewRequest(c.name, "QrcodeService.Mini", in)
	out := new(QrcodeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for QrcodeService service

type QrcodeServiceHandler interface {
	//微信普通二维码（公众号二维码支持批量生成）
	Base(context.Context, *QrcodeRequest, *QrcodeResponse) error
	//微信小程序码
	Mini(context.Context, *QrcodeRequest, *QrcodeResponse) error
}

func RegisterQrcodeServiceHandler(s server.Server, hdlr QrcodeServiceHandler, opts ...server.HandlerOption) error {
	type qrcodeService interface {
		Base(ctx context.Context, in *QrcodeRequest, out *QrcodeResponse) error
		Mini(ctx context.Context, in *QrcodeRequest, out *QrcodeResponse) error
	}
	type QrcodeService struct {
		qrcodeService
	}
	h := &qrcodeServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&QrcodeService{h}, opts...))
}

type qrcodeServiceHandler struct {
	QrcodeServiceHandler
}

func (h *qrcodeServiceHandler) Base(ctx context.Context, in *QrcodeRequest, out *QrcodeResponse) error {
	return h.QrcodeServiceHandler.Base(ctx, in, out)
}

func (h *qrcodeServiceHandler) Mini(ctx context.Context, in *QrcodeRequest, out *QrcodeResponse) error {
	return h.QrcodeServiceHandler.Mini(ctx, in, out)
}
