// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: userInfoService.proto

package services

import (
	_ "github.com/geiqin/micro-kit/protobuf/common"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for UserInfoService service

func NewUserInfoServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for UserInfoService service

type UserInfoService interface {
	//拉取绑定手机号码
	PullMobile(ctx context.Context, in *UserInfoRequest, opts ...client.CallOption) (*UserInfoResponse, error)
	//通过APP拉取用户信息
	GetByApp(ctx context.Context, in *UserInfoRequest, opts ...client.CallOption) (*UserInfoResponse, error)
	//通过小程序拉取用户信息
	GetByMini(ctx context.Context, in *UserInfoRequest, opts ...client.CallOption) (*UserInfoResponse, error)
}

type userInfoService struct {
	c    client.Client
	name string
}

func NewUserInfoService(name string, c client.Client) UserInfoService {
	return &userInfoService{
		c:    c,
		name: name,
	}
}

func (c *userInfoService) PullMobile(ctx context.Context, in *UserInfoRequest, opts ...client.CallOption) (*UserInfoResponse, error) {
	req := c.c.NewRequest(c.name, "UserInfoService.PullMobile", in)
	out := new(UserInfoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInfoService) GetByApp(ctx context.Context, in *UserInfoRequest, opts ...client.CallOption) (*UserInfoResponse, error) {
	req := c.c.NewRequest(c.name, "UserInfoService.GetByApp", in)
	out := new(UserInfoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInfoService) GetByMini(ctx context.Context, in *UserInfoRequest, opts ...client.CallOption) (*UserInfoResponse, error) {
	req := c.c.NewRequest(c.name, "UserInfoService.GetByMini", in)
	out := new(UserInfoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserInfoService service

type UserInfoServiceHandler interface {
	//拉取绑定手机号码
	PullMobile(context.Context, *UserInfoRequest, *UserInfoResponse) error
	//通过APP拉取用户信息
	GetByApp(context.Context, *UserInfoRequest, *UserInfoResponse) error
	//通过小程序拉取用户信息
	GetByMini(context.Context, *UserInfoRequest, *UserInfoResponse) error
}

func RegisterUserInfoServiceHandler(s server.Server, hdlr UserInfoServiceHandler, opts ...server.HandlerOption) error {
	type userInfoService interface {
		PullMobile(ctx context.Context, in *UserInfoRequest, out *UserInfoResponse) error
		GetByApp(ctx context.Context, in *UserInfoRequest, out *UserInfoResponse) error
		GetByMini(ctx context.Context, in *UserInfoRequest, out *UserInfoResponse) error
	}
	type UserInfoService struct {
		userInfoService
	}
	h := &userInfoServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&UserInfoService{h}, opts...))
}

type userInfoServiceHandler struct {
	UserInfoServiceHandler
}

func (h *userInfoServiceHandler) PullMobile(ctx context.Context, in *UserInfoRequest, out *UserInfoResponse) error {
	return h.UserInfoServiceHandler.PullMobile(ctx, in, out)
}

func (h *userInfoServiceHandler) GetByApp(ctx context.Context, in *UserInfoRequest, out *UserInfoResponse) error {
	return h.UserInfoServiceHandler.GetByApp(ctx, in, out)
}

func (h *userInfoServiceHandler) GetByMini(ctx context.Context, in *UserInfoRequest, out *UserInfoResponse) error {
	return h.UserInfoServiceHandler.GetByMini(ctx, in, out)
}
