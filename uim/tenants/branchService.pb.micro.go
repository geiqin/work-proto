// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: branchService.proto

package services

import (
	common "github.com/geiqin/micro-kit/protobuf/common"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for BranchService service

func NewBranchServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for BranchService service

type BranchService interface {
	Create(ctx context.Context, in *Branch, opts ...client.CallOption) (*BranchResponse, error)
	Update(ctx context.Context, in *Branch, opts ...client.CallOption) (*BranchResponse, error)
	Delete(ctx context.Context, in *Branch, opts ...client.CallOption) (*BranchResponse, error)
	Get(ctx context.Context, in *Branch, opts ...client.CallOption) (*BranchResponse, error)
	Search(ctx context.Context, in *common.BaseWhere, opts ...client.CallOption) (*BranchResponse, error)
}

type branchService struct {
	c    client.Client
	name string
}

func NewBranchService(name string, c client.Client) BranchService {
	return &branchService{
		c:    c,
		name: name,
	}
}

func (c *branchService) Create(ctx context.Context, in *Branch, opts ...client.CallOption) (*BranchResponse, error) {
	req := c.c.NewRequest(c.name, "BranchService.Create", in)
	out := new(BranchResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branchService) Update(ctx context.Context, in *Branch, opts ...client.CallOption) (*BranchResponse, error) {
	req := c.c.NewRequest(c.name, "BranchService.Update", in)
	out := new(BranchResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branchService) Delete(ctx context.Context, in *Branch, opts ...client.CallOption) (*BranchResponse, error) {
	req := c.c.NewRequest(c.name, "BranchService.Delete", in)
	out := new(BranchResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branchService) Get(ctx context.Context, in *Branch, opts ...client.CallOption) (*BranchResponse, error) {
	req := c.c.NewRequest(c.name, "BranchService.Get", in)
	out := new(BranchResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branchService) Search(ctx context.Context, in *common.BaseWhere, opts ...client.CallOption) (*BranchResponse, error) {
	req := c.c.NewRequest(c.name, "BranchService.Search", in)
	out := new(BranchResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BranchService service

type BranchServiceHandler interface {
	Create(context.Context, *Branch, *BranchResponse) error
	Update(context.Context, *Branch, *BranchResponse) error
	Delete(context.Context, *Branch, *BranchResponse) error
	Get(context.Context, *Branch, *BranchResponse) error
	Search(context.Context, *common.BaseWhere, *BranchResponse) error
}

func RegisterBranchServiceHandler(s server.Server, hdlr BranchServiceHandler, opts ...server.HandlerOption) error {
	type branchService interface {
		Create(ctx context.Context, in *Branch, out *BranchResponse) error
		Update(ctx context.Context, in *Branch, out *BranchResponse) error
		Delete(ctx context.Context, in *Branch, out *BranchResponse) error
		Get(ctx context.Context, in *Branch, out *BranchResponse) error
		Search(ctx context.Context, in *common.BaseWhere, out *BranchResponse) error
	}
	type BranchService struct {
		branchService
	}
	h := &branchServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&BranchService{h}, opts...))
}

type branchServiceHandler struct {
	BranchServiceHandler
}

func (h *branchServiceHandler) Create(ctx context.Context, in *Branch, out *BranchResponse) error {
	return h.BranchServiceHandler.Create(ctx, in, out)
}

func (h *branchServiceHandler) Update(ctx context.Context, in *Branch, out *BranchResponse) error {
	return h.BranchServiceHandler.Update(ctx, in, out)
}

func (h *branchServiceHandler) Delete(ctx context.Context, in *Branch, out *BranchResponse) error {
	return h.BranchServiceHandler.Delete(ctx, in, out)
}

func (h *branchServiceHandler) Get(ctx context.Context, in *Branch, out *BranchResponse) error {
	return h.BranchServiceHandler.Get(ctx, in, out)
}

func (h *branchServiceHandler) Search(ctx context.Context, in *common.BaseWhere, out *BranchResponse) error {
	return h.BranchServiceHandler.Search(ctx, in, out)
}
